#textdomain wesnoth-Era_of_High_Sorcery

#define USE_ELVISH_PILLAGERS_DEBUG_MODE
[event]
name=prestart
  [set_menu_item]
    id=debug_mode_turn_on_with_password
    description=_"Enable Debug Mode"
    [show_if]
      [have_unit]
        side=$side_number
        [filter_wml]
          name=Elvish_Pillager
        [/filter_wml]
      [/have_unit]
      [not]
        [variable]
          name=eps_debug_mode_is_on
          boolean_equals=true
        [/variable]
      [/not]
    [/show_if]

    [filter_location]
      x,y=1,1
    [/filter_location]

    [command]
      [message]
        speaker=narrator
        side_for=$side_number
        image=wesnoth-icon.png
        caption=_"Password required"
        message=_"You must enter the password to turn on debug mode."
        [text_input]
          label=_"Password:"
          variable=entered_password
        [/text_input]
      [/message]
      {IF_VAR entered_password equals carnelian ([then]
        [message]
          speaker=narrator
          message=_"Debug mode has been turned on!"
        [/message]
        [print]
          text=_"Debug mode has been turned on!"
          size=50
          duration=150
          red,green,blue=255,255,255
        [/print]
        {VARIABLE eps_debug_mode_is_on true}
      [/then])}
    [/command]
  [/set_menu_item]

  [set_menu_item]
    id=debug_mode_use_powers_option
    description=_"Debug Mode command"
    [show_if]
      [variable]
        name=eps_debug_mode_is_on
        boolean_equals=true
      [/variable]
    [/show_if]

    [command]
      [message]
        speaker=narrator
        side_for=$side_number
        image=wesnoth-icon.png
        caption=_"Debug mode"
        message=_"Enter a command."
        [text_input]
          label=_"Command:"
          variable=entered_command
        [/text_input]
      [/message]
      [set_variables]
        name=epdbg_vars
        mode=replace
        [split]
          list=$entered_command
          key=command
          separator=":"
        [/split]
      [/set_variables]
      {VARIABLE epdbg_level 0}
      {VARIABLE epdbg_vars[0].x $x1}
      {VARIABLE epdbg_vars[0].y $y1}
      [fire_event]
        name=eps_debug_mode_command
      [/fire_event]
    [/command]
  [/set_menu_item]
[/event]

[event]
name=eps_debug_mode_command
first_time_only=no
  [set_variables]
    name={EPDBG_LEVEL_VAR this_level_command_parts}
    mode=replace
    [split]
      list=$epdbg_vars[$epdbg_level].command
      key=text
      separator=" "
    [/split]
  [/set_variables]


  {EPDBG_COMMAND kill 0 (
    [kill]
      {EPDBG_COMMAND_XY}
      animate=true
      fire_event=true
    [/kill]
  )}
  {EPDBG_COMMAND destroy 0 (
    [kill]
      {EPDBG_COMMAND_XY}
      animate=false
      fire_event=false
    [/kill]
  )}

  {EPDBG_COMMAND capture 1 (
    [capture_village]
      {EPDBG_COMMAND_XY}
      side={EPDBG_COMMAND_PART 1}
    [/capture_village]
  )}
  {EPDBG_COMMAND terrain 1 (
    [terrain]
      {EPDBG_COMMAND_XY}
      terrain={EPDBG_COMMAND_PART 1}
    [/terrain]
  )}
  {EPDBG_COMMAND fire_event 1 (
    [fire_event]
      name={EPDBG_COMMAND_PART 1}
      [primary_unit]
        {EPDBG_COMMAND_XY}
      [/primary_unit]
      [secondary_unit]
        {EPDBG_COMMAND_XY}
      [/secondary_unit]
    [/fire_event]
  )}
  {EPDBG_COMMAND create 1 (
    [if]
      [not]
        [have_unit]
          {EPDBG_COMMAND_XY}
        [/have_unit]
      [/not]
      [then]
        {VARIABLE epdbg_unit_type {EPDBG_COMMAND_PART 1}}
        {FOREACH {EPDBG_LEVEL_VAR this_level_command_parts} epdbg_i}
          {IF_VAR epdbg_i greater_than 1 ([then]
            {VARIABLE epdbg_unit_type "$epdbg_unit_type| {EPDBG_COMMAND_PART $epdbg_i|}"}
          [/then])}
        {NEXT epdbg_i}
        [unit]
          {EPDBG_COMMAND_XY}
          side=$side_number
          type=$epdbg_unit_type
          to_variable=epdbg_unit_hack
        [/unit]
        {VARIABLE epdbg_unit_hack.moves $epdbg_unit_hack.max_moves}
        {VARIABLE epdbg_unit_hack.attacks_left $epdbg_unit_hack.max_attacks}
        [unstore_unit]
          variable=epdbg_unit_hack
          advance=false
        [/unstore_unit]
        {CLEAR_VARIABLE epdbg_unit_type}
        {CLEAR_VARIABLE epdbg_unit_hack}
      [/then]
    [/if]
  )}

  {EPDBG_COMMAND show_var 1 (
    {VARIABLE epdbg_show_var_varname {EPDBG_COMMAND_PART 1}}
    {VARIABLE epdbg_show_var_value ${EPDBG_COMMAND_PART 1}}
    [message]
      speaker=narrator
      message=_"Variable
$epdbg_show_var_varname|
has value
$epdbg_show_var_value|"
    [/message]
    {CLEAR_VARIABLE epdbg_show_var_varname}
    {CLEAR_VARIABLE epdbg_show_var_value}
  )}
  {EPDBG_COMMAND show_unit_var 1 (
    [store_unit]
      [filter]
        {EPDBG_COMMAND_XY}
      [/filter]
      variable=epdbg_unit
    [/store_unit]
    {IF_VAR epdbg_unit.length greater_than 0 ([then]
      {VARIABLE epdbg_show_var_varname "epdbg_unit.{EPDBG_COMMAND_PART 1}"}
      {VARIABLE epdbg_show_var_value $epdbg_unit.{EPDBG_COMMAND_PART 1}}
      [message]
        speaker=narrator
        message=_"Variable
$epdbg_show_var_varname|
has value
$epdbg_show_var_value|"
      [/message]
    [/then])}
    {CLEAR_VARIABLE epdbg_unit}
    {CLEAR_VARIABLE epdbg_show_var_varname}
    {CLEAR_VARIABLE epdbg_show_var_value}
  )}
  {EPDBG_COMMAND set_var 2 (
    {VARIABLE {EPDBG_COMMAND_PART 1} {EPDBG_COMMAND_PART 2}}
  )}
  {EPDBG_COMMAND set_unit_var 2 (
    [store_unit]
      [filter]
        {EPDBG_COMMAND_XY}
      [/filter]
      variable=epdbg_unit_changing_hack
    [/store_unit]
    {VARIABLE epdbg_unit_changing_hack.{EPDBG_COMMAND_PART 1} {EPDBG_COMMAND_PART 2}}
    [unstore_unit]
      variable=epdbg_unit_changing_hack
      advance=false
    [/unstore_unit]
  )}

  {VARIABLE {EPDBG_LEVEL_VAR next_level} $epdbg_level}
  {VARIABLE_OP {EPDBG_LEVEL_VAR next_level} add 1}
  {EPDBG_COMMAND forall_hexes 0 (
    {CLEAR_VARIABLE {EPDBG_LEVEL_VAR hex_filter}}
    {CLEAR_VARIABLE epdbg_hex_filter_subtags_inside_array}
    {VARIABLE epdbg_num_subtags_inside 0}
    {FOREACH {EPDBG_LEVEL_VAR this_level_command_parts} epdbg_i}
    {IF_VAR epdbg_i greater_than 0 ([then]
      [set_variables]
        name=epdbg_hex_filter_line_parts
        mode=replace
        [split]
          list={EPDBG_COMMAND_PART $epdbg_i|}
          key=text
          separator="="
        [/split]
      [/set_variables]
      {IF_VAR epdbg_hex_filter_line_parts.length greater_than 1 ([then]
        # it's a key=value line
        {EPDBG_HEX_FILTER_SET_KEY_VALUE $epdbg_hex_filter_line_parts[0].text| $epdbg_hex_filter_line_parts[1].text|}
      [/then]
      [else]
        # it's a tag or /tag
        [set_variables]
          name=epdbg_hex_filter_line_parts
          mode=replace
          [split]
            list={EPDBG_COMMAND_PART $epdbg_i|}
            key=text
            separator="/"
          [/split]
        [/set_variables]
        {IF_VAR epdbg_hex_filter_line_parts.length greater_than 1 ([then]
          # It's a [/tag]
          {VARIABLE_OP epdbg_num_subtags_inside sub 1}
        [/then]
        [else]
          # It's a [tag]
          [set_variables]
            name=epdbg_hex_filter_line_parts
            mode=replace
            [split]
              list={EPDBG_COMMAND_PART $epdbg_i|}
              key=text
              separator="["
              remove_empty=yes
            [/split]
          [/set_variables]
          [set_variables]
            name=epdbg_hex_filter_line_parts
            mode=replace
            [split]
              list=$epdbg_hex_filter_line_parts.text
              key=text
              separator="]"
              remove_empty=yes
            [/split]
          [/set_variables]
          {VARIABLE epdbg_hex_filter_subtags_inside_array[$epdbg_num_subtags_inside].tagname $epdbg_hex_filter_line_parts.text}
          {VARIABLE_OP epdbg_num_subtags_inside add 1}
          # insert a dummy value (so that you can, e.g. use just [filter][/filter])
          {EPDBG_HEX_FILTER_SET_KEY_VALUE dummy dummy}
        [/else])}
      [/else])}
    [/then])}
    {NEXT epdbg_i}

    [store_locations]
      [insert_tag]
        name=and
        variable={EPDBG_LEVEL_VAR hex_filter}
      [/insert_tag]
      variable={EPDBG_LEVEL_VAR all_hexes}
    [/store_locations]
    {FOREACH {EPDBG_LEVEL_VAR all_hexes} {EPDBG_LEVEL_VAR i}}
      {VARIABLE epdbg_vars[${EPDBG_LEVEL_VAR next_level}].x ${EPDBG_LEVEL_VAR all_hexes}[${EPDBG_LEVEL_VAR i}].x}
      {VARIABLE epdbg_vars[${EPDBG_LEVEL_VAR next_level}].y ${EPDBG_LEVEL_VAR all_hexes}[${EPDBG_LEVEL_VAR i}].y}
      {EPDBG_EXECUTE_NEXT_LEVEL_COMMAND}
    {NEXT {EPDBG_LEVEL_VAR i}}
    {CLEAR_VARIABLE {EPDBG_LEVEL_VAR all_hexes}}
  )}
[/event]
#enddef

#define EPDBG_COMMAND NAME REQUIRED_ADDITIONAL_INPUTS EFFECTS
{IF_VAR {EPDBG_LEVEL_VAR this_level_command_parts}.length greater_than {REQUIRED_ADDITIONAL_INPUTS} ([then]
  {IF_VAR {EPDBG_LEVEL_VAR this_level_command_parts}[0].text equals {NAME} ([then]
    {EFFECTS}
  [/then])}
[/then])}
#enddef

#define EPDBG_COMMAND_XY
x,y=$epdbg_vars[$epdbg_level|].x|,$epdbg_vars[$epdbg_level|].y|#enddef
#define EPDBG_COMMAND_PART NUMBER
${EPDBG_LEVEL_VAR this_level_command_parts}[{NUMBER}].text|#enddef

#define EPDBG_LEVEL_VAR VAR_BASENAME
epdbg_{VAR_BASENAME}_$epdbg_level|#enddef

#define EPDBG_EXECUTE_NEXT_LEVEL_COMMAND
{VARIABLE_OP epdbg_level add 1}
[fire_event]
  name=eps_debug_mode_command
[/fire_event]
{VARIABLE_OP epdbg_level sub 1}
#enddef

#define EPDBG_HEX_FILTER_SET_KEY_VALUE KEY VALUE
        {VARIABLE epdbg_key_name {EPDBG_LEVEL_VAR hex_filter}}
        {VARIABLE epdbg_subtag_names_added 0}
        [while]
          [variable]
            name=epdbg_subtag_names_added
            less_than=$epdbg_num_subtags_inside
          [/variable]
          [do]
            {VARIABLE epdbg_key_name "$epdbg_key_name|.$epdbg_hex_filter_subtags_inside_array[$epdbg_subtag_names_added|].tagname|"}
            {VARIABLE_OP epdbg_subtag_names_added add 1}
          [/do]
        [/while]
        {VARIABLE epdbg_key_name "$epdbg_key_name|.{KEY}"}
        {VARIABLE $epdbg_key_name {VALUE}}
#enddef

