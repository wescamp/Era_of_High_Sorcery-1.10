#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("getting_hit.cfg")

-- assumes unit is on the map, unstores
function unit_got_hit(unit, damage_inflicted, inflicter, unit_weapon, inflicter_weapon, is_in_combat)
  local terminate_combat = false
  local damage_counted_against_wizard_ability = damage_inflicted
  local damage_actually_dealt = damage_inflicted

  if is_in_combat and unit_weapon.range == "melee" and not unit_is_in_a_circle_of_protection(unit) then
    -- Magical touch attacks can take effect!
    
    -- Reanimating Touch has no overlap with the others, because it takes effect only on kills and the others take effect only on non-fatal blows. Specifically it should AVOID overlapping Dispelling Touch (we don't want you being able to reanimate a unit you've just dispel'd out of existence.))
    if unit_has_explicit_enchantment(inflicter, "reanimating_touch") and unit and unit.hitpoints <= 0 and unit_is_living(unit) then
      wesnoth.fire("sound", {name="lich-hit-1.ogg"})
      remove_explicit_enchantment(inflicter, "reanimating_touch")
      wesnoth.put_unit(inflicter)
      full_kill(inflicter, { is_same_unit_as(unit) }, true, false)
      if boolean_equals_true(unit.canrecruit) then
        wesnoth.fire("store_side", { side=unit.side, variable="EOHS_LUA_TEMP"})
        wesnoth.fire("allow_recruit", { side=inflicter.side, type=wesnoth.get_variable("EOHS_LUA_TEMP.recruit") })
        wesnoth.set_variable("EOHS_LUA_TEMP")
      end
      unit.attacks_left = 0
      unit.moves = 0
      unit.hitpoints = unit.max_hitpoints
      wesnoth.float_label(unit.x, unit.y, "<span color='#000000'>"..(_"Reanimated!").."</span>")
      set_unit_variable(unit, "was_just_reanimated_in_combat", true)
      set_unit_to_reanimated_version(unit, inflicter)
      wesnoth.put_unit(unit)
      wesnoth.fire("capture_village", { x=unit.x, y=unit.y, side=unit.side })
      wesnoth.fire("redraw", { side=unit.side })
    end

    -- For various reasons, Dispelling Touch takes effect before Mud Touch.
    if unit_has_explicit_enchantment(inflicter, "dispelling_touch") and unit and unit.hitpoints > 0 then
      local dispelling_touch_consumed = false
      local use_up_dispelling_touch = function ()
        if dispelling_touch_consumed ~= true then
          dispelling_touch_consumed = true
          wesnoth.fire("sound", {name="gunshot.wav"})
          remove_explicit_enchantment(inflicter, "dispelling_touch")
          wesnoth.put_unit(inflicter)
        end
      end
      local disptouch_removes_enchantment = function (enchantment_id)
        if unit_has_explicit_enchantment(unit, enchantment_id) then
          use_up_dispelling_touch()
          remove_explicit_enchantment(unit, enchantment_id)
          wesnoth.put_unit(unit)
        end
      end 
      disptouch_removes_enchantment("dispelling_touch")
      disptouch_removes_enchantment("mud_touch")
      disptouch_removes_enchantment("reanimating_touch")
      disptouch_removes_enchantment("regeneration")
      disptouch_removes_enchantment("mage_shield")
      disptouch_removes_enchantment("wizard_sword")

      local dont_damage_summons = unit_has_explicit_enchantment(unit, "dark_pact")
      disptouch_removes_enchantment("dark_pact")

      -- Woe betide the unit if it was actually USING one of those wizard swords.
      if unit_weapon.name == "eohs_wizard_sword" then
        remove_all_attacks_until_end_of_combat(unit, inflicter)
      end

      if unit_has_eohs_special(unit, "has_been_transmogrified") then
        use_up_dispelling_touch()
        terminate_combat = true
        while unit and unit_has_eohs_special(unit, "has_been_transmogrified") do
          reverse_outermost_transmogrification_and_put_and_display_unit(unit)
        end
      end

      if unit and (unit_has_eohs_special(unit, "is_summoned_unit") or unit.race == "undead" or unit.race == "drake") and (not terminate_combat) and (not dont_damage_summons) then
        use_up_dispelling_touch()
        damage_hex_no_killing(unit.x, unit.y, wml_random((get_unit_eohs_skills(inflicter).evocation_skill * 4)..".."..(get_unit_eohs_skills(inflicter).evocation_skill * 6)), "generic", false, inflicter)
        apply_delayed_kills(inflicter)
        unit = updated_unit_table(unit)
        inflicter = updated_unit_table(inflicter)
      end
    end

    -- If they're still alive and fighting at this point, Mud Touch takes effect.
    if unit_has_explicit_enchantment(inflicter, "mud_touch") and unit and unit.hitpoints > 0 then
      local unit_to_mudtouch = unit
      if unit_has_eohs_special(unit, "is_mounted") then unit_to_mudtouch = get_current_mount(unit) end
      if unit_is_living_or_undead(unit_to_mudtouch) and (not unit_is_type(unit_to_mudtouch, "Mudcrawler")) and (not unit_is_type(unit_to_mudtouch, "Giant Mudcrawler")) and not unit_has_eohs_special(unit_to_mudtouch, "can_train_and_cast") then
        wesnoth.fire("sound", {name="squishy-hit.wav"})
        remove_explicit_enchantment(inflicter, "mud_touch")
        wesnoth.put_unit(inflicter)
        terminate_combat = true

        if unit_has_eohs_special(unit, "is_mounted") then
          local rider, mount = rider_and_mount_when_combination_splits(unit)
          if mount.level > 3 then
            transmogrify_unit(mount, "mud_touch_level_4plus")
          else
            transmogrify_unit(mount, "mud_touch_level_"..mount.level)
          end
          unit = combination_when_rider_mounts_mount(rider, mount)
          wesnoth.put_unit(unit)
          potential_death_by_terrain(unit.x, unit.y, inflicter)
          unit = updated_unit_table(unit)
          inflicter = updated_unit_table(inflicter)
        else
          if unit.level > 3 then
            transmogrify_and_put_and_display_unit(unit, "mud_touch_level_4plus")
          else
            transmogrify_and_put_and_display_unit(unit, "mud_touch_level_"..unit.level)
          end
          unit = updated_unit_table(unit)
        end
      end
    end
  end

  -- At this point, if they haven't been killed yet, apply Mage Shield, Dark Pact, and wizards' attack-ending ability.
  unit = updated_unit_table(unit)
  if unit and unit.hitpoints > 0 then
    if unit_has_explicit_enchantment(unit, "mage_shield") then
      -- Mage Shield blocks the blow.
      unit.hitpoints = unit.hitpoints + damage_inflicted
      remove_explicit_enchantment(unit, "mage_shield")
      wesnoth.put_unit(unit)

      wesnoth.float_label(unit.x, unit.y, "<span color='#8080ff'>"..damage_inflicted..(_" blocked!").."</span>")
      -- the leaders get the full benefits of mage shield plus their stock ability
      damage_actually_dealt = 0
    else
      -- if we actually took damage, Dark Pact may restore some of it
      if unit_has_explicit_enchantment(unit, "dark_pact") then
        local damage_restored = math.floor((damage_inflicted * get_unit_variable(unit, "dark_pact_lingering_strength")) / (get_unit_variable(unit, "dark_pact_lingering_strength") + 4))
        if damage_restored > 0 then
          wesnoth.set_variable("EOHS_DARK_PACT_LUA_TEMP")
          -- it's slightly faster this way than just putting this stuff directly in the filter_location.
          -- In terms of time, for four damage recipients, the store_locations takes about 25 ms,
          -- the store_unit takes about 60,
          -- and the actual distribution takes about 130.
          wesnoth.fire("store_locations", { variable = "EOHS_DARK_PACT_LUA_TEMP",
            radius = 5,
            x = unit.x,
            y = unit.y,
            { "filter_radius", is_reasonable_location }
          })
          local possible_hit_takers, num_possible_hit_takers = get_unit_array({
            side = unit.side,
            { "not", { has_explicit_enchantment("dark_pact") }},
            { "not", { is_petrified }},
            { "and", {
              { "filter_location", {
                find_in="EOHS_DARK_PACT_LUA_TEMP"
              }}
            }}
          })
          wesnoth.set_variable("EOHS_DARK_PACT_LUA_TEMP")
          if num_possible_hit_takers > 0 then
            wesnoth.fire("redraw")
            local base_damage_to_each = math.floor(damage_restored / num_possible_hit_takers)
            local damage_left_to_distribute = damage_restored - (base_damage_to_each * num_possible_hit_takers)
            for i,hit_taker in ipairs(possible_hit_takers) do
              local damage_to_this = base_damage_to_each
              if wml_random("1.."..num_possible_hit_takers) <= damage_left_to_distribute then
                damage_to_this            = damage_to_this            + 1
                damage_left_to_distribute = damage_left_to_distribute - 1
              end
              if damage_to_this > 0 then
                hit_taker.hitpoints = math.max(0, hit_taker.hitpoints - damage_to_this)
                set_unit_eohs_special(hit_taker, "took_damage_recently")
                wesnoth.float_label(hit_taker.x, hit_taker.y, "<span color='#000000'>"..damage_to_this.."</span>")
                wesnoth.put_unit(hit_taker)
                if inflicter and hit_taker.underlying_id == inflicter.underlying_id then inflicter = updated_unit_table(inflicter) end
              end
              num_possible_hit_takers = num_possible_hit_takers - 1
            end
            unit.hitpoints = unit.hitpoints + damage_restored
            wesnoth.put_unit(unit)
            wesnoth.float_label(unit.x, unit.y, "<span color='#00ff00'>"..damage_restored.."</span>")
            apply_delayed_kills(nil)
            wesnoth.fire("redraw")

            -- wizards should NOT get the full potential effects of Dark Pact combined with their attack-ending ability.
            -- on the other hand, all the damage WAS actually dealt, just some of it was restored.
            damage_counted_against_wizard_ability = damage_counted_against_wizard_ability - damage_restored
          end
        end
      end
    end
  end

  if unit and is_in_combat then
    -- This can happen even if our hitpoints were reduced to 0 or below
    set_unit_variable(unit, "damage_taken_in_this_attack", get_unit_variable(unit, "damage_taken_in_this_attack") + damage_counted_against_wizard_ability)
    wesnoth.put_unit(unit)
    if get_unit_variable(unit, "role_in_this_attack") == "defender" and unit_has_eohs_special(unit, "ends_damaging_attacks") and get_unit_variable(unit, "damage_taken_in_this_attack") >= math.ceil(unit.max_hitpoints / 4) then
      local damage_cropped = get_unit_variable(unit, "damage_taken_in_this_attack") - math.ceil(unit.max_hitpoints / 4)
      unit.hitpoints = unit.hitpoints + damage_cropped
      damage_actually_dealt = damage_actually_dealt - damage_cropped
      -- Only bother making/displaying the changes if the unit is not actually (still) dying
      if unit.hitpoints > 0 then
        terminate_combat = true
        wesnoth.put_unit(unit)
        wesnoth.float_label(unit.x, unit.y, "<span color='#86aa0e'>"..(_"capped at ")..math.ceil(unit.max_hitpoints / 4).."</span>")
      end
    end
  end

  if unit and mount_combination_hitpoint_update(unit) then wesnoth.put_unit(unit) end

  if unit and unit.hitpoints < 0 then damage_actually_dealt = damage_actually_dealt + unit.hitpoints end

  if unit then
    local unit_statistics = ensure_presence_of_and_get_unit_statistics(unit)
    unit_statistics.damage_taken = (unit_statistics.damage_taken or 0) + damage_actually_dealt
    wesnoth.put_unit(unit)
    wesnoth.set_variable("EoHS_statistics_"..unit.side..".damage_taken", (wesnoth.get_variable("EoHS_statistics_"..unit.side..".damage_taken") or 0) + damage_actually_dealt)
  end
  if inflicter then
    local unit_statistics = ensure_presence_of_and_get_unit_statistics(inflicter)
    unit_statistics.damage_dealt = (unit_statistics.damage_dealt or 0) + damage_actually_dealt
    wesnoth.put_unit(inflicter)
    wesnoth.set_variable("EoHS_statistics_"..inflicter.side..".damage_dealt", (wesnoth.get_variable("EoHS_statistics_"..inflicter.side..".damage_dealt") or 0) + damage_actually_dealt)
  end

  if unit and inflicter and is_in_combat and terminate_combat then
    -- Hack: Because the attacker hits event triggers after damage, but BEFORE poison and slowing are applied...
    local specials = helper.get_child(inflicter_weapon, "specials")
    if specials then
      if helper.get_child(specials, "poison") and unit_is_living(unit) then
        set_unit_subtag_value(unit, "status", "poisoned", "on")
      end
      if helper.get_child(specials, "slow") then
        set_unit_subtag_value(unit, "status", "slowed", "on")
      end
    end
    set_unit_eohs_special(unit, "get_out_of_combat_free_card")
    set_unit_variable(unit, "real_underlying_id", unit.underlying_id)
    unit.underlying_id = 9999999
    wesnoth.put_unit(unit)
  end
end

  >>
[/lua]

