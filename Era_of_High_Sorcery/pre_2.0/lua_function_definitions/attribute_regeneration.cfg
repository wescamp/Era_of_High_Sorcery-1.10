#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("attribute_regeneration.cfg")

all_regenerable_unit_attributes = {advances_to=true,alignment=true,cost=true,description=true,level=true,max_attacks=true,max_experience=true,max_hitpoints=true,max_moves=true,profile=true,race=true,undead_variation=true,zoc=true,advancement=true,attack=true,abilities=true,defense=true,movement_costs=true,resistance=true}

-- Does not assume unit is on the map, does not unstore.
-- Breaks scenarios that change the values, other than by using [effect].
function regenerate_unit_attributes(unit, attributes)
  attributes_are_about_to_be_regenerated(unit, attributes)

  -- Remove the vars
  for attribute,dummy in pairs(attributes) do
    unit[attribute] = nil
  end
  local i = 1
  while unit[i] do
    if attributes[unit[i][1]] then table.remove(unit, i) else i = i + 1 end
  end

  -- Regenerate the removed vars
  local proxy_unit = wesnoth.create_unit(unit).__cfg

  -- Copy them back
  for attribute,dummy in pairs(attributes) do
    unit[attribute] = proxy_unit[attribute]
  end
  for i,tag in ipairs(proxy_unit) do
    if attributes[tag[1]] then table.insert(unit, tag) end
  end
  
  -- hack: cap hitpoints
  if attributes.max_hitpoints then unit.hitpoints = math.min(unit.hitpoints, unit.max_hitpoints + get_mage_shield_extra_hitpoints(unit)) end

  attributes_were_regenerated(unit, attributes)
end

function attributes_are_about_to_be_regenerated(unit, attributes)
  variables = helper.get_child(unit, "variables")
  if variables then
    for i,tag in ipairs(variables) do
      attribute = string.match(tag[1], "before_regenerating_(.+)")
      if attribute and attributes[attribute] then _G[tag[2].lua_function](unit) end
    end
  end
end

function attributes_were_regenerated(unit, attributes)
  -- Add EoHS-global and enchantment-specific attack specials.
  -- (With the regenerating system in place, it's simpler - and hence more reliable -
  ---  to do this than to grant them with an [object].)
  if attributes.attack then
    local attack_index = 0
    for attack in helper.child_range(unit, "attack") do
      -- Clear bogus "apply_to" values from attacks granted by effects
      attack.apply_to = nil
      attack.unit_type = nil

      local specials = ensure_presence_of_and_get_subtag(attack, "specials")
      -- These definitions are relied upon in devour_soul.cfg
      table.insert(specials, { "damage", {
        id="circle_of_protection_damage_reduction_special",
        name=_"circle of protection",
        active_on="offense",
        apply_to="both",
        multiply="0.4",
        cumulative="yes",
        { "filter_opponent", { is_in_a_circle_of_protection }}
      }})
      table.insert(specials, { "swarm", {
        id="just_teleported_attack_preventing_special_1",
        name=_"just teleported",
        active_on="offense",
        apply_to="both",
        swarm_attacks_min=0,
        swarm_attacks_max=0,
        { "filter_self", { has_explicit_enchantment("just_teleported") }}
      }})
      table.insert(specials, { "swarm", {
        id="just_teleported_attack_preventing_special_2",
        name=_"just teleported",
        active_on="offense",
        apply_to="both",
        swarm_attacks_min=0,
        swarm_attacks_max=0,
        { "filter_opponent", { has_explicit_enchantment("just_teleported") }}
      }})

      for i,enchantment_pair in ipairs(EoHS_explicit_enchantments) do
        local enchantment_info = enchantment_pair[2]
        if unit_has_explicit_enchantment(unit, enchantment_info.id) then
          local weapon_modifications = helper.get_child(enchantment_info, "weapon_modifications")
          if weapon_modifications and (weapon_modifications.range == nil or attack.range == weapon_modifications.range) then
            if weapon_modifications.increase_damage then
              attack.damage = attack.damage + weapon_modifications.increase_damage
            end
            if weapon_modifications.increase_attacks then
              attack.number = attack.number + weapon_modifications.increase_attacks
            end
            for special in helper.child_range(weapon_modifications, "special") do
              table.insert(specials, { special.type, special })
            end
          end
        end
      end
    end
  end

  local variables = helper.get_child(unit, "variables")
  if variables then
    for i,tag in ipairs(variables) do
      attribute = string.match(tag[1], "after_regenerating_(.+)")
      if attribute and attributes[attribute] then _G[tag[2].lua_function](unit) end
    end
  end

  if attributes.abilities or attributes.level then
    -- Hack: replace leadership.
    -- Do this after the other updates because wizards change their level at the "after_regenerating_" time.
    -- Hack 2: this only applies to leaders.
    if unit_has_eohs_special(unit, "can_train_and_cast") then
      local abilities = helper.get_child(unit, "abilities")
      if abilities then
        replace_leadership_with_eohs_leadership_through_level(abilities, unit.level)
      end
    end
  end

  --[[if attributes.advances_to and unit_has_eohs_special(unit, "default_advancement_is_set") then
    local advancement_found = false
    for advancement in comma_separated_values(unit.advances_to) do
      if advancement == get_unit_variable(unit, "EoHS_default_advancement") then
        unit.advances_to = advancement
        advancement_found = true
        break
      end
    end
    if not advancement_found then
      clear_unit_eohs_special(unit, "default_advancement_is_set")
      set_unit_variable(unit, "real_advances_to")
      set_unit_variable(unit, "EoHS_default_advancement")
    end
  end]]--
end

function strip_static_specials(attack)
  local specials = helper.get_child(attack, "specials")
  if specials then
    local i = 1
    while specials[i] do
      if specials[i][2].id == "circle_of_protection_damage_reduction_special" or specials[i][2].id == "just_teleported_attack_preventing_special_1" or specials[i][2].id == "just_teleported_attack_preventing_special_2" then table.remove(specials, i) else i = i + 1 end
    end
  end
end

function replace_leadership_with_eohs_leadership_through_level(abilities, level)
  local i = 1
  local first_leadership_index = nil
  while abilities[i] do
    if abilities[i][1] == "leadership" and abilities[i][2].id == "leadership" then
      -- this is a standard leadership ability; clear it, mark for replacement
      if not first_leadership_index then first_leadership_index = i end
      table.remove(abilities, i)
    else
      i = i + 1
    end
  end
  
  if first_leadership_index then
    -- dummy ability, to display the name and description
    table.insert(abilities, first_leadership_index, { "leadership", {
      id = "leadership", -- deliberately the same, so that these are cleared and not duplicated
      name = _"leadership",
      female_name = _"female^leadership",
      description = _"Leadership:\nThis unit can lead our own units that are next to it, making them fight better.\n\nAdjacent own units of lower level will do more damage in battle. When a unit adjacent to, of a lower level than, and on the same side as a unit with Leadership engages in combat, its attacks do 25% more damage times the difference in their levels.",
      affect_self = "no",
    }})

    for our_level=1,level do
      for their_level=0,(our_level - 1) do
        -- the actual abilities don't need to be at the same index - just the visible ability.
        table.insert(abilities, { "leadership", {
          id = "leadership", -- deliberately the same, so that these are cleared and not duplicated
          affect_self = "no",
          cumulative = "no",
          value = (our_level - their_level) * 25,
          { "filter", { level = our_level }},
          { "affect_adjacent", { adjacent = "n,ne,se,s,sw,nw", { "filter", { level = their_level }} }},
        }})
      end
    end
  end
end


function unit_type_was_just_replaced(unit)
  -- make the few Wesnoth-mandated changes based on type (updating image and language_name...)
  -- it's hacky to use regenerate_unit_vars with these attributes, but it works.
  regenerate_unit_attributes(unit, { image=true, language_name=true, undead_variation=true, usage=true })
  local variables = helper.get_child(unit, "variables")
  if variables then
    for instructions in helper.child_range(variables, "after_type_changes") do
      _G[instructions.lua_function](unit)
    end
  end
  regenerate_unit_graphics(unit)
end


  >>
[/lua]

