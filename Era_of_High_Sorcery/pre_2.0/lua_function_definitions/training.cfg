#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("training.cfg")

EoHS_picks = {}

magic_training_string     = _"Train your magical skills"
magic_training_icon       = "attacks/woodensword.png"
magic_training_icon_small = "attacks/woodensword.png~SCALE(36,36)"

function set_to_magic_training_message_speaker(message_tag_contents)
  message_tag_contents.speaker = "narrator"
  message_tag_contents.caption = magic_training_string
  message_tag_contents.image   = magic_training_icon
  --message_tag_contents.side_for = wesnoth.current.side
  return message_tag_contents
end

-- This is currently called in both preprocessing and initing, because forbid_unit_creation might already be on or it might just be set to be on after prestart.
function zap_unit_creation_forbidden_picks()
  if boolean_equals_true(wesnoth.get_variable("EoHS_settings.forbid_unit_creation")) then
    -- Remove certain entirely-useless picks.
    local i = 1
    while EoHS_picks[i] do
      if EoHS_picks[i][2].remove_when_unit_creation_forbidden then table.remove(EoHS_picks,i) else i = i + 1 end
    end
  end
end

function eohs_preprocess_training_data()
  zap_unit_creation_forbidden_picks()

  for i,pick_pair in ipairs(EoHS_picks) do
    local pick_info = pick_pair[2]

    pick_info.id = pick_pair[1]
    if pick_info.type == "realm_skill" then
      pick_info.description = pick_info.description.."\n\n".._"Scroll to the right to view the abilities granted by this realm at different skill levels."
      local max_notable_level = 0
      local level_abilities = {}
      for i,spell_pair in ipairs(EoHS_spells) do
        local spell_info = spell_pair[2]
        for allowance in helper.child_range(spell_info, "realm_allowance") do
          if allowance.realm.."_skill" == pick_info.id then
            if not level_abilities[allowance.level] then level_abilities[allowance.level] = {} end
            table.insert(level_abilities[allowance.level], _"Cast "..spell_info.name)
            max_notable_level = math.max(allowance.level, max_notable_level)
          end
        end
      end
      if pick_info.id == "evocation_skill" then
        if not level_abilities[2] then level_abilities[2] = {} end
        if not level_abilities[4] then level_abilities[4] = {} end
        table.insert(level_abilities[2], _"pick Dwarvish Alliance")
        table.insert(level_abilities[4], _"pick Archmage")
      end
      if pick_info.id == "nature_magic_skill" then
        if not level_abilities[2] then level_abilities[2] = {} end
        if not level_abilities[4] then level_abilities[4] = {} end
        table.insert(level_abilities[2], _"pick Elvish Alliance")
        table.insert(level_abilities[4], _"pick Archmage")
      end
      if pick_info.id == "necromancy_skill" then
        if not level_abilities[1] then level_abilities[1] = {} end
        if not level_abilities[2] then level_abilities[2] = {} end
        if not level_abilities[3] then level_abilities[3] = {} end
        if not level_abilities[4] then level_abilities[4] = {} end
        table.insert(level_abilities[1], _"Recruit Walking Corpse")
        table.insert(level_abilities[1], _"Recruit Vampire Bat")
        table.insert(level_abilities[2], _"Recruit Skeleton")
        table.insert(level_abilities[2], _"Recruit Skeleton Archer")
        table.insert(level_abilities[3], _"Recruit Ghoul")
        table.insert(level_abilities[4], _"pick Archmage")
        table.insert(level_abilities[7], _"advance to Lich")
      end
      for i=1,max_notable_level do
        if i == 1 then
          pick_info.level_abilities_description = ""
        else
          pick_info.level_abilities_description = pick_info.level_abilities_description.."\n"
        end
        pick_info.level_abilities_description = pick_info.level_abilities_description.._"Level "..i..": "
        if level_abilities[i] then
          for j,message in ipairs(level_abilities[i]) do
            pick_info.level_abilities_description = pick_info.level_abilities_description..message
            if level_abilities[i][j+1] then
              pick_info.level_abilities_description = pick_info.level_abilities_description..", "
            end
          end
        end
      end
    end
  end
end

function create_eohs_training_menu_item()
  zap_unit_creation_forbidden_picks()

  create_eohs_menu_item({
    id = "eohs_train_skills",
    image = magic_training_icon_small,
    description = magic_training_string,
    { "filter_location", { { "filter", { side = "$side_number", has_eohs_special("can_train_and_cast") }} }},
    { "command", {
      { "lua", {
        code = "magic_training_screen()"
      }},
    }},
  })
end

function make_picks_desc(skills)
  local desc = ""
  for i,pick_pair in ipairs(EoHS_picks) do
    local pick_info = pick_pair[2]
    if skills[pick_info.id] then
      if pick_info.type == "realm_skill" then
        desc = desc.."\n"..skills[pick_info.id].." "..pick_info.name
      else
        desc = desc.."\n"..pick_info.name.." ("..pick_cost_string(pick_info.id)..")"
      end
    end
  end
  if skills.picks_left then desc = desc.."\n"..skills.picks_left.._" picks remaining" end
  return desc
end

function pick_cost_string(pick_id)
  local pick_info = helper.get_child(EoHS_picks, pick_id)
  if pick_info.type == "realm_skill" then
    return _"1 point per level"
  else
    if pick_info.cost == 1 then
      return _"1 point"
    else
      return tostring(pick_info.cost).._" points"
    end
  end
end

function magic_training_screen()
  local unit = get_unit_table({ x = wesnoth.current.event_context.x1, y = wesnoth.current.event_context.y1 })
  local old_skills = get_unit_eohs_skills(unit)
  local new_skills = naive_deep_copy(old_skills)

  local exited_training_dialog = false
  local has_no_picks_yet = true
  for k,v in pairs(old_skills) do
    if k ~= "picks_left" then has_no_picks_yet = false end
  end
  while not exited_training_dialog do
    local magic_training_screen_message = set_to_magic_training_message_speaker({
      { "option", { message = "<span size='larger'>".._"Your old skills:".."</span>"..make_picks_desc(old_skills).."\n" }},
      { "option", { message = "<span size='larger'>".._"Your new skills:".."</span>"..make_picks_desc(new_skills).."\n" }},
      { "option", {
        message = "*".._"Done training (use new skills)",
        { "command", {
          { "set_variable", { name = "EoHS_magic_training_option_picked", value = "done_picking" }},
        }},
      }},
      { "option", {
        message = _"Cancel training (use old skills)",
        { "command", {
          { "set_variable", { name = "EoHS_magic_training_option_picked", value = "cancel_picking" }},
        }},
      }},
      { "option", {
        message = _"Hide disallowed picks",
        { "show_if", { { "not", { { "variable", {
          name = "EoHS_hide_disallowed_picks_"..wesnoth.current.side,
          boolean_equals = true,
        }} }} }},
        { "command", { { "set_variable", {
          name = "EoHS_hide_disallowed_picks_"..wesnoth.current.side,
          value = "true",
        }}, }},
      }},
      { "option", {
        message = _"Show disallowed picks",
        { "show_if", { { "variable", {
          name = "EoHS_hide_disallowed_picks_"..wesnoth.current.side,
          boolean_equals = true,
        }} }},
        { "command", { { "set_variable", {
          name = "EoHS_hide_disallowed_picks_"..wesnoth.current.side,
          value = "false",
        }}, }},
      }},
      { "option", {
        message = _"Hide pick descriptions",
        { "show_if", { { "not", { { "variable", {
          name = "EoHS_hide_pick_descriptions_"..wesnoth.current.side,
          boolean_equals = true,
        }} }} }},
        { "command", { { "set_variable", {
          name = "EoHS_hide_pick_descriptions_"..wesnoth.current.side,
          value = "true",
        }}, }},
      }},
      { "option", {
        message = _"Show pick descriptions",
        { "show_if", { { "variable", {
          name = "EoHS_hide_pick_descriptions_"..wesnoth.current.side,
          boolean_equals = true,
        }} }},
        { "command", { { "set_variable", {
          name = "EoHS_hide_pick_descriptions_"..wesnoth.current.side,
          value = "false",
        }}, }},
      }},
      wrap_width_increase_option,
      wrap_width_decrease_option,
      { "option", {
        message = _"Reset to old skills",
        { "command", {
          { "set_variable", { name = "EoHS_magic_training_option_picked", value = "reset_to_old_skills" }},
        }},
      }},
    })
    if has_no_picks_yet then
      if boolean_equals_true(wesnoth.get_variable("EoHS_hide_pick_descriptions_"..wesnoth.current.side)) then
        table.insert(magic_training_screen_message, { "option", {
          message = "&units/random-dice.png~SCALE(18,18)=<span color='#00FF00'>".._"Spend all my picks at random".."</span>",
          { "command", {
            { "set_variable", { name = "EoHS_magic_training_option_picked", value = "pick_at_random" }},
          }},
        }})
      else
        table.insert(magic_training_screen_message, { "option", {
          message = "&units/random-dice.png=<span color='#00FF00'>".._"Spend all my picks at random".."</span>\n".._"Always gives generally reasonable builds.".."\n".._"Recommended for beginners.",
          { "command", {
            { "set_variable", { name = "EoHS_magic_training_option_picked", value = "pick_at_random" }},
          }},
        }})
      end
    end

    for i,pick_pair in ipairs(EoHS_picks) do
      local pick_info = pick_pair[2]
      
      local cant_buy_messages = {}

      local already_have_this_ability = pick_info.type == "ability" and new_skills[pick_info.id]
      if already_have_this_ability then
        -- If you already have it, then none of the other restrictions are at all meaningful, so only continue if you don't
        cant_buy_messages[1] = _"You already have this ability."
      else
        if (pick_info.type == "realm_skill" and new_skills.picks_left <= 0) or (pick_info.type ~= "realm_skill" and new_skills.picks_left < pick_info.cost) then
          table.insert(cant_buy_messages, _"You do not have enough picks left to learn that skill.")
        end

        if pick_info.restrictions then pick_info.restrictions(new_skills, cant_buy_messages) end
      end

      if not (cant_buy_messages[1] and boolean_equals_true(wesnoth.get_variable("EoHS_hide_disallowed_picks_"..wesnoth.current.side))) then
        -- the pick option should be present.
        local this_magic_training_option_contents = {}
        if cant_buy_messages[1] then
          -- can't buy the pick.
          -- WARNING: much duplicate code between this and the can-cast section below.
          -- WARNING: much duplicate code between this and spellcasting.cfg.
          local cant_buy_message_string = ""
          for i,message in ipairs(cant_buy_messages) do
            cant_buy_message_string = cant_buy_message_string.."\n"..message
          end
          cant_buy_message_string = wrap_text_to_width(cant_buy_message_string, wesnoth.get_variable("EoHS_text_wrap_width_"..wesnoth.current.side), 4)
          
          local color = "FF0000"
          if already_have_this_ability then color = "0000FF" end
          if boolean_equals_true(wesnoth.get_variable("EoHS_hide_pick_descriptions_"..wesnoth.current.side)) then
            this_magic_training_option_contents.message = "&"..pick_info.image.."~SCALE(18,18)=<span color='#"..color.."'>"..pick_info.name.." ("..pick_cost_string(pick_info.id)..")</span>"
          else
            this_magic_training_option_contents.message = "&"..pick_info.image.."=<span color='#"..color.."'>"..pick_info.name.." ("..pick_cost_string(pick_info.id)..")\n<span size='small'>"..cant_buy_message_string.."</span></span>\n<span size='small'>"..wrap_text_to_width(pick_info.description, wesnoth.get_variable("EoHS_text_wrap_width_"..wesnoth.current.side), 4).."</span>"
            if pick_info.level_abilities_description then
              this_magic_training_option_contents.message = this_magic_training_option_contents.message.."="..pick_info.level_abilities_description
            end
          end

          table.insert(this_magic_training_option_contents, { "command", {
            { "message", set_to_magic_training_message_speaker({ message = cant_buy_message_string }) },
          }})
        else
          -- can buy the pick.
            -- WARNING: much duplicate code between this and the can-buy section above.
            -- WARNING: much duplicate code between this and spellcasting.cfg.
          if boolean_equals_true(wesnoth.get_variable("EoHS_hide_pick_descriptions_"..wesnoth.current.side)) then
            this_magic_training_option_contents.message = "&"..pick_info.image.."~SCALE(18,18)=<span color='#00FF00'>"..pick_info.name.." ("..pick_cost_string(pick_info.id)..")</span>"
          else
            this_magic_training_option_contents.message = "&"..pick_info.image.."=<span color='#00FF00'>"..pick_info.name.." ("..pick_cost_string(pick_info.id)..")</span>\n"..wrap_text_to_width(pick_info.description, wesnoth.get_variable("EoHS_text_wrap_width_"..wesnoth.current.side), 4)
            if pick_info.level_abilities_description then
              this_magic_training_option_contents.message = this_magic_training_option_contents.message.."=<span size='smaller'>"..pick_info.level_abilities_description.."</span>"
            end
          end
          table.insert(this_magic_training_option_contents, { "command", {
            { "set_variable", { name = "EoHS_magic_training_option_picked", value = pick_info.id }},
          }})
        end
        table.insert(magic_training_screen_message, { "option", this_magic_training_option_contents })
      end
    end

    -- clear the value-transport variable, just in case
    wesnoth.set_variable("EoHS_magic_training_option_picked")

    wesnoth.fire("message", magic_training_screen_message)

    local which_option_picked = wesnoth.get_variable("EoHS_magic_training_option_picked")
    wesnoth.set_variable("EoHS_magic_training_option_picked")
    if which_option_picked then
      if which_option_picked == "done_picking" then
        if (new_skills.picks_left == 0) and (old_skills.picks_left ~= 0) and not (
               new_skills.military_commander
            or new_skills.prince_of_thieves
            or new_skills.elvish_alliance
            or new_skills.dwarvish_alliance
            or new_skills.orcish_mercenaries
            or new_skills.archmage
            or (new_skills.necromancy_skill and new_skills.necromancy_skill > 0)
          ) then
          wesnoth.fire("message", set_to_magic_training_message_speaker({ message=_"<span color='#ff3333' size='xx-large'>=====WARNING=====</span>\n\nYou haven't selected any skills that allow you to recruit units. It can be hard to play without recruits. Are you sure you want to do this?",
          { "option", {
            message = _"No, let me choose something else",
            { "command", {
              { "set_variable", { name = "EoHS_dont_finish_training", value = "true" }},
            }},
          }},
          { "option", {
            message = _"Yes, I know what I'm doing"
          }},
        }))
        end
        
        if wesnoth.get_variable("EoHS_dont_finish_training") then
          wesnoth.set_variable("EoHS_dont_finish_training")
          new_skills = naive_deep_copy(old_skills)
        else
          apply_magical_skills(unit, new_skills)
          exited_training_dialog = true
        end
      elseif which_option_picked == "cancel_picking" then
        exited_training_dialog = true
      elseif which_option_picked == "reset_to_old_skills" then
        new_skills = naive_deep_copy(old_skills)
      elseif which_option_picked == "pick_at_random" then
        new_skills = naive_deep_copy(old_skills)
        -- Note to maintainer: How "randomly_SPEND_PICKS" should work is a matter of interpretation,
        -- and it may need to be updated with each new skill that can be bought.
        -- Also, note that it duplicates most of the requirements : it could very easily become able to grant impossible pick combinations.
        if new_skills.picks_left and new_skills.picks_left > 0 then
          function fake_buy_ability(ability)
            ability_info = helper.get_child(EoHS_picks, ability)
            new_skills.picks_left = new_skills.picks_left - ability_info.cost
            new_skills[ability] = true
          end
          if new_skills.picks_left == 1 then fake_buy_ability("orcish_mercenaries")
          else
            local realm = wml_random("evocation_skill,nature_magic_skill,necromancy_skill")
            local recruit = wml_random("1..4")
            if realm == "evocation_skill" then
              if recruit == 1 then fake_buy_ability("military_commander") end
              if recruit == 2 then fake_buy_ability("prince_of_thieves") end
              if recruit == 3 then fake_buy_ability("orcish_mercenaries") end
              if recruit == 4 then fake_buy_ability("dwarvish_alliance") end
            end
            if realm == "nature_magic_skill" then
              if recruit == 1 then fake_buy_ability("military_commander") end
              if recruit == 2 then fake_buy_ability("prince_of_thieves") end
              if recruit == 3 then fake_buy_ability("orcish_mercenaries") end
              if recruit == 4 then fake_buy_ability("elvish_alliance") end
            end
            if realm == "necromancy_skill" then
              if recruit == 2 then fake_buy_ability("prince_of_thieves") end
              if recruit == 3 then fake_buy_ability("orcish_mercenaries") end
            end
            if new_skills.picks_left >= 7 and wml_random("1..8") == 1 then
              fake_buy_ability("enchanter")
            end
            if new_skills.picks_left >= 7 and wml_random("1..8") == 1 then
              fake_buy_ability("farseer")
            end
            if new_skills.picks_left >= 7 and wml_random("1..5") == 1 then
              fake_buy_ability("archmage")
            end
            if realm ~= "necromancy_skill" and new_skills.picks_left >= 8 and wml_random("1..3") == 1 then
              fake_buy_ability("superb_summoner")
            end
            new_skills[realm] = new_skills.picks_left
            new_skills.picks_left = 0
          end
        end
      else
        pick_chosen = helper.get_child(EoHS_picks, which_option_picked)
        if pick_chosen.type == "realm_skill" then
          wesnoth.set_variable("amount_requested")
          wesnoth.fire("message", set_to_magic_training_message_speaker({
            message = _"<span size='larger'>Your old skills:</span>"..make_picks_desc(old_skills).."\n\n".._"<span size='larger'>Your new skills:</span>"..make_picks_desc(new_skills).."\n\n".._"How much "..pick_chosen.name.._" would you like to purchase?",
            { "text_input", { label = _"Amount:", variable = "amount_requested" }},
          }))
          local amount_requested = tonumber(wesnoth.get_variable("amount_requested"))
          wesnoth.set_variable("amount_requested")
          if amount_requested then
            amount_requested = math.max(0, math.min(new_skills.picks_left, math.floor(amount_requested)))
            if amount_requested > 0 then
              if new_skills[pick_chosen.id] then new_skills[pick_chosen.id] = new_skills[pick_chosen.id] + amount_requested
              else new_skills[pick_chosen.id] = amount_requested end
              new_skills.picks_left = new_skills.picks_left - amount_requested
            end
          end
        else
          new_skills[pick_chosen.id] = true
          new_skills.picks_left = new_skills.picks_left - pick_chosen.cost
        end
      end
    end
  end
end

-- this function can't avoid making changes that modify the map. go ahead with it.
function apply_magical_skills(unit, new_skills)
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")
  local old_skills = {}
  local v,i = helper.get_child(variables, "EoHS_skills")
  if v then
    old_skills = naive_deep_copy(v)
    variables[i][2] = new_skills
  else
    table.insert(variables, { "EoHS_skills", new_skills })
  end

  function has_gained(property_func)
    return property_func(new_skills) and not property_func(old_skills)
  end
  function gain_recruits_with_pick(pick_id, recruits)
    if has_gained(function(skills) return skills[pick_id] end) then
      wesnoth.fire("allow_recruit", { side = unit.side, type = recruits })
    end
  end

  local modifications = ensure_presence_of_and_get_subtag(unit, "modifications")

  if not boolean_equals_true(wesnoth.get_variable("EoHS_settings.forbid_unit_creation")) then
    gain_recruits_with_pick("military_commander", "Spearman,Bowman,Fencer,Heavy Infantryman,Cavalryman,Horseman,Merman Fighter")
    gain_recruits_with_pick("prince_of_thieves",  "Thief,Thug,Poacher,Footpad")
    gain_recruits_with_pick("elvish_alliance",    "Elvish Fighter,Elvish Archer,Elvish Scout,Elvish Shaman,Merman Hunter")
    gain_recruits_with_pick("dwarvish_alliance",  "Dwarvish Fighter,Dwarvish Thunderer,Dwarvish Guardsman,Dwarvish Ulfserker,Dwarvish Scout")
    gain_recruits_with_pick("orcish_mercenaries", "Orcish Grunt,Orcish Archer,Orcish Assassin,Naga Fighter")
    if has_gained(function(skills) return skills.archmage and skills.evocation_skill and (skills.evocation_skill >= 4) end) then
      wesnoth.fire("allow_recruit", { side = unit.side, type = "Mage" })
    end
    if has_gained(function(skills) return skills.archmage and skills.nature_magic_skill and (skills.nature_magic_skill >= 4) end) then
      wesnoth.fire("allow_recruit", { side = unit.side, type = "Mage" })
    end
    if has_gained(function(skills) return skills.archmage and skills.necromancy_skill and (skills.necromancy_skill >= 4) end) then
      wesnoth.fire("allow_recruit", { side = unit.side, type = "Dark Adept" })
    end
    if has_gained(function(skills) return skills.necromancy_skill and (skills.necromancy_skill >= 1) end) then
      wesnoth.fire("allow_recruit", { side = unit.side, type = "Walking Corpse,Vampire Bat" })
    end
    if has_gained(function(skills) return skills.necromancy_skill and (skills.necromancy_skill >= 2) end) then
      wesnoth.fire("allow_recruit", { side = unit.side, type = "Skeleton,Skeleton Archer" })
    end
    if has_gained(function(skills) return skills.necromancy_skill and (skills.necromancy_skill >= 3) end) then
      wesnoth.fire("allow_recruit", { side = unit.side, type = "Ghoul" })
    end
  end

  -- A lot of the pick effects are defined elsewhere.
  -- This is a situation to make sure we don't miss anything.
  regenerate_unit_attributes(unit, all_regenerable_unit_attributes)

  update_max_spell_range(unit)
  wesnoth.put_unit(unit)

  update_all_dark_pacts_owned_by(unit)
  unit = updated_unit_table(unit)
end

  >>
[/lua]

