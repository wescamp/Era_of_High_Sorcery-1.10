#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("spellcasting.cfg")

EoHS_spells = {} -- the spells/ directory will add to this

max_spellcast_distance_around_cavewall = 100

spellcasting_string     = _"Cast a spell"
spellcasting_icon       = "attacks/staff-magic.png"
spellcasting_icon_small = "attacks/staff-magic.png~SCALE(36,36)"

function set_to_spellcasting_message_speaker(message_tag_contents)
  message_tag_contents.speaker = "narrator"
  message_tag_contents.caption = spellcasting_string
  message_tag_contents.image   = spellcasting_icon
  --message_tag_contents.side_for = wesnoth.current.side
  return message_tag_contents
end

-- This is currently called in both preprocessing and initing, because forbid_unit_creation might already be on or it might just be set to be on after prestart.
function zap_summon_spells()
  if boolean_equals_true(wesnoth.get_variable("EoHS_settings.forbid_unit_creation")) then
    -- Categorically remove summon spells. They don't EXIST.
    local i = 1
    while EoHS_spells[i] do
      if EoHS_spells[i][2].is_summon or EoHS_spells[i][2].remove_when_unit_creation_forbidden then table.remove(EoHS_spells,i) else i = i + 1 end
    end
  end
end

function eohs_preprocess_spellcasting_data()
  zap_summon_spells()

  for i,spell_pair in ipairs(EoHS_spells) do
    local spell_info = spell_pair[2]

    spell_info.id = spell_pair[1]

    if spell_info.is_summon then
      local summon = helper.get_child(spell_info, "summon")
      summon.moves = 0
      summon.attacks_left = 0
      add_overlay(summon, "misc/loyal-icon.png")
      set_unit_eohs_special(summon, "is_summoned_unit")

      local summon_proxy_unit_table = naive_deep_copy(summon)
      summon_proxy_unit_table.x = 1
      summon_proxy_unit_table.y = 1
      summon_proxy_unit_table.side = 1
      summon_proxy_unit_table.random_traits = false
      summon_proxy_unit_table.random_gender = false
      summon_proxy_unit_table.generate_name = false
      spell_info.summon_proxy = wesnoth.create_unit(summon_proxy_unit_table).__cfg
      if not spell_info.image then spell_info.image = unit_image(spell_info.summon_proxy) end
      spell_info.base_casting_cost = spell_info.summon_proxy.cost
      if spell_info.summon_two then spell_info.base_casting_cost = spell_info.summon_proxy.cost * 2 end
    end

    if not string.find(spell_info.image, "attacks/") then
      local image_width, image_height = image_dimensions(spell_info.image)
      local min_x = math.floor(math.max(0, (image_width/2)-25-(spell_info.image_xoffs or 0)))
      local min_y = math.floor(math.max(0, (image_height/2)-25-(spell_info.image_yoffs or 0)))
      local max_x = math.ceil(math.min(image_width, (image_width/2)+25-(spell_info.image_xoffs or 0)))
      local max_y = math.ceil(math.min(image_height, (image_height/2)+25-(spell_info.image_yoffs or 0)))
      spell_info.image = "attacks/blank-attack.png~BLIT("..spell_info.image.."~CROP("..min_x..","..min_y..","..(max_x - min_x)..","..(max_y - min_y).."),5,5)"
    end
  end

  table.sort(EoHS_spells, function (first, second)
    local least_realm_allowance_of_first = nil
    for allowance in helper.child_range(first[2], "realm_allowance") do
      if least_realm_allowance_of_first == nil or allowance.realm < least_realm_allowance_of_first.realm or (allowance.realm == least_realm_allowance_of_first.realm and allowance.level < least_realm_allowance_of_first.level) then
        least_realm_allowance_of_first = allowance
      end
    end
    local least_realm_allowance_of_second = nil
    for allowance in helper.child_range(second[2], "realm_allowance") do
      if least_realm_allowance_of_second == nil or allowance.realm < least_realm_allowance_of_second.realm or (allowance.realm == least_realm_allowance_of_second.realm and allowance.level < least_realm_allowance_of_second.level) then
        least_realm_allowance_of_second = allowance
      end
    end

    if least_realm_allowance_of_first and least_realm_allowance_of_second then
          if least_realm_allowance_of_first .realm < least_realm_allowance_of_second.realm then return true
      elseif least_realm_allowance_of_second.realm < least_realm_allowance_of_first .realm then return false
      elseif least_realm_allowance_of_first .level < least_realm_allowance_of_second.level then return true
      elseif least_realm_allowance_of_second.level < least_realm_allowance_of_first .level then return false
      end
    elseif least_realm_allowance_of_first and not least_realm_allowance_of_second then return true
    elseif least_realm_allowance_of_second and not least_realm_allowance_of_first then return false
    end
    return first[2].id < second[2].id
  end)
end

function create_eohs_spellcasting_menu_item()
  zap_summon_spells()

  create_eohs_menu_item({
    id = "eohs_cast_spell",
    image = spellcasting_icon_small,
    description = spellcasting_string,
    { "filter_location", is_reasonable_location },
    { "show_if", {
      { "have_unit", {
        side="$side_number",
        has_eohs_special("can_train_and_cast"),
        can_cast_at_event_location,
      }},
      -- Hack: proxies. We currently don't have a particularly good system for them.
      { "or", {
        { "have_unit", {
          side="$side_number",
          has_eohs_special("is_spellcasting_proxy"),
          could_theoretically_cast_at_event_location,
        }},
      }}
    }},
    { "command", {
      { "lua", {
        code = "spellcasting_screen()"
      }},
    }},
  })
end

function skills_give_knowledge_of_spell(skills, spell_id)
  local spell_info = helper.get_child(EoHS_spells, spell_id)
  for realm_allowance in helper.child_range(spell_info, "realm_allowance") do
    if skills_include_realm_skill(skills, realm_allowance.realm, realm_allowance.level) then return true end
  end
end

function unit_knows_spell(unit, spell_id)
  local skills = get_unit_eohs_skills(unit)
  if skills and skills_give_knowledge_of_spell(skills, spell_id) then return true end
  return false
end

could_theoretically_cast_at_event_location = { "and", {
  { "filter_location", {
    x = "$x1",
    y = "$y1",
    radius = max_spellcast_distance_around_cavewall,
    { "filter_radius", is_reasonable_location },
  }},
}}
can_cast_at_event_location = { "and", {
  could_theoretically_cast_at_event_location,
  { "and", {
    { "filter_location", {
      x = "$x1",
      y = "$y1",
      radius = "$this_unit.variables.EoHS_max_spell_range"
    }},
  }},
}}

function spellcasting_screen()
  wesnoth.fire("store_map_dimensions")

  local which_spellcaster_message = { }

  local possible_self_casters = get_unit_array({
    side = wesnoth.current.side,
    has_eohs_special("can_train_and_cast"),
    can_cast_at_event_location,
  })

  for i,possible_caster in ipairs(possible_self_casters) do
    table.insert(which_spellcaster_message, { "option", {
      message = "&"..unit_image(possible_caster).."="..possible_caster.name,
      { "command", {
        { "set_variable", { name = "EoHS_caster_id",               value = possible_caster.underlying_id }},
        { "set_variable", { name = "EoHS_spellcasting_conduit_id", value = possible_caster.underlying_id }},
      }},
    }})
  end

  local possible_spellcasting_conduits = get_unit_array({
    side = wesnoth.current.side,
    has_eohs_special("is_spellcasting_proxy"),
    could_theoretically_cast_at_event_location,
  })
  for i,possible_conduit in ipairs(possible_spellcasting_conduits) do
    local possible_conduit_variables = helper.get_child(possible_conduit, "variables")
    if variables then
      local caster_filter = helper.get_child(possible_conduit_variables, "EoHS_special_spellcasting_proxy_caster_filter")
      if caster_filter then
        local possible_casters_for_conduit = get_unit_array({
          side = wesnoth.current.side,
          has_eohs_special("can_train_and_cast"),
          { "and", caster_filter },
        })
        for i,possible_caster in ipairs(possible_casters_for_conduit) do
          table.insert(which_spellcaster_message, { "option", {
            message = "&"..unit_image(possible_caster).."="..possible_caster.name..(_", via ")..possible_conduit.name,
            { "command", {
              { "set_variable", { name = "EoHS_caster_id",               value = possible_caster.underlying_id }},
              { "set_variable", { name = "EoHS_spellcasting_conduit_id", value = possible_conduit.underlying_id }},
            }},
          }})
        end
      end
    end
  end

  wesnoth.set_variable("EoHS_terminate_spellcasting")
  if which_spellcaster_message[2] then
    -- There are at least two options. The player has to choose.
    which_spellcaster_message.message = _"Cast from which unit?"
    set_to_spellcasting_message_speaker(which_spellcaster_message)
    table.insert(which_spellcaster_message, { "option", {
      message = _"Never mind.",
      { "command", {
        { "set_variable", { name = "EoHS_terminate_spellcasting", value = "true" }},
      }},
    }})
    wesnoth.fire("message", which_spellcaster_message)
  elseif which_spellcaster_message[1] then
    -- There is exactly one option. Pick it by default. 
    execute_tag_as_wml_actions(which_spellcaster_message[1][2][1][2])
  else
    -- There are no options! Crap!
    which_spellcaster_message.message = _"You have no units that can cast spells at that area of the map."
    set_to_spellcasting_message_speaker(which_spellcaster_message)
    wesnoth.set_variable("EoHS_terminate_spellcasting", "true")
  end

  if wesnoth.get_variable("EoHS_terminate_spellcasting") then
    wesnoth.set_variable("EoHS_terminate_spellcasting")
    return
  end

  local circumstances = {
    target_x = wesnoth.current.event_context.x1,
    target_y = wesnoth.current.event_context.y1,
    source_unit = get_unit_table({ { "filter_wml", { underlying_id = wesnoth.get_variable("EoHS_spellcasting_conduit_id") }} }),
    caster = get_unit_table({ { "filter_wml", { underlying_id = wesnoth.get_variable("EoHS_caster_id") }} }),
  }

  circumstances.target_unit = get_unit_table({ x = circumstances.target_x, y = circumstances.target_y })

  wesnoth.set_variable("EoHS_spellcasting_conduit_id")
  wesnoth.set_variable("EoHS_caster_id")

  local exited_spell_dialog = false
  while not exited_spell_dialog do
    local spellcasting_screen_message = set_to_spellcasting_message_speaker({
      { "option", {
        message = _"Never mind.",
        { "command", {
          { "set_variable", { name = "EoHS_terminate_spellcasting", value = "true" }},
        }},
      }},
      { "option", {
        message = _"Hide disallowed spells",
        { "show_if", { { "not", { { "variable", {
          name = "EoHS_hide_disallowed_spells_"..wesnoth.current.side,
          boolean_equals = true,
        }} }} }},
        { "command", { { "set_variable", {
          name = "EoHS_hide_disallowed_spells_"..wesnoth.current.side,
          value = "true",
        }}, }},
      }},
      { "option", {
        message = _"Show disallowed spells",
        { "show_if", { { "variable", {
          name = "EoHS_hide_disallowed_spells_"..wesnoth.current.side,
          boolean_equals = true,
        }} }},
        { "command", { { "set_variable", {
          name = "EoHS_hide_disallowed_spells_"..wesnoth.current.side,
          value = "false",
        }}, }},
      }},
      { "option", {
        message = _"Hide spell descriptions",
        { "show_if", { { "not", { { "variable", {
          name = "EoHS_hide_spell_descriptions_"..wesnoth.current.side,
          boolean_equals = true,
        }} }} }},
        { "command", { { "set_variable", {
          name = "EoHS_hide_spell_descriptions_"..wesnoth.current.side,
          value = "true",
        }}, }},
      }},
      { "option", {
        message = _"Show spell descriptions",
        { "show_if", { { "variable", {
          name = "EoHS_hide_spell_descriptions_"..wesnoth.current.side,
          boolean_equals = true,
        }} }},
        { "command", { { "set_variable", {
          name = "EoHS_hide_spell_descriptions_"..wesnoth.current.side,
          value = "false",
        }}, }},
      }},
      wrap_width_increase_option,
      wrap_width_decrease_option,
    })
    if wesnoth.get_variable("EoHS_settings.spellcasting_resource") == "mana" then
      spellcasting_screen_message.message = _"You have "..get_unit_variable(circumstances.caster, "EoHS_mana", 0).._" mana."
    end
    if wesnoth.get_variable("EoHS_settings.spellcasting_resource") == "gold" then
      spellcasting_screen_message.message = _"You have "..wesnoth.get_side(circumstances.caster.side).gold.._" gold."
    end

    for i,spell_pair in ipairs(EoHS_spells) do
      local spell_info = spell_pair[2]
      if unit_knows_spell(circumstances.caster, spell_info.id) then
        local cant_cast_messages = {}

        if unit_has_eohs_special(circumstances.caster, "has_been_transmogrified") then
          table.insert(cant_cast_messages, _"You can't cast spells while in an altered form.")
        end
        if location_has_a_circle_of_protection_hostile_to_side(circumstances.target_x, circumstances.target_y, circumstances.caster.side) then
          table.insert(cant_cast_messages, _"You can't cast spells into an enemy side's circle of protection.")
        end

        local complete_cost = get_complete_spell_cost(spell_info.id, circumstances, cant_cast_messages)
        get_spell_range(spell_info.id, circumstances, cant_cast_messages)
        if spell_info.restrictions then spell_info.restrictions(circumstances, cant_cast_messages) end

        if spell_info.is_enchantment and not circumstances.target_unit then
          table.insert(cant_cast_messages, _"An enchantment spell can only be cast on a unit.")
        end
        if spell_info.is_summon then
          -- Various checks for summon spells
          if circumstances.target_unit then
            table.insert(cant_cast_messages, _"You can't summon a new creature where there is already a unit.")
          end
          if not unit_can_move_on_hex(spell_info.summon_proxy, circumstances.target_x, circumstances.target_y) then
            table.insert(cant_cast_messages, _"You can't summon a creature onto a hex that it can't normally enter.")
          end
          if spell_info.summon_two then get_location_for_second_summon(spell_info.id, circumstances, cant_cast_messages) end
        end

        wesnoth.set_variable("spell_base_range", spell_info.base_range)

        if not (cant_cast_messages[1] and boolean_equals_true(wesnoth.get_variable("EoHS_hide_disallowed_spells_"..wesnoth.current.side))) then
          -- the spell option should be present.
          local this_spellcasting_option_contents = {}
          if cant_cast_messages[1] then
            -- can't cast the spell.
            -- WARNING: much duplicate code between this and the can-cast section below.
            -- WARNING: much duplicate code between this and training.cfg.
            local cant_cast_message_string = ""
            for i,message in ipairs(cant_cast_messages) do
              cant_cast_message_string = cant_cast_message_string.."\n"..message
            end
            cant_cast_message_string = wrap_text_to_width(cant_cast_message_string, wesnoth.get_variable("EoHS_text_wrap_width_"..wesnoth.current.side), 4)

            if boolean_equals_true(wesnoth.get_variable("EoHS_hide_spell_descriptions_"..wesnoth.current.side)) then
              this_spellcasting_option_contents.message = "&"..spell_info.image.."~SCALE(18,18)=<span color='#FF0000'>"..spell_info.name.." ("..complete_cost.cost_string..")</span>"
            else
              this_spellcasting_option_contents.message = "&"..spell_info.image.."=<span color='#FF0000'>"..spell_info.name.." ("..complete_cost.cost_string..")\n<span size='small'>"..cant_cast_message_string.."</span></span>"
              if spell_info.description ~= nil then
                this_spellcasting_option_contents.message = this_spellcasting_option_contents.message.."\n<span size='small'>"..wrap_text_to_width(substitute_wml_variables(spell_info.description), wesnoth.get_variable("EoHS_text_wrap_width_"..wesnoth.current.side), 4).."</span>"
              end
            end

            table.insert(this_spellcasting_option_contents, { "command", {
              { "message", set_to_spellcasting_message_speaker({ message = cant_cast_message_string }) },
              { "set_variable", { name = "EoHS_terminate_spellcasting", value = "true" }},
            }})
          else
            -- can cast the spell.
            -- WARNING: much duplicate code between this and the cant-cast section above.
            -- WARNING: much duplicate code between this and training.cfg.
            if boolean_equals_true(wesnoth.get_variable("EoHS_hide_spell_descriptions_"..wesnoth.current.side)) then
              this_spellcasting_option_contents.message = "&"..spell_info.image.."~SCALE(18,18)=<span color='#00FF00'>"..spell_info.name.." ("..complete_cost.cost_string..")</span>"
            else
              this_spellcasting_option_contents.message = "&"..spell_info.image.."=<span color='#00FF00'>"..spell_info.name.." ("..complete_cost.cost_string..")</span>"
              if spell_info.description ~= nil then
                this_spellcasting_option_contents.message = this_spellcasting_option_contents.message.."\n"..wrap_text_to_width(substitute_wml_variables(spell_info.description), wesnoth.get_variable("EoHS_text_wrap_width_"..wesnoth.current.side), 4)
              end
            end
            table.insert(this_spellcasting_option_contents, { "command", {
              { "set_variable", { name = "EoHS_terminate_spellcasting", value = "true" }},
              { "set_variable", { name = "EoHS_user_asked_to_cast_this_spell", value = spell_info.id }},
            }})
          end
          table.insert(spellcasting_screen_message, { "option", this_spellcasting_option_contents })
        end
        wesnoth.set_variable("spell_base_range", numerical_range)
      end
    end
    
    -- clear the value-transport variables, just in case
    wesnoth.set_variable("EoHS_terminate_spellcasting")
    wesnoth.set_variable("EoHS_user_asked_to_cast_this_spell")

    wesnoth.fire("message", spellcasting_screen_message)
    
    if wesnoth.get_variable("EoHS_terminate_spellcasting") then
      wesnoth.set_variable("EoHS_terminate_spellcasting")
      exited_spell_dialog = true
    end
    
    if wesnoth.get_variable("EoHS_user_asked_to_cast_this_spell") then
      exited_spell_dialog = true
      local spell_info = helper.get_child(EoHS_spells, wesnoth.get_variable("EoHS_user_asked_to_cast_this_spell"))
      if spell_info.warn_about_self_casting and circumstances.target_x == circumstances.caster.x and circumstances.target_y == circumstances.caster.y then
        wesnoth.set_variable("EoHS_terminate_spellcasting")
        wesnoth.fire("message", set_to_spellcasting_message_speaker({ message=_"<span color='#ff3333' size='xx-large'>=====WARNING=====</span>\n\nAre you sure you want to cast this spell at yourself? (Remember, you must bring up the right-click menu at the <b>target</b> of the spell.)",
          { "option", {
            message = _"No, let me choose something else",
            { "command", {
              { "set_variable", { name = "EoHS_terminate_spellcasting", value = "true" }},
            }},
          }},
          { "option", {
            message = _"Yes, I know what I'm doing"
          }},
        }))
      end

      if not wesnoth.get_variable("EoHS_terminate_spellcasting") then
        unit_casts_spell(spell_info.id, circumstances)
        -- Everything will exit right after this with no reading of global variables, so it's safe to:
        event_is_over_its_okay_to_advance_now()
      end
    end
    wesnoth.set_variable("EoHS_user_asked_to_cast_this_spell")
  end
end

function update_max_spell_range(unit)
  local max_range = 0
  for i,spell_pair in ipairs(EoHS_spells) do
    local spell_info = spell_pair[2]
    if unit_knows_spell(unit, spell_info.id) then
      max_range = math.max(max_range, get_spell_range(spell_info.id, { caster = unit }))
    end
  end
  set_unit_variable(unit, "EoHS_max_spell_range", max_range)
end

-- Returns a number: 0 for self, 1 for adjacent, other numbers for that range post-calculation.
-- Gives cant_cast_messages for out-of-range castings, which is not always identical to the range number
-- (currently "self" spells can't be cast from proxies.)
function get_spell_range(spell_id, circumstances, cant_cast_messages)
  local spell_info = helper.get_child(EoHS_spells, spell_id)
  if spell_info.base_range == "self" then
    if cant_cast_messages and (circumstances.target_x ~= circumstances.caster.x or circumstances.target_y ~= circumstances.caster.y) then
      table.insert(cant_cast_messages, _"You can only cast that spell at your own location.")
    end
    return 0
  elseif spell_info.base_range == "adjacent" then
    if cant_cast_messages and helper.distance_between(circumstances.source_unit.x, circumstances.source_unit.y, circumstances.target_x, circumstances.target_y) ~= 1 then
      table.insert(cant_cast_messages, _"You can only cast that spell at an adjacent hex.")
    end
    return 1
  else
    -- assume it's a number
    local spell_range = spell_info.base_range
    if get_unit_eohs_skills(circumstances.caster).farseer then spell_range = math.ceil(spell_info.base_range * 1.5) end
    if cant_cast_messages and helper.distance_between(circumstances.source_unit.x, circumstances.source_unit.y, circumstances.target_x, circumstances.target_y) > spell_range then
      table.insert(cant_cast_messages, _"That target is beyond your maximum range for that spell.")
    end
    return spell_range
  end
end

--[[ format for output:
{
  use_attack_action = true/false/nil
  use_free_enchantment_casting = true/false/nil
  use_free_summon_casting = true/false/nil
  gold_or_mana = number or nil
  cost_string = translatable string
}
--]]
function get_complete_spell_cost(spell_id, circumstances, cant_cast_messages)
  local spell_info = helper.get_child(EoHS_spells, spell_id)
  local results = {}
  
  if spell_info.base_casting_cost == "free" then
    results.cost_string = _"No cost"
    -- also, a free spell never stops you from casting it due to price, even if you have negative gold
  else
    -- we assume that base_casting_cost is a number
    results.gold_or_mana = spell_info.base_casting_cost
    if wesnoth.get_variable("EoHS_settings.multiply_spell_prices") then
      results.gold_or_mana = results.gold_or_mana * wesnoth.get_variable("EoHS_settings.multiply_spell_prices")
    end
    if circumstances and get_unit_eohs_skills(circumstances.caster).archmage and not spell_info.fixed_price then
      results.gold_or_mana = results.gold_or_mana * 0.8
    end

    -- Has to be an integer!!! round to nearest.
    results.gold_or_mana = math.floor(results.gold_or_mana + 0.5)
    
    if wesnoth.get_variable("EoHS_settings.spellcasting_resource") == "mana" then
      results.cost_string = results.gold_or_mana..(_" mana")

      if cant_cast_messages and get_unit_variable(circumstances.caster, "EoHS_mana", 0) < results.gold_or_mana then
        table.insert(cant_cast_messages, _"You don't have enough mana to cast that spell.")
      end
    end
    if wesnoth.get_variable("EoHS_settings.spellcasting_resource") == "gold" then
      results.cost_string = results.gold_or_mana..(_" gold")

      if cant_cast_messages and wesnoth.get_side(circumstances.caster.side).gold < results.gold_or_mana then
        table.insert(cant_cast_messages, _"You don't have enough gold to cast that spell.")
      end
    end
  end

  if spell_info.is_instant then
    results.cost_string = results.cost_string..(_", Instant")
  elseif circumstances then
    local free_enchantment_potential = get_unit_variable(circumstances.caster, "free_enchantment_potential_for_this_turn")
    if get_unit_eohs_skills(circumstances.caster).enchanter and spell_info.is_enchantment and free_enchantment_potential and free_enchantment_potential > 0 then
      results.use_free_enchantment_casting = true
    else
      local free_summon_potential = get_unit_variable(circumstances.caster, "free_summon_potential_for_this_turn")
      if get_unit_eohs_skills(circumstances.caster).superb_summoner and spell_info.is_summon and free_summon_potential and free_summon_potential > 0 then
        results.use_free_summon_casting = true
      else
        if circumstances.caster.attacks_left > 0 then
          results.use_attack_action = true
        else
          table.insert(cant_cast_messages, _"You can't cast that spell because you don't have any attacks left.")
        end
      end
    end
  end

  if spell_info.is_enchantment then
    results.cost_string = results.cost_string..(_", Enchantment")
  end

  if spell_info.override_cost_string then results.cost_string = spell_info.override_cost_string(circumstances) end

  return results
end

function get_location_for_second_summon(spell_id, circumstances, cant_cast_messages)
  local spell_info = helper.get_child(EoHS_spells, spell_id)
  local direction_to_target = direction_to_hex(circumstances.source_unit.x, circumstances.source_unit.y, circumstances.target_x, circumstances.target_y)
  local x, y = get_loc_in_direction(circumstances.source_unit.x, circumstances.source_unit.y, direction_clockwise_from(direction_to_target))
  if hex_is_empty(x, y) and unit_can_move_on_hex(spell_info.summon_proxy, x, y) then return x,y end
  local x, y = get_loc_in_direction(circumstances.source_unit.x, circumstances.source_unit.y, direction_counterclockwise_from(direction_to_target))
  if hex_is_empty(x, y) and unit_can_move_on_hex(spell_info.summon_proxy, x, y) then return x,y end

  if cant_cast_messages then table.insert(cant_cast_messages, _"There is no viable hex to place the second unit next to the first.") end
end


function unit_casts_spell(spell_id, circumstances)
  local spell_info = helper.get_child(EoHS_spells, spell_id)

  local skills = get_unit_eohs_skills(circumstances.caster)
  if skills then
    for realm_allowance in helper.child_range(spell_info, "realm_allowance") do
      if skills_include_realm_skill(skills, realm_allowance.realm, realm_allowance.level) then
        if (not circumstances.casting_skill) or circumstances.casting_skill < skills[realm_allowance.realm.."_skill"] then
          circumstances.casting_skill = skills[realm_allowance.realm.."_skill"]
        end
      end
    end
  end

  -- Pay the price:
  local complete_cost = get_complete_spell_cost(spell_info.id, circumstances)
  if complete_cost.gold_or_mana then
    modify_wizard_gold_or_mana(circumstances.caster, -complete_cost.gold_or_mana, true)
  end
  if complete_cost.use_attack_action then
    circumstances.caster.attacks_left = circumstances.caster.attacks_left - 1
    if spell_info.is_summon then set_unit_variable(circumstances.caster, "free_summon_potential_for_this_turn", (get_unit_variable(circumstances.caster, "free_summon_potential_for_this_turn") or 0) + 1) end
  end
  if complete_cost.use_free_enchantment_casting then
    set_unit_variable(circumstances.caster, "free_enchantment_potential_for_this_turn", get_unit_variable(circumstances.caster, "free_enchantment_potential_for_this_turn") - 1)
  end
  if complete_cost.use_free_summon_casting then
    set_unit_variable(circumstances.caster, "free_summon_potential_for_this_turn", get_unit_variable(circumstances.caster, "free_summon_potential_for_this_turn") - 1)
  end

  -- and spellcasting is always tiring
  circumstances.caster.resting = false

  if circumstances.target_x > circumstances.caster.x then circumstances.caster.facing = "se" end
  if circumstances.target_x < circumstances.caster.x then circumstances.caster.facing = "sw" end

  wesnoth.fire("redraw")
  set_unit_eohs_special(circumstances.caster, "is_casting_a_spell")
  regenerate_unit_graphics(circumstances.caster)
  wesnoth.put_unit(circumstances.caster)

  eohs_animate_unit({
    flag = "EoHS_start_casting",
    with_bars = true,
    { "filter", { is_same_unit_as(circumstances.caster) }},
  })
  wesnoth.fire("scroll_to", { x = circumstances.target_x, y = circumstances.target_y, check_fogged = true })

  -- Get all sides that can see the caster, to display the cast message only to those sides.
  local sides_list
  for side_number in ipairs(wesnoth.sides) do
    if wesnoth.match_unit(wesnoth.get_unit(circumstances.caster.underlying_id), { { "filter_vision", {}} }) then
      sides_list = add_to_comma_separated_list(sides_list, tostring(side_number))
    end
  end

  wesnoth.fire("chat", { speaker = "EoHS", message = circumstances.caster.name.." casts "..spell_info.name..".", side = sides_list})

  -- if any of these are the same unit, make sure to send only the updated version to spell_take_effect
  if circumstances.source_unit.underlying_id == circumstances.caster.underlying_id then
    circumstances.source_unit = circumstances.caster
  end
  if circumstances.target_unit and circumstances.target_unit.underlying_id == circumstances.caster.underlying_id then
    circumstances.target_unit = circumstances.caster
  end

  spell_take_effect(spell_id, circumstances, complete_cost)
  
  wesnoth.fire("redraw")
  -- Re-store, in case the effect changed the caster
  circumstances.caster = updated_unit_table(circumstances.caster)
  -- Also, in rare cases, the spell might have KILLED the caster, so only proceed if they can be found:
  if circumstances.caster then
    clear_unit_eohs_special(circumstances.caster, "is_casting_a_spell")
    regenerate_unit_graphics(circumstances.caster)
    wesnoth.put_unit(circumstances.caster)
    eohs_animate_unit({
      flag = "EoHS_stop_casting",
      with_bars = true,
      { "filter", { is_same_unit_as(circumstances.caster) }},
    })
  end
end

function spell_take_effect(spell_id, circumstances, complete_cost_paid)
  local spell_info = helper.get_child(EoHS_spells, spell_id)

  if spell_info.effects then spell_info.effects(circumstances, complete_cost_paid) end
  if spell_info.is_summon then
    spell_summon_unit(spell_id, circumstances, complete_cost_paid)
    if spell_info.summon_two then
      circumstances.target_x, circumstances.target_y = get_location_for_second_summon(spell_id, circumstances)
      spell_summon_unit(spell_id, circumstances, complete_cost_paid)
    end
  end
end

function spell_summon_unit(spell_id, circumstances, complete_cost_paid)
  local spell_info = helper.get_child(EoHS_spells, spell_id)
  local summon = naive_deep_copy(helper.get_child(spell_info, "summon"))

  summon.side = circumstances.caster.side
  set_unit_variable(summon, "EoHS_owning_unit", circumstances.caster.underlying_id)
  if complete_cost_paid.gold_or_mana then set_unit_variable(summon, "price_originally_summoned_for", complete_cost_paid.gold_or_mana) end
  local wizard_symbol = helper.get_child(circumstances.caster, "variables").wizard_symbol
  local image_width, image_height = image_dimensions(wizard_symbol)
  --add_overlay(summon, "misc/blank-hex.png~BLIT("..wizard_symbol..","..math.floor(20 - (image_width / 2))..",12)")
  summon = wesnoth.create_unit(summon).__cfg
  -- Monsters should have traits anyway...
  if summon.race == "monster" then
    hack_give_random_traits(summon)
  end
  local modifications = ensure_presence_of_and_get_subtag(summon, "modifications")
  table.insert(modifications, wesnoth.get_variable("loyal_trait")[1])
  summon.x = circumstances.target_x
  summon.y = circumstances.target_y
  put_unit_table(summon)
  unit_was_artificially_created(summon)
end

function hack_give_random_traits(unit)
  -- this is a crude, but easy-to-implement, way to choose two separate traits
  local modifications = ensure_presence_of_and_get_subtag(unit, "modifications")
  local trait1
  local trait2
  while trait1 == trait2 do
    trait1 = wml_random("strong,intelligent,resilient,quick")
    trait2 = wml_random("strong,intelligent,resilient,quick")
  end
  table.insert(modifications, wesnoth.get_variable(trait1.."_trait")[1])
  table.insert(modifications, wesnoth.get_variable(trait2.."_trait")[1])
  regenerate_unit_attributes(unit, {attack=true, max_hitpoints=true, max_moves=true, max_experience=true})
  unit.hitpoints = nil
end

function unit_was_artificially_created(unit)
  wesnoth.fire("capture_village", { x = unit.x, y = unit.y, side = unit.side })
  wesnoth.fire_event("prerecruit", unit.x, unit.y)
  unit = updated_unit_table(unit)
  if unit then
    eohs_animate_unit({
      flag = "recruited",
      { "filter", { is_same_unit_as(unit) }}
    })

    wesnoth.fire_event("recruit", unit.x, unit.y)

    unit = updated_unit_table(unit)
    if unit then
      wesnoth.fire("redraw", { side = unit.side })
    end
  end
end

  >>
[/lua]

