#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("statistics.cfg")

function get_unit_statistics(unit)
  local variables = helper.get_child(unit, "variables")
  if variables then
    return helper.get_child(variables, "EoHS_statistics")
  end
end

function ensure_presence_of_and_get_unit_statistics(unit)
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")
  return ensure_presence_of_and_get_subtag(variables, "EoHS_statistics")
end

magic_statistics_string     = _"Statistics &amp; unit options"
magic_statistics_icon       = "icons/letter_and_ale.png"
magic_statistics_icon_small = "icons/letter_and_ale.png~SCALE(36,36)"

function set_to_magic_statistics_message_speaker(unit, message_tag_contents)
  if unit then
    message_tag_contents.image = unit_image(unit)
  else
    message_tag_contents.image = magic_statistics_icon
  end
  message_tag_contents.speaker = "narrator"
  message_tag_contents.caption = magic_statistics_string
  --message_tag_contents.side_for = wesnoth.current.side
  return message_tag_contents
end

function create_eohs_statistics_menu_item()
  create_eohs_menu_item({
    id = "eohs_view_stats",
    image = magic_statistics_icon_small,
    description = _"Statistics & unit options",
    { "command", {
      { "lua", {
        code = "magic_statistics_screen()"
      }},
    }},
  })
end

function magic_statistics_screen()
  wesnoth.set_variable("which_EoHS_statistics_screen", "basic")
  local unit = get_unit_table({ x = wesnoth.current.event_context.x1, y = wesnoth.current.event_context.y1 })
  while wesnoth.get_variable("which_EoHS_statistics_screen") ~= "exit" do
    if wesnoth.get_variable("which_EoHS_statistics_screen") == "basic" then
      local message = set_to_magic_statistics_message_speaker(unit, {
        eohs_simple_option(_"Exit statistics screen", "which_EoHS_statistics_screen", "exit"),
        eohs_simple_option("&"..no_image.."=".._"Your overall damage dealt:".."="..(wesnoth.get_variable("EoHS_statistics_"..wesnoth.current.side..".damage_dealt") or 0)),
        eohs_simple_option("&"..no_image.."=".._"Your overall damage taken:".."="..(wesnoth.get_variable("EoHS_statistics_"..wesnoth.current.side..".damage_taken") or 0)),
        eohs_simple_option("&"..no_image.."=".._"Your overall kills:".."="..(wesnoth.get_variable("EoHS_statistics_"..wesnoth.current.side..".kills") or 0)),
        eohs_simple_option("&"..no_image.."=".._"Your overall losses:".."="..(wesnoth.get_variable("EoHS_statistics_"..wesnoth.current.side..".losses") or 0)),
      })
      if unit and unit.side == wesnoth.current.side then
        local statistics = ensure_presence_of_and_get_unit_statistics(unit)
        table.insert(message, eohs_simple_option("&"..no_image.."=".._"This unit's damage dealt:".."="..(statistics.damage_dealt or 0)))
        table.insert(message, eohs_simple_option("&"..no_image.."=".._"This unit's damage taken:".."="..(statistics.damage_taken or 0)))
        table.insert(message, eohs_simple_option("&"..no_image.."=".._"This unit's kills:".."="..(statistics.kills or 0)))
	--[[if unit.advances_to and string.match(unit.advances_to, ",")
	 or unit_has_eohs_special(unit, "default_advancement_is_set") then -- i.e. if there is more than one advancement option
	  local advances_to = unit.advances_to
	  if unit_has_eohs_special(unit, "default_advancement_is_set") then advances_to = get_unit_variable(unit, "EoHS_real_advances_to") end
	  for advancement in comma_separated_values(advances_to) do
	    local default_string = ""
	    if unit_has_eohs_special(unit, "default_advancement_is_set") and unit.advances_to == advancement then default_string = _"(current default)" end
	    table.insert(message, eohs_simple_option("&"..no_image.."=".._"Set this unit's default advancement to "..wesnoth.get_unit_type(advancement).name.."="..default_string, "EoHS_statistics_screen_command", "set_default_advancement_to"..advancement))
	  end
	end]]--
        if unit_has_eohs_special(unit, "can_train_and_cast") and (unit_is_type(unit, "Mage") or unit_is_type(unit, "Red Mage") or unit_is_type(unit, "Arch Mage") or unit_is_type(unit, "Great Mage")) then
          table.insert(message, eohs_simple_option("&"..no_image.."=".._"Set this unit's hair color to black", "EoHS_statistics_screen_command", "set_hair_color_to_black"))
          table.insert(message, eohs_simple_option("&"..no_image.."=".._"Set this unit's hair color to brown", "EoHS_statistics_screen_command", "set_hair_color_to_brown"))
          table.insert(message, eohs_simple_option("&"..no_image.."=".._"Set this unit's hair color to blond", "EoHS_statistics_screen_command", "set_hair_color_to_blond"))
          table.insert(message, eohs_simple_option("&"..no_image.."=".._"Set this unit's hair color to hot pink", "EoHS_statistics_screen_command", "set_hair_color_to_hot_pink"))
          table.insert(message, eohs_simple_option("&"..no_image.."=".._"Set this unit's hair color to bright red", "EoHS_statistics_screen_command", "set_hair_color_to_bright_red"))
          table.insert(message, eohs_simple_option("&"..no_image.."=".._"Set this unit's hair color to purple", "EoHS_statistics_screen_command", "set_hair_color_to_purple"))
          table.insert(message, eohs_simple_option("&"..no_image.."=".._"Set this unit's hair color to turquoise", "EoHS_statistics_screen_command", "set_hair_color_to_turquoise"))
          table.insert(message, eohs_simple_option("&"..no_image.."=".._"Set this unit's hair color by RGB input", "EoHS_statistics_screen_command", "set_hair_color_to_rgb"))
        end
      end
      wesnoth.set_variable("EoHS_statistics_screen_command")
      wesnoth.fire("message", message)
      local command = wesnoth.get_variable("EoHS_statistics_screen_command")
      wesnoth.set_variable("EoHS_statistics_screen_command")
      if command then
        --[[local default_advancement = string.match(command, "set_default_advancement_to(.*)")
	if default_advancement then
	  if not unit_has_eohs_special(unit, "default_advancement_is_set") then
	    set_unit_eohs_special(unit, "default_advancement_is_set")
	    set_unit_variable(unit, "EoHS_real_advances_to", unit.advances_to)
	  end
	  set_unit_variable(unit, "EoHS_default_advancement", default_advancement)
	  regenerate_unit_attributes(unit, {advances_to=true})
	end]]--
        local hair_color = string.match(command, "set_hair_color_to_(.*)")
        if hair_color then
          if hair_color == "rgb" then
            wesnoth.set_variable("which_EoHS_statistics_screen", "hair_rgb")
          else
            recolor_wizard_skin_and_hair(unit, current_wizard_skin_color(unit), _G["wizard_"..hair_color.."_hair"])
            regenerate_unit_graphics(unit)
          end
        end
      end
    end
    if wesnoth.get_variable("which_EoHS_statistics_screen") == "hair_rgb" then
      wesnoth.set_variable("EoHS_statistics_screen_command")
      wesnoth.fire("message", set_to_magic_statistics_message_speaker(unit, {
        message = _"You must input three values from 0 to 255, separated by commas or spaces.", -- actually, any non-numerical separator works, but no need to mention that
        eohs_simple_option("Change your hair color to the given input", "EoHS_statistics_screen_command", "yes"),
        eohs_simple_option("Use the color shown.", "which_EoHS_statistics_screen", "basic"),
        { "text_input", { label = _"RGB:", variable = "EoHS_hair_rgb_str" }}
      }))
      if wesnoth.get_variable("EoHS_statistics_screen_command") and wesnoth.get_variable("EoHS_hair_rgb_str") then
        local color_table = {}
        color_table.r, color_table.g, color_table.b = string.match(wesnoth.get_variable("EoHS_hair_rgb_str"), "(%d+)[^%d]+(%d+)[^%d]+(%d+)")
        if color_table.r and color_table.g and color_table.b then
          recolor_wizard_skin_and_hair(unit, current_wizard_skin_color(unit), color_table)
          regenerate_unit_graphics(unit)
        end
      end
    end
  end
  wesnoth.put_unit(unit)
end

  >>
[/lua]

