#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("reanimated_undead.cfg")

-- does not assume unit is on the map, does not unstore.
-- Updates all unit variables to the correct values. Can be freely called on already-reanimated units.
-- Does have a few effects on already-undead units (it makes them summoned and loyal, for instance), but not many.
function set_unit_to_reanimated_version(unit, new_owner)
  if not unit_has_eohs_special(unit, "is_reanimated_undead") then
    set_unit_eohs_special(unit, "is_reanimated_undead")
    
    modifications = ensure_presence_of_and_get_subtag(unit, "modifications")
    variables = ensure_presence_of_and_get_subtag(unit, "variables")

    -- Some effects can be direct and permanent:
    if not boolean_equals_true(unit.canrecruit) then unit.overlays = unit.overlays..",misc/loyal-icon.png" end
    if tostring(unit.name) == "" then unit.name = (_"Undead ")..tostring(unit.language_name) else unit.name = (_"Undead ")..tostring(unit.name) end
    if helper.get_child(modifications, "trait", "undead") == nil then table.insert(modifications, wesnoth.get_variable("undead_trait")[1]) end
    if helper.get_child(modifications, "trait", "loyal") == nil then table.insert(modifications, wesnoth.get_variable("loyal_trait")[1]) end
    set_unit_subtag_value(unit, "status", "not_living", "yes")
    set_unit_subtag_value(unit, "status", "poisoned", "no")
    clear_unit_eohs_special(unit, "is_wizard_leader")
    set_unit_eohs_special(unit, "is_summoned_unit")
    set_unit_variable(unit, "EoHS_owning_unit", new_owner.underlying_id)
    unit.side = new_owner.side

    -- Some effects are permanent, but indirect (they will have no effect until we regenerate the unit attributes) (actually, effect apply_to=loyal and apply_to=image_mod take effect immediately)
    table.insert(modifications, { "object", {
      { "effect", {
        apply_to = "loyal"
      }},
      { "effect", {
        apply_to = "new_ability",
        { "abilities", wesnoth.get_variable("submerge_ability") }
      }},
      { "effect", {
        apply_to = "image_mod",
        -- Skin is usually the brightest part of a unit's color, so we dull the skin by overloading it with color intensity and then cutting it back. The brighter parts of the resulting image should look more dull and grayish. Also reduce the red and green more to enhance the effect.
        replace = "~CS(90,90,90)~CS(-130,-115,-95)"
      }}
    }})
    table.insert(variables, { "after_regenerating_advances_to", { lua_function = "remove_lich_advancement" }})
    table.insert(variables, { "after_regenerating_race", { lua_function = "set_race_to_undead" }})
    table.insert(variables, { "after_regenerating_alignment", { lua_function = "set_alignment_to_chaotic" }})
    table.insert(variables, { "after_regenerating_resistance", { lua_function = "apply_reanimated_undead_resistance" }})
    table.insert(variables, { "after_regenerating_movement_costs", { lua_function = "apply_reanimated_undead_movement_costs" }})
    table.insert(variables, { "after_regenerating_defense", { lua_function = "apply_reanimated_undead_defense" }})

    -- Regenerate the internally-modified attributes.
    regenerate_unit_attributes(unit, {race=true, alignment=true, abilities=true, resistance=true, movement_costs=true, defense=true})
    
    if unit_has_eohs_special(unit, "is_mounted") then
      set_unit_to_reanimated_version(helper.get_child(helper.get_child(variables, "EoHS_mount_system"), "stored_mount"), new_owner)
    end
  end
end

function remove_lich_advancement(unit)
  unit.advances_to = remove_values_from_comma_separated_list(unit.advances_to, function (advancement) return advancement == "Lich" end)
end
function set_race_to_undead(unit)
  unit.race = "undead"
end
function set_alignment_to_chaotic(unit)
  unit.alignment = "chaotic"
end
function apply_reanimated_undead_movement_costs(unit)
  -- Compared with a normal human, Liches have 10% more defense and 1 less move on frozen, 1 less move in swamp, 10% more defense in mushrooms, and can walk in deep water (at 10% less defense than shallow water, but the same moves - while Walking Corpses, Skeletons, Chocobones, and Death Knights take one more move than their shallow water movecost, but Chocobones and Death Knights only take 2 moves in shallows...).
  -- Approximate this, whatever.
  local swamp_cost = get_unit_subtag_value(unit, "movement_costs", "swamp")
  if swamp_cost and swamp_cost > 2 then
    set_unit_subtag_value(unit, "movement_costs", "swamp", swamp_cost - 1)
  end

  local frozen_cost = get_unit_subtag_value(unit, "movement_costs", "frozen")
  if frozen_cost and frozen_cost > 2 then
    set_unit_subtag_value(unit, "movement_costs", "frozen", frozen_cost - 1)
  end

  -- If we can't move on shallow water at all, screw it. If we can already move in deep water, nothing new to add.
  if unit_can_move_on_terrain(unit, "shallow_water") and not unit_can_move_on_terrain(unit, "deep_water") then
    -- Affecting defense here is hacky, but shouldn't be a problem.
    set_unit_subtag_value(unit, "movement_costs", "deep_water", 1 + get_unit_subtag_value(unit, "movement_costs", "shallow_water"))
    set_unit_subtag_value(unit, "defense", "deep_water", 10 + get_unit_subtag_value(unit, "defense", "shallow_water", 0))
  end
end

function apply_reanimated_undead_defense(unit)
  local fungus_defense = get_unit_subtag_value(unit, "defense", "fungus")
  if fungus_defense and fungus_defense > 40 then
    set_unit_subtag_value(unit, "defense", "fungus", math.max(40, fungus_defense - 10))
  end

  local frozen_defense = get_unit_subtag_value(unit, "defense", "frozen")
  if frozen_defense and frozen_defense > 70 then
    set_unit_subtag_value(unit, "defense", "frozen", math.max(70, frozen_defense - 10))
  end
end


function apply_reanimated_undead_resistance(unit)
  -- In general: Go for Lich-type resistances. (Lich, Ancient Lich, Death Knight, and Chocobone have those resistances at the time of this writing, with the only difference being Lich having -40% arcane instead of -50%.)
  -- A human/elf/orc/goblin should gain exact Lich resistances.
  -- Usually don't increase extreme resistances/weaknesses, because the fantasy mechanism for them is usually unrelated and non-interacting with the reason undead have these weaknesses.

  -- All existing physical undead, except the bizarre Skeletal Dragon, have either -40% or -50% arcane resistance.
  -- Decide which based on whether the unit is weak to arcane already.
  if get_unit_subtag_value(unit, "resistance", "arcane") > 150 then
    -- But don't reduce its resistance if it's already huge for some reason.
  elseif get_unit_subtag_value(unit, "resistance", "arcane") > 100 then
    set_unit_subtag_value(unit, "resistance", "arcane", 150)
  else
    set_unit_subtag_value(unit, "resistance", "arcane", 140)
  end

  -- All skeleton(ish) undead have -20% fire resistance. Dragons have 0%, ghouls have 10%.
  if get_unit_subtag_value(unit, "resistance", "fire") > 120 then
    -- Leave the high fire weakness alone.
  else
    -- Everything else does pretty much what I want if I just reduce it by 20% (cap at -20%.) Not-quite-as-fire-resistant drakes seem to make sense.
    set_unit_subtag_value(unit, "resistance", "fire", math.min(120, 20 + get_unit_subtag_value(unit, "resistance", "fire")))
  end

  -- Liches have -10% impact resist. Skeletons (including the dragon) -20%, ghouls 0%.
  if get_unit_subtag_value(unit, "resistance", "impact") > 110 then
    -- Leave the high impact weakness alone.
  elseif get_unit_subtag_value(unit, "resistance", "impact") <= 50 then
    -- Units with huge impact resistance are usually that way because of attributes that SHOULDN'T change on an undead (exo-skeleton for Giant Scorpions, non-structuralness for mudcrawlers)
  else
    -- Everything else does pretty much what I want if I just reduce it by 10% (cap at -10%.)
    set_unit_subtag_value(unit, "resistance", "impact", math.min(110, 10 + get_unit_subtag_value(unit, "resistance", "impact")))
  end

  -- Liches (and ghouls) have 10% blade resist. Skeletons (including the dragon) 40%.
  if get_unit_subtag_value(unit, "resistance", "blade") < 60 then
    -- Leave the high blade resistance alone.
  else
    -- Everything else does pretty much what I want if I just increase it by 10% (cap at 40%.)
    set_unit_subtag_value(unit, "resistance", "blade", math.max(60, -10 + get_unit_subtag_value(unit, "resistance", "blade")))
  end

  -- Liches (and ghouls) have 30% pierce resist. Skeletons (including the dragon) 60%.
  if get_unit_subtag_value(unit, "resistance", "pierce") < 40 then
    -- Leave the high pierce resistance alone.
  else
    -- Everything else does pretty much what I want if I just increase it by 30% (cap at 60%.)
    set_unit_subtag_value(unit, "resistance", "pierce", math.max(40, -30 + get_unit_subtag_value(unit, "resistance", "pierce")))
  end

  -- All skeleton(ish) undead have 60% pierce resistance; ghouls have 40%.
  if get_unit_subtag_value(unit, "resistance", "cold") < 40 then
    -- Leave the high pierce resistance alone.
  else
    -- Everything else does pretty much what I want if I just increase it by 60% (cap at 60%.)
    set_unit_subtag_value(unit, "resistance", "cold", math.max(40, -60 + get_unit_subtag_value(unit, "resistance", "cold")))
  end
end

  >>
[/lua]

