#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("rampage.cfg")

table.insert(EoHS_spells, { "rampage", {
  image = "attacks/frenzy.png",
  name = _"Rampage",
  description = _"Until the end of your turn, empowers all adjacent units on your side with primal energy, granting +3 damage and +1 swings on on their melee attacks and making them take half damage in combat.",
  base_casting_cost = 22,
  base_range = "self",
  
  remove_when_unit_creation_forbidden = true,

  { "realm_allowance", {
    realm = "nature_magic",
    level = 9,
  }},

  restrictions = function (circumstances, cant_cast_messages)
    local adjacent_units, num_adjacent_units = get_unit_array({ { "filter_adjacent", { is_same_unit_as(circumstances.caster) }} })
    if num_adjacent_units <= 0 then
      table.insert(cant_cast_messages, _"There are no adjacent units to empower.")
    end
  end,

  effects = function (circumstances)
    wesnoth.fire("sound", { name = "drake-hit-2.ogg" })
    local adjacent_units = get_unit_array({ { "filter_adjacent", { is_same_unit_as(circumstances.caster) }} })
    for i,unit in ipairs(adjacent_units) do
      grant_explicit_enchantment(unit, "rampage")
      wesnoth.float_label(unit.x, unit.y, "<span color='#ff8000'>".._"rampage!".."</span>")
      wesnoth.put_unit(unit)
    end
  end,
  
  once_per_side_turn = function ()
    local rampagers = get_unit_array({ --[[side = wesnoth.current.side,]] has_explicit_enchantment("rampage") })
    for i,unit in ipairs(rampagers) do
      remove_explicit_enchantment(unit, "rampage")
      wesnoth.put_unit(unit)
    end
  end,
}})

table.insert(EoHS_explicit_enchantments, { "rampage", {
  { "effect", {
    apply_to = "new_ability",
    { "abilities", {
      { "dummy", {
        id = "rampage_dummy_ability",
        name = _"male^rampage",
        female_name = _"female^rampage",
        description = _"Rampage:\nThis unit has +3 damage and +1 swings on its melee attack, and takes half damage from all types. These effects end at beginning of its next turn.",
      }},
    }},
  }},
  { "weapon_modifications", {
    range = "melee",
    increase_damage = 3,
    increase_attacks = 1,
  }},
  application_effects = function (unit)
    local variables = ensure_presence_of_and_get_subtag(unit, "variables")
    table.insert(variables, { "after_regenerating_resistance", {
      id = "rampage_updater",
      lua_function = "update_rampage_resistance",
    }})
    regenerate_unit_attributes(unit, {resistance=true})
  end,
  removal_effects = function (unit)
    local variables = helper.get_child(unit, "variables")
    local i = 1
    while variables[i] do
      if variables[i][2].id == "rampage_updater" then table.remove(variables, i) else i = i + 1 end
    end
    regenerate_unit_attributes(unit, {resistance=true})
  end,
}})

function update_rampage_resistance(unit)
  local resistance = helper.get_child(unit, "resistance")
  for k,v in pairs(resistance) do
    resistance[k] = v / 2
  end
end

  >>
[/lua]


