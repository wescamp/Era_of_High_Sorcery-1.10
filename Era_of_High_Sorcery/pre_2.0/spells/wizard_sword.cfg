#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("wizard_sword.cfg")

table.insert(EoHS_spells, { "wizard_sword", {
  image = "attacks/sword-human.png",
  name = _"Wizard Sword",
  description = _"Grants a magical sword to you or an adjacent unit. The sword vanishes at the beginning of your third turn hence. The sword's base damage is four plus twice the unit's level, and it has three swings - or, if a unit has two wizard swords at once, it has a four-swing 'dual wizard sword' attack.",
  base_casting_cost = 4,
  base_range = 1,
  
  is_enchantment = true,

  { "realm_allowance", {
    realm = "evocation",
    level = 2,
  }},

  effects = function (circumstances)
    wesnoth.fire("sound", { name = "throwing-knife-miss.ogg" })
    local variables = ensure_presence_of_and_get_subtag(circumstances.target_unit, "variables")
    local remaining_turns_of_use = 4
    -- This computation is different than the one for regen because you can't use regen on the turn you cast it, while you can use wizard sword on the turn you cast it.
    if circumstances.target_unit.side == wesnoth.current.side then remaining_turns_of_use = 3 end
    table.insert(variables, { "wizard_sword", {
      turns_of_use = remaining_turns_of_use
    }})
    update_wizard_swords(circumstances.target_unit)
    wesnoth.put_unit(circumstances.target_unit)
  end,

  once_per_turn_refresh = function ()
    local swordies = get_unit_array({ side = wesnoth.current.side, has_explicit_enchantment("wizard_sword") })
    for i,unit in ipairs(swordies) do
      local variables = helper.get_child(unit, "variables")
      for sword in helper.child_range(variables, "wizard_sword") do
        sword.turns_of_use = sword.turns_of_use - 1
      end
      update_wizard_swords(unit)
      put_unit_table(unit)
    end
  end,
}})

function update_wizard_swords(unit)
  local variables = helper.get_child(unit, "variables")
  local num_swords = 0
  local max_turns = 0
  local second_most_turns = 0
  local i = 1
  while variables[i] do
    local remove = false
    if variables[i][1] == "wizard_sword" then
      if variables[i][2].turns_of_use <= 0 then
        remove = true
      else
        num_swords = num_swords + 1
        second_most_turns = math.max(second_most_turns, math.min(max_turns, variables[i][2].turns_of_use))
        max_turns = math.max(max_turns, variables[i][2].turns_of_use)
      end
    end
    if remove then table.remove(variables, i) else i = i + 1 end
  end

  if num_swords > 0 then
    grant_explicit_enchantment(unit, "wizard_sword")
    local modifications = helper.get_child(unit, "modifications")
    local swords_object = helper.get_child(modifications, "object", "eohs_wizard_sword_object")
    local sword_damage = 4 + (2 * unit.level)
    -- hack: find the strong trait. Objects always apply after traits, and we can't (without causing other issues) make the wizard sword come from a trait...
    if helper.get_child(modifications, "trait", "strong") then sword_damage = sword_damage + 1 end
    swords_object[1][2].damage = sword_damage

    local sword_end_turn = max_turns + wesnoth.current.turn
    if unit.side > wesnoth.current.side then sword_end_turn = sword_end_turn - 1 end
    swords_object[1][2][1][2][2][2].name = _"vanishes turn "..sword_end_turn

    if num_swords < 2 then
      swords_object[2][2] = {}
    else
      local dualsword_end_turn = second_most_turns + wesnoth.current.turn
      if unit.side > wesnoth.current.side then dualsword_end_turn = dualsword_end_turn - 1 end
      swords_object[2][2] = {
        apply_to = "new_attack",
        description = _"dual wizard swords",
        icon = "attacks/sword-human.png",
        name = "eohs_wizard_sword",
        range = "melee",
        type = "blade",
        damage = sword_damage,
        number = 4,
        { "specials", {
          wesnoth.get_variable("magical_special")[1],
          { "dummy", {
            id = "wizard_sword_disappears_dummy",
            name = _"vanishes turn "..dualsword_end_turn,
          }},
        }},
      }
    end
    
    regenerate_unit_attributes(unit, { attack=true })
    regenerate_unit_graphics(unit)
  else
    remove_explicit_enchantment(unit, "wizard_sword")
  end
end

table.insert(EoHS_explicit_enchantments, { "wizard_sword", {
  application_effects = function (unit)
    local modifications = ensure_presence_of_and_get_subtag(unit, "modifications")
    table.insert(modifications, first_index_after_type_mods_objects(unit), { "object", {
      id = "eohs_wizard_sword_object",
      { "effect", {
        apply_to = "new_attack",
        description = _"wizard sword",
        icon = "attacks/sword-human.png",
        name = "eohs_wizard_sword",
        range = "melee",
        type = "blade",
        damage = 4,
        number = 3,
        { "specials", {
          wesnoth.get_variable("magical_special")[1],
          { "dummy", {
            id = "wizard_sword_disappears_dummy",
          }},
        }},
      }},
      { "effect", {
      }},
    }})

    local variables = ensure_presence_of_and_get_subtag(unit, "variables")
    table.insert(variables, { "after_regenerating_level", {
      id = "wizard_sword_updater",
      lua_function = "update_wizard_swords",
    }})
  end,

  removal_effects = function (unit)
    local modifications = helper.get_child(unit, "modifications")
    local i = 1
    while modifications[i] do
      if modifications[i][2].id == "eohs_wizard_sword_object" then table.remove(modifications, i) else i = i + 1 end
    end
    
    local variables = helper.get_child(unit, "variables")
    local i = 1
    while variables[i] do
      if variables[i][1] == "wizard_sword" or variables[i][2].id == "wizard_sword_updater" then table.remove(variables, i) else i = i + 1 end
    end

    regenerate_unit_attributes(unit, { attack=true })
  end,
}})

  >>
[/lua]


