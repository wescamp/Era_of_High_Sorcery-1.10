#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("fissure.cfg")

function fissure_collapsing_frame(crop_contents)
  return "terrain/grid.png~O(5)~CS(-255,-255,-255)~CROP("..crop_contents..")~SCALE(72,72):50"
end
fissure_collapsing_halo = fissure_collapsing_frame("0,0,70,71")..","..fissure_collapsing_frame("2,0,70,71")..","..fissure_collapsing_frame("0,1,70,71")..","..fissure_collapsing_frame("2,1,70,71")

function place_fissure_collapsing_hex(x, y, side, turn, caster_id)
  local fissure_collapsing_hexes_array = helper.get_variable_array("EoHS_scenario_vars.fissure_collapsing_hexes_array")
  table.insert(fissure_collapsing_hexes_array, { x = x, y = y, side = side, turn = turn, caster_id = caster_id })
  helper.set_variable_array("EoHS_scenario_vars.fissure_collapsing_hexes_array", fissure_collapsing_hexes_array)
  wesnoth.fire(          "item", { x = x, y = y, halo = fissure_collapsing_halo })
end


table.insert(EoHS_spells, { "fissure", {
  image = "attacks/fangs.png",
  name = _"Fissure",
  description = _"After a delay of 1 turn, irrevocably creates chasm hex up to $spell_base_range| hexes away. Any non-flying unit remaining in the hex will fall down the chasm and die.",
  base_casting_cost = 12,
  base_range = 2,
  warn_about_self_casting = true,

  { "realm_allowance", {
    realm = "nature_magic",
    level = 8,
  }},

  restrictions = function (circumstances, cant_cast_messages)
    local target_terrain = wesnoth.get_terrain(circumstances.target_x, circumstances.target_y)
    if target_terrain == "Qxu" or target_terrain == "Qxu^li" then
      table.insert(cant_cast_messages, _"That tile is already a chasm.")
    end
    local fissure_collapsing_hexes_array = helper.get_variable_array("EoHS_scenario_vars.fissure_collapsing_hexes_array")
    for i,loc in ipairs(fissure_collapsing_hexes_array) do
      if loc.x == circumstances.target_x and loc.y == circumstances.target_y then table.insert(cant_cast_messages, _"That tile is already on its way to destruction.") end
    end
  end,

  effects = function (circumstances)
    wesnoth.fire("sound", { name = "rumble.ogg" })
    place_fissure_collapsing_hex(circumstances.target_x, circumstances.target_y, wesnoth.current.side, wesnoth.current.turn + 1, circumstances.caster.underlying_id)
  end,
  
  once_per_side_turn = function ()
    local fissure_collapsing_hexes_array = helper.get_variable_array("EoHS_scenario_vars.fissure_collapsing_hexes_array")
    local i = 1
    while fissure_collapsing_hexes_array[i] do
      local loc = fissure_collapsing_hexes_array[i]
      -- Don't just cause the fissuring on the exact turn it should be; cause it on any turn then or after (to make sure none of the hexes falls through and remains "going-to-fissure" forever - e.g. if a turn is skipped somehow, which can happen various ways)
      if turn_and_side_has_passed(loc.turn, loc.side) then
        wesnoth.fire("scroll_to", { x = loc.x, y = loc.y, check_fogged = "no" })
        wesnoth.fire("sound", { name = "rumble.ogg" })
        wesnoth.fire("sound", { name = "cave-in.ogg" })
        local terrain = wesnoth.get_terrain(loc.x, loc.y)
        if string.match(terrain, "^li") or string.match(terrain, "^Ufi") then
          modify_terrain_from_xy(loc.x, loc.y, function(info) info.terrain = "Qxu^li" end)
        else
          modify_terrain_from_xy(loc.x, loc.y, function(info) info.terrain = "Qxu" end)
        end
        wesnoth.fire("redraw")
        potential_death_by_terrain(loc.x, loc.y, get_unit_table({ { "filter_wml", { underlying_id = loc.caster_id }}}))
        wesnoth.fire("remove_item", { x = loc.x, y = loc.y, image = fissure_collapsing_halo })
        table.remove(fissure_collapsing_hexes_array, i)
      else
        i = i + 1
      end
    end
    helper.set_variable_array("EoHS_scenario_vars.fissure_collapsing_hexes_array", fissure_collapsing_hexes_array) 
  end,
}})

  >>
[/lua]

