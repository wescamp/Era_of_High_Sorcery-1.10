#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("dehydration.cfg")

table.insert(EoHS_spells, { "dehydration", {
  image = "attacks/curse.png",
  name = _"Dehydration",
  description = _"Curses an adjacent unit. It immediately loses its zone of control, and it is slowed at the end of each turn. It can only be cured by being in a water hex at the end of the turn. (That includes fords, swamp, sunken ruins, and oases).",
  base_casting_cost = 18,
  base_range = 1,

  is_enchantment = true,
  warn_about_self_casting = true,

  { "realm_allowance", {
    realm = "nature_magic",
    level = 6,
  }},
  
  restrictions = function (circumstances, cant_cast_messages)
    if circumstances.target_unit and unit_has_explicit_enchantment(circumstances.target_unit, "dehydration") then
      table.insert(cant_cast_messages, _"You can't cast Dehydration on a unit already afflicted with it.")
    end
  end,

  effects = function (circumstances)
    wesnoth.float_label(circumstances.target_unit.x, circumstances.target_unit.y, "<span color='#882200'>".._"dehydrated".."</span>")
    wesnoth.fire("sound", { name = "hiss-die.wav" })
    grant_explicit_enchantment(circumstances.target_unit, "dehydration")
    wesnoth.put_unit(circumstances.target_unit)
  end,

  once_per_side_turn = function ()
    local cursed = get_unit_array({ has_explicit_enchantment("dehydration") })
    for i,unit in ipairs(cursed) do
      local t = wesnoth.get_terrain(unit.x, unit.y)
      if string.match(t, "^[WS]") or string.match(t, "^Ch[ws]") or string.match(t, "%^Do") then
        remove_explicit_enchantment(unit, "dehydration")
        wesnoth.fire("scroll_to", { x = unit.x, y = unit.y, check_fogged = true })
        wesnoth.float_label(unit.x, unit.y, "<span color='#00ff00'>".._"hydrated".."</span>")
        wesnoth.fire("sound", { name = "heal.wav" })
      else
        set_unit_subtag_value(unit, "status", "slowed", true)
        if not get_unit_variable(unit, "dehydration_movement_cost_adjusted") then
          set_unit_variable(unit, "dehydration_movement_cost_adjusted", true)
          local variables = ensure_presence_of_and_get_subtag(unit, "variables")
          table.insert(variables, { "before_regenerating_movement_costs", { lua_function = "dehydration_reset_water_movement" }})
          regenerate_unit_attributes(unit, { movement_costs=true })
        end
      end
      wesnoth.put_unit(unit)
    end
  end,
}})

function dehydration_reset_water_movement(unit)
  local modifications = helper.get_child(unit, "modifications")
  local curse_object = helper.get_child(modifications, "object", "EoHS_explicit_enchantment_object_for_dehydration")
  local movement_costs = helper.get_child(unit, "movement_costs")
  local max_accessible_move_cost = math.floor(unit.max_moves * 0.500001)
  if movement_costs.shallow_water > max_accessible_move_cost then
    curse_object[3][2][1][2].shallow_water = max_accessible_move_cost
  end
  if movement_costs.swamp_water > max_accessible_move_cost then
    curse_object[3][2][1][2].swamp_water = max_accessible_move_cost
  end
end

table.insert(EoHS_explicit_enchantments, { "dehydration", {
  { "effect", {
    apply_to = "new_ability",
    { "abilities", {
      { "dummy", {
        id = "dehydration_dummy_ability",
        name = _"male^dehydrated",
        female_name = _"female^dehydrated",
        description = _"Dehydrated:\nThis unit is slowed at the end of each turn, and it has no zone of control. It can only be cured by being in a water hex at the end of the turn. (That includes fords, swamp, sunken ruins, and oases)",
      }},
    }},
  }},
  { "effect", {
    apply_to = "zoc",
    value = false,
  }},
  { "effect", {
    apply_to = "movement_costs",
    replace = true,
    { "movement_costs", {
      
    }}
  }},
  { "effect", {
    apply_to = "image_mod",
    add = "~CS(0, -80, -255)",
  }},
  
  removal_effects = function (unit)
    set_unit_variable(unit, "dehydration_movement_cost_adjusted")
    local variables = ensure_presence_of_and_get_subtag(unit, "variables")
    local i = 1
    while variables[i] do
      if variables[i][1] == "before_regenerating_movement_costs" and variables[i][2].lua_function == "cheapen_water_movement" then
        table.remove(variables, i)
      else
        i = i + 1
      end
    end
  end,
}})

  >>
[/lua]


