this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- persistence.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

--[[

Notes about the persistent variables system:
[get_global_variable] always attempts to sync, and therefore will emit error messages if I use it locally.
Also, wesnoth does not implement a way to use [get_global_variable] to retrieve a variable on a different
  player's turn, and will cause weird behavior if you try.
  Therefore, [get_global_variable] can only be used to check $player's variables on $player's turn.
[set_global_variable] never attempts to sync and can be used locally and/or off-turn.
  However, without a corresponding [get_global_variable], it can only overwrite values,
  not update them.

Imagine that there's an action that scores one point.

Case 1: Alice scores on Alice's turn.
    Alice retrieves global!score:
      -> Bob receives global!score, ignores it
      -> Alice receives global!score, puts to local!score
    Alice adds 1 to local!score
    Alice stores local!score to global!score

Case 2: Alice scores on Bob's turn.
    Alice adds "score a point" to local!transaction
    Alice stores local!transaction to global!transaction (***)
    (perhaps this happens multiple times before Alice's turn)
  Alice's turn begins (either in this game or another one)
    Alice retrieves global!transaction
      -> Bob receives global!transaction, ignores it
      -> Alice receives global!transaction, puts to local!transaction
    For each "score a point" in local!transaction:
      Alice retrieves global!score:
        -> Bob receives global!score, ignores it
        -> Alice receives global!score, puts to local!score
      Alice adds 1 to local!score
      Alice stores local!score to global!score
    Alice clears local!transaction and global!transaction
    
(***) is theoretically destructive. However, it loses data only if Alice loses local!transaction
  (by the game ending) and then records ANOTHER transaction before zir turn.
  This can happen in two ways:
  Problem 1: Alice scores before zir turn 1.
  Problem 2: Alice is given control of a networked side during another side's turn.
  
  To deal with these, every player records the current local controller= at the end of each of zir turns.
  Transactions are only created for sides that are human now AND were human last turn.
  So you can't earn points before getting a turn. So sad :,(

]]

local get_persistent_variable__stored = function(side, name) return EoHS.get_side_variable(side, "persistent_variables."..name) end
local set_persistent_variable__stored = function(side, name, value) EoHS.set_side_variable(side, "persistent_variables."..name, value) end

local set_persistent_variable__impl = function(side, name, value)
  if value == nil then
    wesnoth.fire("clear_global_variable", { namespace="EoHS_Era_of_High_Sorcery",      global=name, side=side, immediate=true })
  else
    wesnoth.set_variable("EoHS.LUA_TEMP", value)
    wesnoth.fire(  "set_global_variable", { namespace="EoHS_Era_of_High_Sorcery",   to_global=name, side=side, immediate=true, from_local="EoHS.LUA_TEMP" })
    wesnoth.set_variable("EoHS.LUA_TEMP")
  end
end

local get_persistent_variable__network = function(name)
  if EoHS.context.synchronized then
    wesnoth.fire(  "get_global_variable", { namespace="EoHS_Era_of_High_Sorcery", from_global=name, side=wesnoth.current.side,   to_local="EoHS.LUA_TEMP" })
    local result = wesnoth.get_variable("EoHS.LUA_TEMP")
    wesnoth.set_variable("EoHS.LUA_TEMP")
    return result
  else EoHS.err("get_persistent_variable__network used in an unsynchronized context") end
end

local fetch_persistent_variable_of_current_side = function(name)
  local value = get_persistent_variable__network(name)
  set_persistent_variable__stored(wesnoth.current.side, name, value)
  return value
end

-- If you use this in a nonsynchronized way, you need to use fetch_persistent_variable_of_current_side afterwards, for both the list and the variable
local set_proper_persistent_variable_of_current_side = function(name, value)
  if name ~= "attribute_list" then
    local old = get_persistent_variable__stored(wesnoth.current.side, name)
    local new_list = string.gsub(get_persistent_variable__stored(wesnoth.current.side, "attribute_list"), ","..EoHS.lua_pattern_escape(name), "")
    if value ~= nil then
      new_list = new_list..","..name
    end
    set_persistent_variable__stored(wesnoth.current.side, "attribute_list", new_list)
    set_persistent_variable__impl(wesnoth.current.side, "attribute_list", new_list)
  end
  
  set_persistent_variable__stored(wesnoth.current.side, name, value)
  set_persistent_variable__impl(wesnoth.current.side, name, value)
end

-- We check both nick and ID so that:
-- You don't score twice for defeating, e.g., Elvish_Pillager and Elvish_Pillager2
--   if Elvish_Pillager sometimes uses the latter nick after getting disconnected,
-- And you don't score twice for defeating Elvish_Pillager twice if Elvish_Pillager
--   plays on two different devices.
-- You can score twice if both of those happen, but there's not much I can do about that.
local add_to_current_side_nick_and_id_list = function(nick, id, nick_list_name, id_list_name)
  nick = string.gsub(nick, ",", "")
  local nick_list = get_persistent_variable__stored(wesnoth.current.side, nick_list_name) or ","
  local   id_list = get_persistent_variable__stored(wesnoth.current.side,   id_list_name) or ","
  if (not string.match(nick_list, ","..EoHS.lua_pattern_escape(nick)..",")) and (not string.match(id_list, id)) then
    nick_list = nick_list..nick..","
      id_list =   id_list..  id..","
    set_proper_persistent_variable_of_current_side(nick_list_name, nick_list)
    set_proper_persistent_variable_of_current_side(  id_list_name,   id_list)
    return true
  end
  return false
end

local update_supporter_status_of_current_side
local apply_persistent_transaction_of_current_side = function(transaction)
  local transaction_type, transaction_args = string.match(transaction, "(.-)%((.*)%)")
  if transaction_type == "add_supporter_password" then
    local password_list = get_persistent_variable__stored(wesnoth.current.side, "supporter_passwords") or ""
    password_list = password_list..transaction_args..","
    set_proper_persistent_variable_of_current_side("supporter_passwords", password_list)
    update_supporter_status_of_current_side(wesnoth.current.side)
  end
  if transaction_type ==   "defeated_player" then
    local nick, id = string.match(transaction_args, "(.-),(.+)")
    add_to_current_side_nick_and_id_list(nick, id,   "defeated_nicks",   "defeated_identities")
  end
  if transaction_type == "introduced_player" then
    local nick, id = string.match(transaction_args, "(.-),(.+)")
    add_to_current_side_nick_and_id_list(nick, id, "introduced_nicks", "introduced_identities")
  end
  if transaction_type == "killed_wizard_with_staff" then
    set_proper_persistent_variable_of_current_side("killed_wizard_with_staff", true)
  end
end

local record_persistent_transaction = function(side, transaction)
  if side == wesnoth.current.side then
    apply_persistent_transaction_of_current_side(transaction)
  else
    EoHS.do_only_on_client_controlling_human_side(side, function()
      if EoHS.get_side_variable(side, "client_local_controller_last_turn") == "human" then
        local transactions = EoHS.get_variable("client_local_persistent_transactions") or ""
        transactions = transactions.."BEGIN_TRANSACTION"..transaction.."END_TRANSACTION"
        EoHS.set_variable("client_local_persistent_transactions", transactions)
        set_persistent_variable__impl(side, "transactions", transactions)
      end
    end)
  end
end

-- Note: I'm well aware of how insecure this is against a user who knows programming.
-- You could even make an add-on that automatically gives people supporter status.
--   By the way, please don't do that.
-- If I had wanted more security, I could have implemented public-key cryptography in
--   pure Lua, so that I was the only one who could issue codes that work for each nick -
--   but no matter what I do, people can be fake supporters when they *host* a game
--   just by changing the add-on code. Given that gap, I didn't feel that securing the
--   other side (cheating player with a legitimate host) was worth the effort.
EoHS.password_for_nick = function(nick)
  return string.sub(string.gsub(EoHS.sha1(nick), "[^%d]", ""), 1, 10)
end
update_supporter_status_of_current_side = function()
  local found_supporter = false
  local units = EoHS.get_units({ side=wesnoth.current.side, EoHS.is_on_the_map, EoHS.has_unit_variable("is_wizard") })
  for i,unit in ipairs(units) do
    local modifications = EoHS.force_subtag(unit, "modifications")
    local trait,idx = helper.get_child(modifications, "trait", "EoHS_supporter")
    if (type(unit.name) == "string") and string.match(get_persistent_variable__stored(wesnoth.current.side, "supporter_passwords") or "", EoHS.password_for_nick(unit.name)) then
      found_supporter = true
      if not trait then
        table.insert(modifications, 1, {"trait",{
          id = "EoHS_supporter",
          name = _"magnanimous",
          description = EoHS.substitute(_"$1| has generously donated to help Eli keep developing Era of High Sorcery. Visit www.elidupree.com/EoHS to donate.", {unit.name}),
        }})
        EoHS.put_unit(unit)
      end
    else
      if trait then
        table.remove(modifications, idx)
        EoHS.put_unit(unit)
      end
    end
  end
  EoHS.set_side_variable(wesnoth.current.side, "is_supporter", found_supporter)
end
EoHS.is_valid_supporter_password = function(side, password)
  local nick_to_match = EoHS.get_side_variable(side, "original_nick")
  if (type(nick_to_match) == "string") and (EoHS.password_for_nick(nick_to_match) == password) then
    return true
  end
  return false
end
EoHS.add_supporter_password = function(side, password)
  record_persistent_transaction(side, "add_supporter_password("..password..")")
end

-- Basically idempotent; should be called every so often, but mainly at the beginning
-- and end of each game. Games don't usually take more than 24 hours.
local current_player_is_playing_right_now = function()
  local time = os.time()
  local hours = 60*60
  local days = 24*hours
  EoHS.do_only_on_client_controlling_side(wesnoth.current.side, function()
    local reference_time_played = get_persistent_variable__stored(wesnoth.current.side, "reference_time_played")
    if reference_time_played then
      -- Without this hack, Wesnoth will apply floating-point rounding to it
      reference_time_played = tonumber(string.match(reference_time_played, "large_number_storing_hack_(.+)"))
      local time_since_reference_point = os.difftime(time, reference_time_played)
      local num_days_played_continuously = get_persistent_variable__stored(wesnoth.current.side, "num_days_played_continuously") or 0
      local time_since_last_day_end = time_since_reference_point - num_days_played_continuously*days
      if time_since_last_day_end > 8*hours then
        set_proper_persistent_variable_of_current_side(
          "total_days_played", get_persistent_variable__stored(wesnoth.current.side, "total_days_played") + 1)
        if time_since_last_day_end > 1*days then
          set_proper_persistent_variable_of_current_side(
            "reference_time_played", "large_number_storing_hack_"..time)
          set_proper_persistent_variable_of_current_side(
            "num_days_played_continuously", 0)
        else
          set_proper_persistent_variable_of_current_side(
            "num_days_played_continuously", num_days_played_continuously + 1)
        end
      end
    else
      set_proper_persistent_variable_of_current_side(
        "reference_time_played", "large_number_storing_hack_"..time)
      set_proper_persistent_variable_of_current_side(
        "total_days_played", 1)
    end
  end)
  fetch_persistent_variable_of_current_side("attribute_list")
  fetch_persistent_variable_of_current_side("total_days_played")
  fetch_persistent_variable_of_current_side("reference_time_played")
  fetch_persistent_variable_of_current_side("num_days_played_continuously")
end

EoHS.update_and_share_persistent_variables_of_current_side = function(original)
  local controller_changed = EoHS.synchronize_choice(function() return {c=
    EoHS.get_side_variable(wesnoth.current.side, "client_local_controller_last_turn") ~= wesnoth.sides[wesnoth.current.side].controller} end).c
  EoHS.set_side_variable(wesnoth.current.side, "client_local_controller_last_turn", wesnoth.sides[wesnoth.current.side].controller)
  
  if controller_changed then
    local old_identity = get_persistent_variable__stored(wesnoth.current.side, "identity")
    EoHS.set_side_variable(wesnoth.current.side, "persistent_variables", {})
    local attribute_list = fetch_persistent_variable_of_current_side("attribute_list")
    for key in EoHS.comma_separated_values(attribute_list) do fetch_persistent_variable_of_current_side(key) end
    
    local identity = get_persistent_variable__stored(wesnoth.current.side, "identity")
    if not (identity and (string.len(identity) == string.len("0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33"))) then
      local uniqueness_source = EoHS.random("0..32767")..EoHS.random("0..32767")..EoHS.random("0..32767")..EoHS.random("0..32767")
      local nick = EoHS.get_side_variable(wesnoth.current.side, "original_nick")
      if type(nick) == "string" then uniqueness_source = uniqueness_source..nick end
      identity = EoHS.sha1(uniqueness_source)
      set_proper_persistent_variable_of_current_side("identity", identity)
    end
    if not EoHS.get_side_variable(wesnoth.current.side, "original_identity") then
      EoHS.set_side_variable(wesnoth.current.side, "original_identity", identity)
      EoHS.set_side_variable(wesnoth.current.side, "is_newbie", not get_persistent_variable__stored(wesnoth.current.side, "introduced_nicks"))
    end
    
    local transactions = get_persistent_variable__network("transactions")
    for transaction in string.gmatch(transactions, "BEGIN_TRANSACTION(.-)END_TRANSACTION") do
      apply_persistent_transaction_of_current_side(transaction)
    end
    set_persistent_variable__impl(wesnoth.current.side, "transactions", nil)
    current_player_is_playing_right_now()
    
    if identity ~= old_identity then update_supporter_status_of_current_side() end
  end
end


EoHS.get_potentially_out_of_date_persistent_variable = function(side, name)
  if (side == wesnoth.current.side) and EoHS.context.synchronized then
    return fetch_persistent_variable_of_current_side(name)
  else
    return get_persistent_variable__stored(side, name)
  end
end

-- This is called at endgame or when they lose their last leader
EoHS.score_for_side_completing_game = function(side)
  -- Deliberately including the same side. You score one for yourself.
  -- Thus, a newbie is exactly "a person who hasn't scored for introducing any newbies".
  local id1 = get_persistent_variable__stored(side, "identity")
  local vars1 = EoHS.get_side_variables(side)
  if (not vars1.was_ever_ai) and (id1 == vars1.original_identity) then
    EoHS.set_side_variable(side, "side_properly_defeated", true)
    if EoHS.get_side_variable(side, "is_newbie") then
      for side2 in ipairs(wesnoth.sides) do
        local id2 = get_persistent_variable__stored(side2, "identity")
        local vars2 = EoHS.get_side_variables(side2)
        if (not vars2.was_ever_ai) and (id2 == vars2.original_identity) then
          if type(vars1.original_nick) == "string" then
            record_persistent_transaction(side2, "introduced_player("..string.gsub(vars1.original_nick,",","")..","..id1..")")
          end
        end
      end
    end
  end
end
EoHS.score_for_game_ending = function()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  local sides_alive = {}
  for i,unit in ipairs(units) do if unit.canrecruit then sides_alive[unit.side] = true end end
  for side1 in ipairs(wesnoth.sides) do
    local id1 = get_persistent_variable__stored(side1, "identity")
    local vars1 = EoHS.get_side_variables(side1)
    if (not vars1.was_ever_ai) and (id1 == vars1.original_identity) then
      for side2 in ipairs(wesnoth.sides) do
        local vars2 = EoHS.get_side_variables(side2)
        local id2 = vars2.original_identity
        if (id1 ~= id2) and wesnoth.is_enemy(side1, side2) and sides_alive[side1] and (not sides_alive[side2]) and vars2.side_properly_defeated then
          if type(vars2.original_nick) == "string" then
            record_persistent_transaction(side1,   "defeated_player("..string.gsub(vars2.original_nick,",","")..","..id2..")")
          end
        end
      end
    end
  end
end
EoHS.score_for_staffing_wizard = function(side1, side2)
  local id1 = get_persistent_variable__stored(side1, "identity")
  local vars1 = EoHS.get_side_variables(side1)
  if (id1 == vars1.original_identity) then
    local vars2 = EoHS.get_side_variables(side2)
    local id2 = vars2.original_identity
    if (id1 ~= id2) and (not vars2.was_ever_ai) and (id2 == vars2.original_identity) then
      record_persistent_transaction(side1, "killed_wizard_with_staff()")
    end
  end
end

local count_nick_list = function(nick_list)
  if not nick_list then return 0 end
  local result = 0
  for victory in EoHS.comma_separated_values(nick_list) do result = result + 1 end
  return result
end

EoHS.num_players_defeated = function(side)
  return count_nick_list(EoHS.get_potentially_out_of_date_persistent_variable(side,   "defeated_nicks"))
end
EoHS.num_newbies_introduced = function(side)
  return count_nick_list(EoHS.get_potentially_out_of_date_persistent_variable(side, "introduced_nicks"))
end

-->>)}
