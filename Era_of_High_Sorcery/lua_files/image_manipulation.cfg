this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- image_manipulation.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

--[[

A "image_base" is an image string without mods.
A "image_modded" is an image string, possibly with mods.
A "image_layer" is an image_modded or {
  image_modded = image_modded
  offset = {x=,y=}
  character_center_offset = {x=,y=} (cumulative with offsx)
  weapon_head_offset = {x=,y=} (cumulative with offsx)
}
A "image_aggregate" is an image_layer or a list of image_layers, bottom to top.

]]

local is_layer_list = function(image_aggregate)
  return (type(image_aggregate) == "table") and not image_aggregate.image_modded
end
local is_empty_list = function(image_aggregate)
  return is_layer_list(image_aggregate) and not image_aggregate[1]
end
local layers = function(image_aggregate)
  if is_layer_list(image_aggregate) then return ipairs(image_aggregate) end
  local done = false
  return function()
    if done then return nil end
    done = true
    return 1,image_aggregate
  end
end

-- TODO add more checks to these two
EoHS.is_valid_image_base = function(image_base)
  return (type(image_base) == "string") and (not string.find(image_base, "~")) and (wesnoth.get_image_size(image_base) ~= nil)
end
EoHS.is_valid_image_modded = function(image_modded)
  return (type(image_modded) == "string")
end

EoHS.is_valid_offset = function(offset)
  if type(offset) ~= "table" then return false end
  for k,v in pairs(offset) do
    if ((k ~= "x") and (k ~= "y")) or (type(v) ~= "number") then return false end
  end
  return true
end
EoHS.is_valid_image_layer = function(image_layer)
  if EoHS.is_valid_image_modded(image_layer) then return true end
  if not EoHS.is_valid_image_modded(image_layer.image_modded) then return false end
  if not EoHS.is_valid_offset(image_layer.offset) then return false end
  for k in pairs(image_layer) do
    if ((k ~= "image_modded") and (k ~= "offset")) then return false end
  end
  return true
end
EoHS.is_valid_image_aggregate = function(image_aggregate)
  if EoHS.is_valid_image_layer(image_aggregate) then return true end
  for k,v in pairs(image_aggregate) do
    if (type(k) ~= "number") or (k < 1) or (k > #image_aggregate) or (not EoHS.is_valid_image_layer(v)) then return false end
  end
  return true
end

EoHS.offset_negated = function(offset)
  return { x = offset.x and -offset.x, y = offset.y and -offset.y }
end
EoHS.offset_translated = function(offset, offset_offset)
  return { x = offset.x and offset.x + (offset_offset.x or 0), y = offset.y and offset.y + (offset_offset.y or 0) }
end
EoHS.offset_relative_to_base_image = function(offset, image_layer)
  local result = EoHS.deep_copy(offset)
  local width, height = wesnoth.get_image_size(EoHS.get_image_base(image_layer))
  EoHS.assert(width, "EoHS.offset_relative_to_base_image bad input: "..EoHS.inspect(image_layer))
  for mod in string.gmatch(EoHS.get_image_modded(image_layer), "~%a*%b()") do
    local crop_x, crop_y, crop_width, crop_height = string.match(mod, "^~CROP%((%d*),(%d*),(%d*),(%d*)%)")
    if crop_x then
      result = EoHS.offset_translated(result, { x=-tonumber(crop_x), y=-tonumber(crop_y) })
      width = tonumber(crop_width)
      height = tonumber(crop_height)
    end
    local scale_width, scale_height = string.match(mod, "^~SCALE%((%d*),(%d*)%)")
    if scale_width then
      scale_width, scale_height = tonumber(scale_width), tonumber(scale_height)
      result.x = result.x and (result.x * scale_width  / width)
      result.y = result.y and (result.y * scale_height / height)
      width = scale_width
      height = scale_height
    end
  end
  result = EoHS.offset_translated(result, { x=-math.floor(width/2), y=-math.floor(height/2) })
  result.x = result.x and math.floor(result.x)
  result.y = result.y and math.floor(result.y)
  result = EoHS.offset_translated(result, EoHS.image_layer_offset(image_layer))
  return result
end

EoHS.image_rect = function(partial_image_rect)
  local result = EoHS.deep_copy(partial_image_rect)
  if not result.min then result.min = {} end
  if not result.max then result.max = {} end
  if not result.size then result.size = {} end
  if not result.offset then result.offset = {} end
    
  --convenience names
  if result.x1 then result.min.x = result.x1 end
  if result.x2 then result.max.x = result.x2 end
  if result.y1 then result.min.y = result.y1 end
  if result.y2 then result.max.y = result.y2 end
  if result.x then
    result.min.x = result.x
    result.max.x = result.x
  end
  if result.y then
    result.min.y = result.y
    result.max.y = result.y
  end
    
  --[[local image_width, image_height
  if result.relative_to_base_image then image_width, image_height = wesnoth.get_image_size(result.relative_to_base_image) end
  if result.relative_to_base_image and result.min.x then result.min.x = result.min.x - math.floor(image_width /2) end
  if result.relative_to_base_image and result.max.x then result.max.x = result.max.x - math.floor(image_width /2) end
  if result.relative_to_base_image and result.min.y then result.min.y = result.min.y - math.floor(image_height/2) end
  if result.relative_to_base_image and result.max.y then result.max.y = result.max.y - math.floor(image_height/2) end]]
  if result.relative_to_base_image then
    result.min = EoHS.offset_relative_to_base_image(result.min, result.relative_to_base_image)
    result.max = EoHS.offset_relative_to_base_image(result.max, result.relative_to_base_image)
  end
  for i,dim in ipairs{"x","y"} do
    if (result.min[dim] and 1 or 0) + (result.max[dim] and 1 or 0) + (result.size[dim] and 1 or 0) + (result.offset[dim] and 1 or 0) > 2 then EoHS.err("EoHS.image_rect overdefined") end
    if result.offset[dim] then
      if result.min[dim] then
        EoHS.err("EoHS.image_rect whyyyyy1")
      elseif result.max[dim] then
        EoHS.err("EoHS.image_rect whyyyyy2")
      elseif result.size[dim] then
        result.min[dim] = result.offset[dim] - math.floor(result.size[dim]/2)
        result.max[dim] = result.offset[dim] + math.ceil (result.size[dim]/2) - 1
      else
        EoHS.err("EoHS.image_rect whyyyyy3")
      end
    else
      if result.min[dim] then
        if result.max[dim] then
          result.size[dim] = 1 + result.max[dim]-result.min[dim]
        elseif result.size[dim] then
          result.max[dim] = result.min[dim]+result.size[dim] - 1
        else
          result.max[dim] = math.huge
          result.size[dim] = math.huge
        end
      elseif result.max[dim] then
        if result.size[dim] then
          result.min[dim] = 1 + result.max[dim]-result.size[dim]
        else
          result.min[dim] = -math.huge
          result.size[dim] = math.huge
        end
      elseif result.size[dim] and (result.size[dim] ~= math.huge) then
        EoHS.err("EoHS.image_rect Can't generate from size with neither max or min!")
      else
        result.min[dim] = -math.huge
        result.max[dim] = math.huge
        result.size[dim] = math.huge
      end
      
      result.offset[dim] = result.min[dim] + math.floor(result.size[dim]/2)
    end
    if result.max[dim]<result.min[dim] then return EoHS.image_rect_nowhere() end
  end
  
  return result
end

EoHS.image_rect_nowhere = function() return nil end
EoHS.image_rect_is_anywhere = function(image_rect) return image_rect~=nil end
EoHS.image_rect_balanced = function(image_rect)
  local result = EoHS.deep_copy(image_rect)
  for i,dim in ipairs{"x","y"} do
    local d = math.max(result.max[dim]+1, -result.min[dim])
    result.min[dim] = -d
    result.max[dim] = d-1
    result.size[dim] = d*2
    result.offset[dim] = 0
  end
  return result
end
EoHS.image_rect_intersection = function(image_rect1, image_rect2)
  if not (EoHS.image_rect_is_anywhere(image_rect1) and EoHS.image_rect_is_anywhere(image_rect2)) then return EoHS.image_rect_nowhere() end
    
  local result = { max={}, min={} }
  for i,dim in ipairs{"x","y"} do
    result.min[dim] = math.max(image_rect1.min[dim], image_rect2.min[dim])
    result.max[dim] = math.min(image_rect1.max[dim], image_rect2.max[dim])
  end
  return EoHS.image_rect(result)
end
EoHS.image_rect_superunion = function(image_rect1, image_rect2)
  if not EoHS.image_rect_is_anywhere(image_rect1) then return EoHS.deep_copy(image_rect2) end
  if not EoHS.image_rect_is_anywhere(image_rect2) then return EoHS.deep_copy(image_rect1) end
    
  local result = { max={}, min={} }
  for i,dim in ipairs{"x","y"} do
    result.min[dim] = math.min(image_rect1.min[dim], image_rect2.min[dim])
    result.max[dim] = math.max(image_rect1.max[dim], image_rect2.max[dim])
  end
  return EoHS.image_rect(result)
end
EoHS.image_rects_are_equal = function(image_rect1, image_rect2)
  for i,dim in ipairs{"x","y"} do
    if not (image_rect1.min[dim] == image_rect2.min[dim]) then return false end
    if not (image_rect1.max[dim] == image_rect2.max[dim]) then return false end
  end
  return true
end

EoHS.get_image_base = function(image_layer)
  -- EoHS.err("bar.."..EoHS.inspect(image_layer))
  if type(image_layer) == "string" then
    -- Hack to appease the macro TEAM_COLOR_OVERRIDE, which currently (1.10.6) uses "RC()" when it should use "~RC()"
    if string.match(image_layer, "pngRC") then return string.match(image_layer, "^(.-)RC") end
    return string.match(image_layer, "[^~]*")
  end
  return EoHS.get_image_base(image_layer.image_modded)
end

EoHS.get_image_modded = function(image_layer)
  if type(image_layer) == "string" then return image_layer end
  return image_layer.image_modded
end
EoHS.with_image_modded = function(image_layer, image_modded)
  if type(image_layer) == "string" then return image_modded end
  local result = EoHS.deep_copy(image_layer)
  result.image_modded = image_modded
  return result
end

EoHS.image_layer_offset = function(image_layer)
  if type(image_layer) == "string" then return {x=0,y=0} end
  return image_layer.offset
end

EoHS.full_image_layer_reference = function(image_layer)
  if type(image_layer) == "string" then return { image_modded=image_layer, offset={x=0,y=0}} end
  return image_layer
end
EoHS.full_image_layer_copy = function(image_layer)
  if type(image_layer) == "string" then return { image_modded=image_layer, offset={x=0,y=0}} end
  return EoHS.deep_copy(image_layer)
end

EoHS.image_aggregate_simplified = function(image_aggregate)
  if is_layer_list(image_aggregate) and not image_aggregate[2] then image_aggregate = image_aggregate[1] end
  if (type(image_aggregate) == "table") and image_aggregate.image_modded and ((image_aggregate.offset.x or 0) == 0) and ((image_aggregate.offset.y or 0) == 0) then
    image_aggregate = image_aggregate.image_modded
  end
  return image_aggregate
end

EoHS.image_aggregate_extents = function(image_aggregate)
  EoHS.assert(EoHS.is_valid_image_aggregate(image_aggregate), "Invalid input to EoHS.image_aggregate_extents: "..EoHS.inspect(image_aggregate))
  if is_layer_list(image_aggregate) then
    local result = EoHS.image_rect_nowhere()
    for i,layer in ipairs(image_aggregate) do
      result = EoHS.image_rect_superunion(result, EoHS.image_aggregate_extents(layer))
    end
    return result
  else
    local width, height = wesnoth.get_image_size(EoHS.get_image_base(image_aggregate))
    EoHS.assert(width, "EoHS.image_aggregate_extents bad input: "..EoHS.inspect(image_aggregate))

    for mod in string.gmatch(EoHS.get_image_modded(image_aggregate), "~%a*%b()") do
      local crop_width, crop_height = string.match(mod, "^~CROP%(%d*,%d*,(%d*),(%d*)%)")
      if crop_width then
        width = tonumber(crop_width)
        height = tonumber(crop_height)
      end
      local scale_width, scale_height = string.match(mod, "^~SCALE%((%d*),(%d*)%)")
      if scale_width then
        width = tonumber(scale_width)
        height = tonumber(scale_height)
      end
    end
    return EoHS.image_rect{ size={x=width,y=height}, offset=EoHS.full_image_layer_reference(image_aggregate).offset }
  end
end

EoHS.image_aggregate_translated = function(image_aggregate, offset)
  EoHS.assert(EoHS.is_valid_image_aggregate(image_aggregate), "Invalid input to EoHS.image_aggregate_translated: "..EoHS.inspect(image_aggregate))
  if is_layer_list(image_aggregate) then
    local result = {}
    for i,layer in ipairs(image_aggregate) do
      table.insert(result, EoHS.image_aggregate_translated(layer, offset))
    end
    return result
  else
    local result = EoHS.full_image_layer_copy(image_aggregate)
    result.offset = EoHS.offset_translated(result.offset, offset)
    return result
  end
end

EoHS.image_aggregate_modded = function(image_aggregate, image_mod)
  EoHS.assert(EoHS.is_valid_image_aggregate(image_aggregate), "Invalid input to EoHS.image_aggregate_modded: "..EoHS.inspect(image_aggregate))
  if is_layer_list(image_aggregate) then
    local result = {}
    for i,layer in ipairs(image_aggregate) do
      table.insert(result, EoHS.image_aggregate_modded(layer, image_mod))
    end
    return result
  elseif type(image_aggregate) == "string" then
    return image_aggregate..image_mod
  else
    local result = EoHS.deep_copy(image_aggregate)
    result.image_modded = result.image_modded..image_mod
    return result
  end
end

local function image_aggregate_cropped_or_masked(image_aggregate, crop_extents, mask_layer, negate)
  EoHS.assert(EoHS.is_valid_image_aggregate(image_aggregate), "Invalid input to image_aggregate_cropped_or_masked: "..EoHS.inspect(image_aggregate))
  --EoHS.err(EoHS.inspect(crop_extents))
  if is_layer_list(image_aggregate) then
    local result = {}
    for i,layer in ipairs(image_aggregate) do
      local layer_result = image_aggregate_cropped_or_masked(layer, crop_extents, mask_layer, negate)
      for i,layer2 in layers(layer_result) do
        table.insert(result, layer2)
      end
    end
    return result
  else
    local extents = EoHS.image_aggregate_extents(image_aggregate)
    local cropped_extents = EoHS.image_rect_intersection(extents, crop_extents)
    if negate then
      if mask_layer then EoHS.err("image_aggregate_cropped_or_masked can't negate a mask") end
      if not EoHS.image_rect_is_anywhere(cropped_extents) then
        return EoHS.full_image_layer_copy(image_aggregate)
      elseif EoHS.image_rects_are_equal(extents, cropped_extents) then
        return {}
      else
        local result = {}
        local do_rect = function(rect)
          local cropped_image_aggregate = image_aggregate_cropped_or_masked(image_aggregate, EoHS.image_rect(rect))
          EoHS.assert(not is_layer_list(cropped_image_aggregate), "image_aggregate_cropped_or_masked unexpected behavior, "..EoHS.inspect(image_aggregate).."\n,\n"..EoHS.inspect(cropped_image_aggregate))
          for i,layer in layers(cropped_image_aggregate) do
            table.insert(result, layer)
          end
        end
        if cropped_extents.min.x > extents.min.x then
          do_rect{ min=extents.min, max={x=cropped_extents.min.x-1,y=extents.max.y} }
        end
        if cropped_extents.max.x < extents.max.x then
          do_rect{ min={x=cropped_extents.max.x+1,y=extents.min.y}, max=extents.max }
        end
        if cropped_extents.min.y > extents.min.y then
          do_rect{ min={x=cropped_extents.min.x,y=extents.min.y}, max={x=cropped_extents.max.x,y=cropped_extents.min.y-1} }
        end
        if cropped_extents.max.y < extents.max.y then
          do_rect{ min={x=cropped_extents.min.x,y=cropped_extents.max.y+1}, max={x=cropped_extents.max.x,y=extents.max.y} }
        end
        return result
      end
    else
      if not EoHS.image_rect_is_anywhere(cropped_extents) then
        return {}
      elseif EoHS.image_rects_are_equal(extents, cropped_extents) then
        return EoHS.full_image_layer_copy(image_aggregate)
      else
        local result = EoHS.full_image_layer_copy(image_aggregate)
        local before_ending_crop, crop_x, crop_y = string.match(result.image_modded, "^(.*)~CROP%((%d*),(%d*),%d*,%d*%)$")
        if before_ending_crop then
          result.image_modded = before_ending_crop
          extents = EoHS.image_rect{ min={x=extents.min.x - crop_x, y=extents.min.y - crop_y}, size=EoHS.image_aggregate_extents(result).size}
          result.offset = extents.offset
        end
        local x,y,w,h = (cropped_extents.min.x-extents.min.x),(cropped_extents.min.y-extents.min.y),(cropped_extents.size.x),(cropped_extents.size.y)
        EoHS.assert(x >= 0, "image_aggregate_cropped_or_masked generated invalid crop x")
        EoHS.assert(y >= 0, "image_aggregate_cropped_or_masked generated invalid crop y")
        EoHS.assert(w > 0, "image_aggregate_cropped_or_masked generated invalid crop w")
        EoHS.assert(h > 0, "image_aggregate_cropped_or_masked generated invalid crop h")
        result.image_modded = (result.image_modded.."~CROP("..x..","..y..","..w..","..h..")")
        result.offset = EoHS.offset_translated(result.offset, {
          x = cropped_extents.offset.x-extents.offset.x,
          y = cropped_extents.offset.y-extents.offset.y,
        })
        if mask_layer then
          if (crop_extents.min.x < cropped_extents.min.x) or (crop_extents.min.y < cropped_extents.min.y) then
            -- Annoying: Have to crop the mask because negative coordinates don't work.
            mask_layer = image_aggregate_cropped_or_masked(mask_layer, cropped_extents)
          end
          result.image_modded = (result.image_modded.."~MASK("..mask_layer.image_modded..",0,0)")
        end
        return result
      end
    end
  end
end

EoHS.image_aggregate_cropped = function(image_aggregate, crop_params)
  return image_aggregate_cropped_or_masked(image_aggregate, EoHS.image_rect(crop_params))
end
EoHS.image_aggregate_masked = function(image_aggregate, mask_layer)
  return image_aggregate_cropped_or_masked(image_aggregate, EoHS.image_aggregate_extents(mask_layer), mask_layer)
end

local reassemble_impl = function(image_aggregate1, image_aggregate2, generate_base, generate_others, combine_others, ...)
  local result1 = image_aggregate1
  local result2 = {}
  for i,crop_params in EoHS.vararg(...) do
  --EoHS.err(EoHS.inspect(crop_params))
    local rect = EoHS.image_rect(crop_params)
    if generate_others then table.insert(result2, image_aggregate_cropped_or_masked(image_aggregate2, rect)) end
    if generate_base then result1 = image_aggregate_cropped_or_masked(result1, rect, nil, true) end
  end
  if combine_others then result2 = EoHS.image_aggregates_combined(unpack(result2)) end
  
  if generate_base and generate_others then return result1, result2 end
  if generate_base then return result1 end
  if generate_others then return result2 end
  EoHS.err("reassemble_impl with no result type")
end
EoHS.image_aggregates_reassembled = function(image_aggregate1, image_aggregate2, ...)
  return reassemble_impl(image_aggregate1, image_aggregate2, true, true, true, ...)
end
EoHS.image_aggregate_split = function(image_aggregate, ...)
  return reassemble_impl(image_aggregate, image_aggregate, true, true, true, ...)
end
EoHS.image_aggregate_sampled = function(image_aggregate, ...)
  return reassemble_impl(nil, image_aggregate, false, true, true, ...)
end

EoHS.image_aggregates_combined = function(image_aggregate1, ...)
  EoHS.assert(EoHS.is_valid_image_aggregate(image_aggregate1), "Invalid input to EoHS.image_aggregates_combined: "..EoHS.inspect(image_aggregate1))
  local result
  if is_layer_list(image_aggregate1) then
    result = EoHS.deep_copy(image_aggregate1)
  else
    result = {EoHS.deep_copy(image_aggregate1)}
  end
  for i,image_aggregate2 in EoHS.vararg(...) do
    EoHS.assert(EoHS.is_valid_image_aggregate(image_aggregate2), "Invalid input to EoHS.image_aggregates_combined: "..EoHS.inspect(image_aggregate2))
    for i,layer in layers(image_aggregate2) do
      table.insert(result, layer)
    end
  end
  return result
end

EoHS.image_aggregate_destructive_combine = function(image_aggregate1, ...)
  EoHS.assert(EoHS.is_valid_image_aggregate(image_aggregate1), "Invalid input to EoHS.image_aggregate_destructive_combine: "..EoHS.inspect(image_aggregate1))
  if not is_layer_list(image_aggregate1) then
    image_aggregate1 = {EoHS.deep_copy(image_aggregate1)}
    for k,v in pairs(image_aggregate1) do if k~=1 then image_aggregate1[k]=nil end end
  end
  for i,image_aggregate2 in EoHS.vararg(...) do
    for i,layer in layers(image_aggregate2) do
      table.insert(image_aggregate1, layer)
    end
  end
  return image_aggregate1
end

local naive_blit_onto = function(image_modded1, extents1, image_layer2)
  local extents2 = EoHS.image_aggregate_extents(image_layer2)
  local x,y = (extents2.min.x-extents1.min.x),(extents2.min.y-extents1.min.y)
  EoHS.assert(x >= 0, "image_aggregate_cropped_or_masked generated invalid blit x")
  EoHS.assert(y >= 0, "image_aggregate_cropped_or_masked generated invalid blit y")
  return (image_modded1.."~BLIT("..EoHS.get_image_modded(image_layer2)..","..x..","..y..")")
end

--[[
local old_sdc = wesnoth.set_dialog_canvas
wesnoth.set_dialog_canvas = function(a,b,c)
  for image in helper.child_range(b, "image") do EoHS.debug(image.name) end
  old_sdc(a,b,c)
end

There was a segfault in the image-mods code, which I could reproduce. I wrote this code to track it.
If a segfault shows up in the dialogs again, this code might be useful.

Backtrace:
#0  0x00007ffff7b57dd7 in ?? () from /usr/lib/x86_64-linux-gnu/libSDL-1.2.so.0
#1  0x0000000001b8dd85 in const_surface_lock::~const_surface_lock() ()
#2  0x0000000001b93cb8 in cut_surface(surface const&, SDL_Rect const&) ()
#3  0x0000000001b46a97 in image::crop_modification::operator()(surface const&) const ()
#4  0x0000000001b395c0 in image::locator::load_image_sub_file() const ()
#5  0x0000000001b39b89 in image::locator::load_from_disk() const ()
#6  0x0000000001b3a571 in image::get_image(image::locator const&, image::TYPE) ()
#7  0x0000000001b499a2 in image::(anonymous namespace)::parse_BLIT_mod(std::string const&) ()
#8  0x0000000001b460a8 in image::(anonymous namespace)::decode_modification(std::string const&) ()
#9  0x0000000001b464c3 in image::modification::decode(std::string const&) ()
#10 0x0000000001b39577 in image::locator::load_image_sub_file() const ()
#11 0x0000000001b39b89 in image::locator::load_from_disk() const ()
#12 0x0000000001b3a571 in image::get_image(image::locator const&, image::TYPE) ()
#13 0x0000000001691d44 in gui2::(anonymous namespace)::timage::draw(surface&, game_logic::map_formula_callable const&) ()
#14 0x0000000001694f69 in gui2::tcanvas::draw(bool) ()
#15 0x00000000016950c6 in gui2::tcanvas::blit(surface&, SDL_Rect) ()
#16 0x000000000115b1a0 in gui2::tcontrol::impl_draw_background(surface&, int, int) ()
#17 0x0000000001266740 in gui2::twidget::draw_background(surface&, int, int) ()
#18 0x000000000120309e in gui2::tgrid::impl_draw_children(surface&, int, int) ()
#19 0x000000000126692e in gui2::twidget::draw_children(surface&, int, int) ()
#20 0x00000000012030bd in gui2::tgrid::impl_draw_children(surface&, int, int) ()
#21 0x000000000126692e in gui2::twidget::draw_children(surface&, int, int) ()
#22 0x00000000012030bd in gui2::tgrid::impl_draw_children(surface&, int, int) ()
#23 0x000000000126692e in gui2::twidget::draw_children(surface&, int, int) ()
#24 0x00000000012030bd in gui2::tgrid::impl_draw_children(surface&, int, int) ()
#25 0x000000000126692e in gui2::twidget::draw_children(surface&, int, int) ()
#26 0x00000000012030bd in gui2::tgrid::impl_draw_children(surface&, int, int) ()
#27 0x000000000126692e in gui2::twidget::draw_children(surface&, int, int) ()
#28 0x00000000012030bd in gui2::tgrid::impl_draw_children(surface&, int, int) ()
#29 0x000000000126692e in gui2::twidget::draw_children(surface&, int, int) ()
#30 0x00000000012030bd in gui2::tgrid::impl_draw_children(surface&, int, int) ()
#31 0x000000000126692e in gui2::twidget::draw_children(surface&, int, int) ()
#32 0x000000000122eb7b in gui2::tscrollbar_container::impl_draw_children(surface&, int, int) ()
#33 0x000000000126692e in gui2::twidget::draw_children(surface&, int, int) ()
#34 0x00000000012030bd in gui2::tgrid::impl_draw_children(surface&, int, int) ()
#35 0x000000000126692e in gui2::twidget::draw_children(surface&, int, int) ()
#36 0x0000000001156b4c in gui2::tcontainer_::impl_draw_children(surface&, int, int) ()
#37 0x000000000126692e in gui2::twidget::draw_children(surface&, int, int) ()
#38 0x000000000126b267 in gui2::twindow::draw() ()
#39 0x0000000001278b01 in boost::_mfi::mf0<void, gui2::twindow>::operator()(gui2::twindow*) const ()
#40 0x0000000001277bc6 in void boost::_bi::list1<boost::_bi::value<gui2::twindow*> >::operator()<boost::_mfi::mf0<void, gui2::twindow>, boost::_bi::list4<gui2::event::tdispatcher&, gui2::event::tevent&, bool&, bool&> >(boost::_bi::type<void>, boost::_mfi::mf0<void, gui2::twindow>&, boost::_bi::list4<gui2::event::tdispatcher&, gui2::event::tevent&, bool&, bool&>&, int) ()
#41 0x0000000001276d9c in void boost::_bi::bind_t<void, boost::_mfi::mf0<void, gui2::twindow>, boost::_bi::list1<boost::_bi::value<gui2::twindow*> > >::operator()<gui2::event::tdispatcher, gui2::event::tevent, bool, bool>(gui2::event::tdispatcher&, gui2::event::tevent&, bool&, bool&) ()
#42 0x0000000001275ac7 in boost::detail::function::void_function_obj_invoker4<boost::_bi::bind_t<void, boost::_mfi::mf0<void, gui2::twindow>, boost::_bi::list1<boost::_bi::value<gui2::twindow*> > >, void, gui2::event::tdispatcher&, gui2::event::tevent, bool&, bool&>::invoke(boost::detail::function::function_buffer&, gui2---Type <return> to continue, or q <return> to quit---
::event::tdispatcher&, gui2::event::tevent, bool&, bool&) ()
#43 0x000000000111e0ff in boost::function4<void, gui2::event::tdispatcher&, gui2::event::tevent, bool&, bool&>::operator()(gui2::event::tdispatcher&, gui2::event::tevent, bool&, bool&) const ()
#44 0x000000000111d7fb in gui2::event::ttrigger::operator()(boost::function<void (gui2::event::tdispatcher&, gui2::event::tevent, bool&, bool&)>, gui2::event::tdispatcher&, gui2::event::tevent, bool&, bool&) ()
#45 0x000000000112049d in bool gui2::event::implementation::fire_event<boost::function<void (gui2::event::tdispatcher&, gui2::event::tevent, bool&, bool&)>, gui2::event::ttrigger>(gui2::event::tevent, std::vector<std::pair<gui2::twidget*, gui2::event::tevent>, std::allocator<std::pair<gui2::twidget*, gui2::event::tevent> > >&, gui2::twidget*, gui2::twidget*, gui2::event::ttrigger) ()
#46 0x000000000111e788 in bool gui2::event::fire_event<boost::function<void (gui2::event::tdispatcher&, gui2::event::tevent, bool&, bool&)>, gui2::event::ttrigger>(gui2::event::tevent, gui2::twidget*, gui2::twidget*, gui2::event::ttrigger) ()
#47 0x000000000111cf75 in gui2::event::tdispatcher::fire(gui2::event::tevent, gui2::twidget&) ()
#48 0x000000000114700c in gui2::event::thandler::draw(bool) ()
#49 0x00000000011464c5 in gui2::event::thandler::handle_event(SDL_Event const&) ()
#50 0x0000000001b04d05 in events::pump() ()
#51 0x000000000126a664 in gui2::twindow::show(bool, unsigned int) ()
#52 0x00000000018d5dc5 in intf_show_dialog(lua_State*) ()
#53 0x0000000001a93c59 in luaD_precall(lua_State*, lua_TValue*, int) ()
#54 0x0000000001aa421c in luaV_execute(lua_State*) ()
#55 0x0000000001a9409b in luaD_call(lua_State*, lua_TValue*, int, int) ()
#56 0x0000000001a90d6c in f_call(lua_State*, void*) ()
#57 0x0000000001a93234 in luaD_rawrunprotected(lua_State*, void (*)(lua_State*, void*), void*) ()
#58 0x0000000001a94825 in luaD_pcall(lua_State*, void (*)(lua_State*, void*), void*, long, long) ()
#59 0x0000000001a90e37 in lua_pcallk(lua_State*, int, int, int, int, int (*)(lua_State*)) ()
#60 0x00000000018e53f1 in luaW_pcall(lua_State*, int, int, bool) ()
#61 0x00000000018d5560 in (anonymous namespace)::lua_synchronize::query_user() const ()
#62 0x00000000018b321b in mp_sync::get_user_choice(std::string const&, mp_sync::user_choice const&, int, bool) ()
#63 0x00000000018d563c in intf_synchronize_choice(lua_State*) ()
#64 0x0000000001a93c59 in luaD_precall(lua_State*, lua_TValue*, int) ()
#65 0x0000000001aa421c in luaV_execute(lua_State*) ()
#66 0x0000000001a9409b in luaD_call(lua_State*, lua_TValue*, int, int) ()
#67 0x0000000001a90d6c in f_call(lua_State*, void*) ()
#68 0x0000000001a93234 in luaD_rawrunprotected(lua_State*, void (*)(lua_State*, void*), void*) ()
#69 0x0000000001a94825 in luaD_pcall(lua_State*, void (*)(lua_State*, void*), void*, long, long) ()
#70 0x0000000001a90e37 in lua_pcallk(lua_State*, int, int, int, int, int (*)(lua_State*)) ()
#71 0x00000000018e53f1 in luaW_pcall(lua_State*, int, int, bool) ()
#72 0x00000000018dc8ae in LuaKernel::run_wml_action(std::string const&, vconfig const&, game_events::queued_event const&) ()
#73 0x000000000164ca55 in game_events::handle_event_commands(game_events::queued_event const&, vconfig const&) ()
#74 0x000000000164410c in game_events::event_handler::handle_event(game_events::queued_event const&) ()
#75 0x000000000164be08 in game_events::(anonymous namespace)::process_event(game_events::event_handler&, game_events::queued_event const&) ()
#76 0x000000000164d53f in game_events::pump() ()
#77 0x000000000164cc98 in game_events::fire(std::string const&, game_events::entity_location const&, game_events::entity_location const&, config const&) ()
#78 0x0000000001647dbf in game_events::wml_menu_item::fire_event(map_location const&) const ()
#79 0x0000000001885778 in play_controller::execute_command(hotkey::hotkey_command const&, int) ()
#80 0x0000000001b2b5d8 in hotkey::execute_command(display&, hotkey::hotkey_command const&, hotkey::command_executor*, int) ()
#81 0x0000000001b2a2fb in hotkey::command_executor::show_menu(std::vector<std::string, std::allocator<std::string> > const&, int, int, bool, display&) ()
#82 0x000000000188803e in play_controller::show_menu(std::vector<std::string, std::allocator<std::string> > const&, int, int, bool, display&) ()
#83 0x0000000001532abd in controller_base::handle_event(SDL_Event const&) ()
---Type <return> to continue, or q <return> to quit---
#84 0x0000000001b04d05 in events::pump() ()
#85 0x0000000001533519 in controller_base::play_slice(bool) ()
#86 0x0000000001897bca in playmp_controller::play_human_turn() ()
#87 0x000000000189e088 in playsingle_controller::play_side(unsigned int, bool) ()
#88 0x00000000018975e2 in playmp_controller::play_side(unsigned int, bool) ()
#89 0x000000000189dc6f in playsingle_controller::play_turn(bool) ()
#90 0x000000000189c47d in playsingle_controller::play_scenario(std::pair<config::const_child_iterator, config::const_child_iterator> const&, bool) ()
#91 0x0000000001891ffd in playmp_scenario(config const&, config const*, display&, game_state&, std::pair<config::const_child_iterator, config::const_child_iterator> const&, bool, io_type_t&, end_level_data&) ()
#92 0x0000000001893b18 in play_game(game_display&, game_state&, config const&, io_type_t, bool, bool) ()
#93 0x00000000017e2b91 in enter_connect_mode(game_display&, config const&, game_state&, mp_game_settings const&, bool) ()
#94 0x00000000017e33c2 in enter_configure_mode(game_display&, config const&, game_state&, mp_game_settings const&, bool) ()
#95 0x00000000017e301c in enter_create_mode(game_display&, config const&, game_state&, bool) ()
#96 0x00000000017e44b1 in mp::start_local_game(game_display&, config const&, game_state&) ()
#97 0x00000000015fff50 in game_controller::play_multiplayer() ()
#98 0x00000000010f5ec6 in do_gameloop(int, char**) ()
#99 0x00000000010f6686 in main ()

]]

EoHS.collapse_image_aggregate = function(to, image_aggregate)
  EoHS.assert(EoHS.is_valid_image_aggregate(image_aggregate), "Invalid input to EoHS.collapse_image_aggregate: "..EoHS.inspect(image_aggregate))
  if is_empty_list(image_aggregate) then EoHS.err("Can't collapse an empty image_aggregate") end
  if (to == "image_layer") and not is_layer_list(image_aggregate) then return image_aggregate end
  local extents = EoHS.image_aggregate_extents(image_aggregate)
  local result
  local use_first_layer = false
  if (to == "image_layer") or ((extents.offset.x == 0) and (extents.offset.y == 0)) then
    if to ~= "override_mod" then
      if not is_layer_list(image_aggregate) then
        use_first_layer = true
      else
        local first_layer_extents = EoHS.image_aggregate_extents(image_aggregate[1])
        if EoHS.image_rects_are_equal(first_layer_extents, extents) then
          use_first_layer = true
        end
      end
    end
  else
    extents = EoHS.image_rect_balanced(extents)
  end
  
  result = ""
  for i,layer in layers(image_aggregate) do
    if (i==1) and use_first_layer then result = EoHS.get_image_modded(layer) else result = naive_blit_onto(result, extents, layer) end
  end
  
  if to == "override_mod" then
    return "~O(0)~SCALE("..(extents.size.x)..","..(extents.size.y)..")"..result
  else
    if string.match(result, "^~") then result = "misc/blank-hex.png~SCALE("..(extents.size.x)..","..(extents.size.y)..")"..result end
    
    if to == "image_layer" then return { image_modded = result, offset = extents.offset } end
    if to == "image_modded" then return result end
  end
end

EoHS.make_image_aggregate_frame = function(image_aggregate, frame)
  if not frame then frame = {} end
  if is_empty_list(image_aggregate) then
    EoHS.err("Why are you making a frame from an empty list?")
    return frame
  end
  -- We could make it image_layer... BUT that also moves the ellipse, HP bar, etc, which is undesirable.
  --local image_layer = EoHS.full_image_layer_reference(EoHS.collapse_image_aggregate("image_layer", image_aggregate))
  local image_modded = EoHS.collapse_image_aggregate("image_modded", image_aggregate)
  frame.image         = image_modded--image_layer.image_modded
  --frame.directional_x = image_layer.offset.x
  --frame.y             = image_layer.offset.y
  return frame
end

EoHS.mod_all_component_images = function(image_modded, image_mods)
  return string.gsub(image_modded, "%.png", function(s) return s..image_mods end)
end

--[[EoHS.image_layer_serialized = function(image_layer)
  local contents = image_layer
  if type(image_layer) == "table" then contents = image_layer.offset.x..","..image_layer.offset.y..","..image_layer.image_modded end
  return "_EoHSImageLayerBegin_"..contents.."_EoHSImageLayerEnd_"
end
local image_layer_contents_deserialized = function(contents)
  local x,y,image_modded = string.match(contents, "^(%-?%d+),(%-?%d+),(.*)")
  if image_modded then return {image_modded=image_modded,offset={x=tonumber(x),y=tonumber(y)}} end
  return contents
end
EoHS.image_layer_deserialized = function(image_layer_serialized)
  local contents = string.match(image_layer_serialized, "^_EoHSImageLayerBegin_(.*)_EoHSImageLayerEnd_$")
  return image_layer_contents_deserialized(contents)
end
EoHS.image_aggregate_serialized = function(image_aggregate)
  if is_layer_list(image_aggregate) then
    local result = ""
    for i,layer in ipairs(image_aggregate) do
      result = result..EoHS.image_layer_serialized(layer)
    end
    return "_EoHSImageLayerList_"..result
  else
    return EoHS.image_layer_serialized(image_aggregate)
  end
end
EoHS.image_aggregate_deserialized = function(image_aggregate_serialized)
  local list = string.match(image_aggregate_serialized, "^_EoHSImageLayerList_(.*)$")
  if list then
    local result = {}
    for contents in string.gmatch(list, "_EoHSImageLayerBegin_(.-)_EoHSImageLayerEnd_") do
      table.insert(result, image_layer_contents_deserialized(contents))
    end
    return result
  else
    return EoHS.image_layer_deserialized(image_aggregate_serialized)
  end
end]]

EoHS.record_palettes_and_ranges_used = function(palettes_and_ranges, image_aggregate)
  for i,layer in layers(image_aggregate) do
    for palette,range in string.gmatch(EoHS.get_image_modded(layer), "RC%((.-)>(.-)%)") do
      local EoHS_palette = string.match(palette, "EoHS_color_palette_(.+)")
      if EoHS_palette then EoHS.record_color_palette(palettes_and_ranges, EoHS_palette) end
      local EoHS_range = string.match(range, "EoHS_color_range_(.+)")
      if EoHS_range then EoHS.record_color_range(palettes_and_ranges, EoHS_range) end
    end
  end
end

-->>)}
