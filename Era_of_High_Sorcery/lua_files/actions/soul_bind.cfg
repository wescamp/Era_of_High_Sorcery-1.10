this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- soul_bind.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.make_spell("soul_bind", {
  image = "attacks/scythe.png",
  name = _"Soul Bind",
  description = _"You kill a unit and bind its soul to yourself. You can't bind an enemy with more HP than twice your Necromancy rank, but you can bind any ally. Each soul grants you some of the abilities of the unit it once was:\n \nYour current and max hitpoints increase by 1/4 of its max HP.\nIf it has a beneficial weapon special in melee, you gain that special, although berserk is limited to three rounds and you can't stack charge, berserk, and drain (instead, you get separate attacks with each).\nIf it has an ability that improves its own damage, resistance or healing, or reduces enemies', you gain that ability.\nIf it has an ability that helps allies in those ways, you gain a reversed version that harms enemies instead. A reversed healing ability acts at the end of your turn, and can't kill (like poison).\nIf it has an ability that affects the time of day, you gain a darkening version of that ability.\nIn a notable exception, you cannot gain any invisibility, skirmishing or teleporting abilities.\nIf it's a wizard, you gain its mana income.\nIf it's a wizard who already bound souls, you get all those souls.\n \nYou also gain XP for killing the unit, even if it's an ally.",
  
  base_cost = { action_points = 6, mana = 6 },
  base_range = 1,
  target_type = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local unit = EoHS.get_seen_unit(parameters.target_x,parameters.target_y,actor.side)
    local unfogged = EoHS.hex_is_unfogged(parameters.target_x,parameters.target_y)
    local details,validity = "","valid"
    if not unit then
      validity = "impossible"
    elseif unit == actor then
      validity = "impossible"
      details = _"Your soul is a lot more useful where it is right now, you reckon."
    elseif wesnoth.is_enemy(unit.side, actor.side) and (unit.hitpoints >
      EoHS.skillset_realm_rank(EoHS.get_unit_skillset(actor), "necromancy") * 2) then
      validity = "impossible"
      details = _"That unit has too many HP for you to bind it."
    end
    return {
      short_name = _"unit",
      name = _"Vulnerable unit",
      details = details,
      validity = validity
    }
  end,
  
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="harm"}}
  end,
  
  happen = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    EoHS.face_towards(actor, parameters.target_x, parameters.target_y) -- combat will also do this, but the animations need to see the correct facing
    local unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
    
    local xp = EoHS.kill_experience(unit.level)
    -- Momentary use of underlying_id to check if the unit has been replaced,
    -- much the way wesnoth's internals use it: probably safe.
    local id = unit.underlying_id
    EoHS.fire_event("last breath", unit.x, unit.y, actor.x, actor.y) -- TODO minor: attacks?
    unit = EoHS.get_unit(unit.x, unit.y)
    actor = EoHS.get_unit(parameters.actor_id)
    if not (actor and unit and (unit.underlying_id == id)) then return end
    EoHS.fire_event("die", unit.x, unit.y, actor.x, actor.y)
    unit = EoHS.get_unit(unit.x, unit.y)
    actor = EoHS.get_unit(parameters.actor_id)
    if not (actor and unit and (unit.underlying_id == id)) then return end
    EoHS.remove_unit(unit.x, unit.y)
      
    local dx, dy = EoHS.pixels_to_hex(actor.x, actor.y, parameters.target_x, parameters.target_y)
    local enemy_image = EoHS.unit_default_image_stuff(unit)
    local directional_enemy_image = enemy_image
    if unit.facing == "sw" or unit.facing == "nw" then directional_enemy_image = enemy_image.."~FL(horiz)" end
      
    actor.experience = actor.experience + xp
    EoHS.unit_gained_experience(actor, xp, true)
    
    local casting_image_1 = EoHS.unit_casting_image_stuff(actor, 1)
    local casting_image_2 = EoHS.unit_casting_image_stuff(actor, 2)
    
    local animation = {
      apply_to="EoHS_soul_bind",
      { "frame", { image=casting_image_1, duration=200, }},
      { "frame", { image=casting_image_2, duration=2000, }},
      { "frame", { image=casting_image_1, duration=200, }},
      { "soul_bind_frame", {
        sound = "magic-dark-big.ogg",
        layer = 70,
        duration = 800,
        image = directional_enemy_image,
        auto_hflip = false,
        auto_vflip = false,
        blend_color = "0,0,0",
        blend_ratio = "0~1",
        x = dx,
        y = dy,
      }},
      { "soul_bind_frame", {
        layer = 70,
        duration = 800,
        image = directional_enemy_image,
        auto_hflip = false,
        auto_vflip = false,
        blend_color = "0,0,0",
        blend_ratio = "1.0",
        x = dx.."~0",
        y = dy.."~0",
      }},
      { "soul_bind_frame", {
        sound = "dwarf-laugh.wav",
        layer = 70,
        duration = 800,
        image = directional_enemy_image,
        auto_hflip = false,
        auto_vflip = false,
        blend_color = "0,0,0",
        blend_ratio = "1",
        alpha = "1~0",
      }},
    }
    
    EoHS.add_temporary_anims(actor, {{"animation",animation}})
    EoHS.put_unit(actor, {immediate=true})
    EoHS.animate_unit({
      flag="EoHS_soul_bind",
      {"filter",{x=actor.x,y=actor.y}},
      with_bars = true,
    })
    EoHS.remove_temporary_anims(actor)
    
    local literal_variables = EoHS.force_subtag(actor, "variables")
    local victim_literal_variables = EoHS.force_subtag(unit, "variables")
    for soul in helper.child_range(victim_literal_variables, "EoHS_bound_soul") do
      table.insert(literal_variables, {"EoHS_bound_soul",soul})
    end
    if EoHS.remove_subtags(victim_literal_variables, "EoHS_bound_soul") > 0 then
      EoHS.update_all_type_adjustments(unit)
    end
    
    for i,info in ipairs(EoHS.dispellable_unit_variables) do
      if EoHS.get_unit_variable(unit, info.varname) then
        info.remove_func(unit)
      end
    end
    
    local hp = math.floor(0.5+unit.max_hitpoints/4)
    actor.hitpoints = actor.hitpoints + hp
    wesnoth.float_label(actor.x, actor.y, "<span color='#00FF00'>"..hp.."</span>")
    local soul = {
      image = enemy_image,
      max_hitpoints = hp,
      mana_income = EoHS.unit_mana_income(unit),
      harms_strength = 0,
    }
    local stacking_specials = {}
    local non_stacking_specials = {}
    for attack in helper.child_range(unit, "attack") do
      if attack.range == "melee" then
        local specials = EoHS.get_subtag(attack, "specials")
        if specials then for i,special in ipairs(specials) do
          if not ((special[1] == "petrifies") or (special[1] == "swarm") or (special[1] == "disable")) then -- TODO can you have a "disable the opponent's attack" weapon?
            local stacks = true
            local helpful_to_affected = true
            local helpful_to_actor = true
            local add = (special[2].add or 0)-(special[2].sub or 0)
            local mult = (special[2].multiply or 1)*(special[2].divide or 1)
            -- All value-affecting specials are good to increase and bad to reduce
            if add < 0 then helpful_to_affected = false end
            if mult < 1 then helpful_to_affected = false end
            -- Unfiltered abilities that double a value (or worse) are too powerful to stack
            if (mult > 1.5) and not (special[2].backstab or special[2][1]) then stacks = false end
            if special[1] == "berserk" then
              if special[2].value > 3 then
                special[2].value = 3
                local fix_name = function(attr) special[2][attr] = special[2][attr] and EoHS.substitute(_"$1| (3 rounds)", {special[2][attr]}) end
                fix_name("name"); fix_name("name_inactive")
              end
              stacks = false
            end
            if special[1] == "drains" then
              stacks = false
            end
            if special[1] == "heal_on_hit" then
              helpful_to_affected = special[2].value > 0
            end
            if (special[2].apply_to == "attacker") or (special[2].apply_to == "defender") or (special[2].apply_to == "both") then
              -- Ambiguous-goodness abilities, you get to keep, but to be safe I don't stack them on the others.
              stacks = false
            elseif (special[2].apply_to == "opponent") then
              helpful_to_actor = not helpful_to_affected
            else
              helpful_to_actor = helpful_to_affected
              if (special[2].value and not special[2].cumulative) and
                  ((special[1] == "damage") or (special[1] == "attacks") or (special[1] == "chance_to_hit")) then
                special[2].cumulative = true
                local fix_name = function(attr) special[2][attr] = special[2][attr] and EoHS.substitute(_"$1| (when helpful)", {special[2][attr]}) end
                fix_name("name"); fix_name("name_inactive")
              end
            end
            if helpful_to_actor then
              table.insert(stacks and stacking_specials or non_stacking_specials, special)
            end
          end
        end end
      end
    end
    if     stacking_specials[1] then table.insert(soul, {    "stacking_specials",    stacking_specials}) end
    if non_stacking_specials[1] then table.insert(soul, {"non_stacking_specials",non_stacking_specials}) end
    local soul_abilities = {}
    local abilities = EoHS.get_subtag(unit, "abilities")
    local allowed_types = {heals=true,regenerate=true,resistance=true,leadership=true,illuminates=true,}
    if abilities then for i,ability in ipairs(abilities) do
      local reverse_name = function(reversed, attr) reversed[2][attr] = reversed[2][attr] and EoHS.substitute(_"reverse $1|", {reversed[2][attr]}) end
      local reverse_names = function(r) reverse_name(r,"name"); reverse_name(r,"name_inactive"); reverse_name(r,"female_name"); reverse_name(r,"female_name_inactive") end
      -- TODO reverse description
      if allowed_types[ability[1]] then
        local affect_adjacent = EoHS.get_subtag(ability[2], "affect_adjacent")
        if affect_adjacent and not ability[2].affect_enemies then
          ability[2].affect_allies = false
          if ability[2].id == "leadership" then
            soul.intimidate = true
          elseif (ability[1] == "heals") or (ability[1] == "regenerate") then
            soul.harms_strength = math.max(soul.harms_strength, ability[2].value or 0)
          else
            local reversed = EoHS.deep_copy(ability)
            reversed[2].affect_self = false
            reversed[2].affect_enemies = true
            reversed[2].id = "EoHS_reversed_"..reversed[2].id
            reverse_names(reversed)
            if reversed[1] == "leadership" then
              reversed[2].value = -reversed[2].value
              table.insert(soul_abilities, reversed)
            end
            if reversed[1] == "resistance" then
              local mult = (reversed[2].multiply or 1)*(reversed[2].divide or 1)
              reversed[2].divide = nil
              if mult ~= 1 then reversed[2].multiply = 1 - mult end
              reversed[2].add = reversed[2].add and -reversed[2].add
              reversed[2].sub = reversed[2].sub and -reversed[2].sub
              
              table.insert(soul_abilities, reversed)
            end
          end
        end
        if (ability[1] == "illuminates") and ability[2].value and (ability[2].value > 0) then
          -- TODO special-case the name of the reversed core illuminates ability, and apply the halo
          reverse_names(ability)
          ability[2].value = -ability[2].value
          ability[2].max_value, ability[2].min_value = ability[2].min_value and -ability[2].min_value, ability[2].max_value and -ability[2].max_value
        end
        if (ability[2].affect_self ~= false) or ability[2].affect_enemies then
          table.insert(soul_abilities, ability)
        end
      end
    end end
    if soul_abilities[1] then table.insert(soul, {"abilities",soul_abilities}) end
      
    table.insert(literal_variables, {"EoHS_bound_soul",soul})
    
    EoHS.update_all_type_adjustments(actor)
    EoHS.put_unit(actor, {immediate=true})
  end,
})

EoHS.at_side_turn_end("harms_strength", function(units)
  local victims = {}
  for i,unit in ipairs(units.with_variable.harms_strength or {}) do
    if unit.side == wesnoth.current.side then
      for x,y in helper.adjacent_tiles(unit.x, unit.y) do
        local victim = EoHS.get_unit(x,y)
        if victim and wesnoth.is_enemy(unit.side, victim.side) then
          victims[victim] = math.max(victims[victim] or 0, EoHS.get_unit_variable(unit, "harms_strength"))
        end
      end
    end
  end
  for victim,amount in pairs(victims) do
    local new_hp = math.max(victim.hitpoints - amount, 1)
    if new_hp < victim.hitpoints then
      wesnoth.float_label(victim.x, victim.y, "<span color='#FF0000'>"..(victim.hitpoints-new_hp).."</span>")
      EoHS.set_unit_attribute_immediate(victim, "hitpoints", new_hp)
    end
  end
end)

EoHS.remove_a_few_souls = function(unit)
  local countdown = EoHS.get_unit_variable(unit, "souls_bound")
  EoHS.remove_subtags(unit, "variables.EoHS_bound_soul", function()
    countdown = countdown - 1
    return countdown < 3
  end)
  EoHS.update_all_type_adjustments(unit)
  -- I'm pretty OK with capping here, but still TODO handling of above max hitpoints
  if unit.hitpoints > unit.max_hitpoints then unit.hitpoints = unit.max_hitpoints end
end

-->>)}
