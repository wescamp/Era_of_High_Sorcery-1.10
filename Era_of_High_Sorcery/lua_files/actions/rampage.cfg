this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- rampage.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local affected_hexes_func = function(parameters, already_paid)
  local actor = EoHS.get_unit(parameters.actor_id)
  local result = {}
  local find = function(x,y)
    local unit = EoHS.get_unit(x,y)
    if unit and (not wesnoth.is_enemy(unit.side, actor.side)) and (not EoHS.get_unit_variable(unit, "rampage")) then table.insert(result, {x=x, y=y, visual="help"}) end
  end
  if EoHS.get_unit_action_points(actor) - (already_paid and 0 or EoHS.action_cost(parameters).action_points) >= 6 then
    find(actor.x, actor.y)
  end
  for x,y in helper.adjacent_tiles(actor.x, actor.y) do
    find(x, y)
  end
  return result
end

EoHS.make_spell("rampage", {
  image = "attacks/frenzy.png",
  name = _"Rampage",
  description = _"You enchant all adjacent allies. On this turn, their melee attacks get +3 damage and +1 swing, and they take half damage from all types. (If some of them are not your own units, just your allies', then those units get the bonus on their next turn.) If you have enough AP left to attack after casting Rampage, you too get the bonus.",
  
  is_enchantment = true,
  
  base_cost = { action_points=7, mana=22 },
  
  affected_hexes = function(parameters) return affected_hexes_func(parameters, false) end,
  
  make_extra_attributes = function(parameters, make_aspect, list_entry_only)
    local affected_hexes = affected_hexes_func(parameters)
    make_aspect.type_value_and_details(_"Units affected", #affected_hexes, "", affected_hexes[1] and "valid" or "impossible")
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local affected_hexes = affected_hexes_func(parameters, true)
    for i,hex in ipairs(affected_hexes) do
      local unit = EoHS.get_unit(hex.x, hex.y)
      EoHS.set_unit_variable(unit, "rampage", true)
      EoHS.update_rampage(unit)
      EoHS.put_unit(unit, {immediate=true})
      wesnoth.float_label(unit.x, unit.y, "<span color='#ff8000'>".._"rampage!".."</span>")
    end
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "drake-hit-2.ogg" }) end)
    EoHS.finish_casting(parameters.actor_id)
  end,
})

EoHS.update_rampage = function(unit)
  EoHS.remove_subtags(unit, "modifications.object", "EoHS_rampage")
  if EoHS.get_unit_variable(unit, "rampage") and (unit.side == wesnoth.current.side) then
    table.insert(EoHS.force_subtag(unit, "modifications"), {"object",{id="EoHS_rampage",
      {"effect",{apply_to="attack",range="melee",increase_damage=3,increase_attacks=1}}}})
  end
  EoHS.remove_subtags(unit, "attack")
  EoHS.remove_subtags(unit, "resistance")
  local recreated = EoHS.create_wunit(unit).__cfg
  for i,t in ipairs(recreated) do if t[1]=="attack" then table.insert(unit, t) end end
  
  local resistance = EoHS.get_subtag(recreated, "resistance")
  if EoHS.get_unit_variable(unit, "rampage") and (unit.side == wesnoth.current.side) then
    for k,v in pairs(resistance) do resistance[k] = math.ceil(v/2) end
    table.insert(EoHS.force_subtag(unit, "modifications"), {"object",{id="EoHS_rampage",
      {"effect",{apply_to="resistance",replace=true,{"resistance",resistance}}}}})
  end
  table.insert(unit, {"resistance",resistance})
  EoHS.update_conditional_abilities(unit)
  EoHS.update_unit_graphics(unit)
end

EoHS.make_conditional_ability("rampage", function(unit)
  if EoHS.get_unit_variable(unit, "rampage") then
    return { "dummy", {
      name = _"rampage",
      description = _"On its turn, this unit has +3 damage and +1 swings on its melee attack, and takes half damage from all types. This effect lasts only one turn.",
    }}
  end
end)

EoHS.at_side_turn("rampage", function(units)
  for i,unit in ipairs(units.with_variable.rampage or {}) do
    if unit.side == wesnoth.current.side then
      EoHS.update_rampage(unit)
      EoHS.put_unit(unit)
    end
  end
end)

EoHS.at_side_turn_end("rampage", function(units)
  for i,unit in ipairs(units.with_variable.rampage or {}) do
    if unit.side == wesnoth.current.side then
      EoHS.set_unit_variable(unit, "rampage")
      EoHS.update_rampage(unit)
      EoHS.put_unit(unit)
    end
  end
end)

-->>)}
