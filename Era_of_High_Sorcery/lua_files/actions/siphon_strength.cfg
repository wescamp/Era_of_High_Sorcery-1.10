this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- siphon_strength.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.make_spell("siphon_strength", {
  image = "attacks/touch-undead.png",
  name = _"Siphon Strength",
  description = _"You enchant a non-wizard unit, sapping its strength. It gets -1 moves, -25% damage, and at the beginning of its turn, you drain 12 of its hitpoints and gain half of that yourself. However, like poison, this cannot kill a unit. The unit can escape the effect by being more than 6 hexes away from you at the end of any turn.",
  
  is_enchantment = true,
  
  base_cost = { action_points=6, mana=7 },
  base_range = 1,
  target_type = EoHS.target_types.unit_probably_enemy,
  
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="harm"}}
  end,
  
  make_extra_attributes = function(parameters, make_aspect, list_entry_only)
    local actor = EoHS.get_unit(parameters.actor_id)
    local unit = EoHS.get_seen_unit(parameters.target_x,parameters.target_y,actor.side)
    if unit then
      if EoHS.get_unit_variable(unit, "is_wizard") then make_aspect.type_and_details(_"Wizard:", _"You can't use this spell on wizards.", "impossible") end
      local siphoner_id = EoHS.get_unit_variable(unit, "strength_siphoner_id")
      if siphoner_id == parameters.actor_id then
        make_aspect.type_and_details(_"Already affected", _"You are already siphoning that unit's strength.", "impossible")
      elseif siphoner_id then
        make_aspect.type_and_details(_"Already affected", _"You will only replace that unit's current siphon effect with your own.", "undesirable")
      end
    end
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local actor = EoHS.get_unit(parameters.actor_id)
    local unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
    -- underlying_id used solely for graphics in a context that needs speed: ok
    -- note that the other IDs here are NOT underlying_ids
    -- unnecessary now that we don't use the ability filter hack, which caused segfaults
    -- local siphoned_ids = EoHS.get_unit_variable(actor, "strength_siphoned_ids")
    -- EoHS.set_unit_variable_immediate(actor, "strength_siphoned_ids", (siphoned_ids and siphoned_ids.."," or "")..unit.underlying_id)
    EoHS.set_unit_variable(unit, "siphon_strength", true)
    EoHS.set_unit_variable(unit, "strength_siphoner_id", parameters.actor_id)
    EoHS.prepare_max_moves_change(unit)
    table.insert(EoHS.force_subtag(unit, "modifications"), {"object",{
      id="EoHS_siphon_strength",
      { "effect", {
        apply_to="attack",
        increase_damage="-25%",
      }},
      { "effect", {
        apply_to="movement",
        increase=-1,
      }},
    }})
    EoHS.remove_subtags(unit, "attack")
    unit.max_moves = unit.max_moves - 1
    EoHS.finish_max_moves_change(unit)
    EoHS.update_conditional_abilities(unit)
    EoHS.update_unit_graphics(unit)
    EoHS.put_unit(unit)
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "magic-holy-3.ogg" }) end)
    EoHS.finish_casting(parameters.actor_id)
  end,
})

EoHS.remove_siphon_strength = function(unit)
  EoHS.set_unit_variable(unit, "siphon_strength")
  EoHS.set_unit_variable(unit, "strength_siphoner_id")
  EoHS.remove_subtags(unit, "modifications.object", "EoHS_siphon_strength")
  EoHS.remove_subtags(unit, "attack")
  unit.max_moves = nil
  EoHS.update_conditional_abilities(unit)
  EoHS.update_unit_graphics(unit)
end

EoHS.at_turn_refresh("strength_siphoner_id", function(units)
  for i,unit in ipairs(units.with_variable.strength_siphoner_id or {}) do
    local siphoner = EoHS.get_unit(EoHS.get_unit_variable(unit, "strength_siphoner_id"))
    if (not siphoner) or (EoHS.distance_between(unit.x, unit.y, siphoner.x, siphoner.y, EoHS.passable_only()) > 6) then
      EoHS.remove_siphon_strength(unit)
      EoHS.put_unit(unit)
    elseif siphoner and (unit.side == wesnoth.current.side) then
      local hp_remaining = math.max(1, unit.hitpoints - 12)
      local amount_lost = unit.hitpoints - hp_remaining
      local new_shp = math.max(siphoner.hitpoints, math.min(siphoner.hitpoints + math.floor(amount_lost/2), siphoner.max_hitpoints))
      local amount_gained = new_shp - siphoner.hitpoints
      EoHS.set_unit_attribute_immediate(siphoner, "hitpoints", new_shp)
      EoHS.set_unit_attribute_immediate(unit, "hitpoints", hp_remaining)
      if amount_lost   > 0 then wesnoth.float_label(    unit.x,     unit.y, '<span color="#000000">'..amount_lost  ..'</span>') end
      if amount_gained > 0 then wesnoth.float_label(siphoner.x, siphoner.y, '<span color="#00ff00">'..amount_gained..'</span>') end
    end
  end
end)

EoHS.make_conditional_ability("siphon_strength", function(unit)
  if EoHS.get_unit_variable(unit, "siphon_strength") then
    return { "dummy", {
      name = _"siphon strength",
      description = _"This unit has -1 moves, -25% damage, and has 12 hitpoints drained each turn until it can end a turn more than 6 hexes away from the wizard who's draining it. However, like poison, it won't die from this draining.",
    }}
  end
end)

EoHS.at_die(function(maybe_siphoner)
  local id = EoHS.unit_id(maybe_siphoner)
  if id then
    local siphoneds_lost = EoHS.get_units({ EoHS.is_on_the_map, EoHS.has_unit_variable("strength_siphoner_id", id) })
    for i,unit in ipairs(siphoneds_lost) do
      EoHS.remove_siphon_strength(unit)
      EoHS.put_unit(unit)
    end
  end
end)

EoHS.fast_update_siphon_strength_graphics = EoHS.filter_func(function(wunit, wsiphoner)
  --[[
  unnecessary now that we don't use the ability filter hack, which caused segfaults
  if (not wsiphoner) and wunit.variables.EoHS_strength_siphoned_ids then
    for uid in string.gmatch(wunit.variables.EoHS_strength_siphoned_ids, "[^,]+") do
      local wsiphoned = wesnoth.get_unit(tonumber(uid))
      if wsiphoned then EoHS.fast_update_siphon_strength_graphics(wsiphoned, wunit) end
    end
  end]]
  if wunit.variables.EoHS_strength_siphoner_id then
    if not wsiphoner then wsiphoner = wesnoth.get_units({EoHS.has_unit_id(wunit.variables.EoHS_strength_siphoner_id)})[1] end
    if not wsiphoner then
      if wunit.variables.EoHS_strength_siphoner_x then
        -- It'll be removed properly soon. Meanwhile, just fix the graphics.
        EoHS.set_unit_variable(wunit, "strength_siphoner_x")
        EoHS.set_unit_variable(wunit, "strength_siphoner_y")
        local unit = wunit.__cfg
        EoHS.update_unit_graphics(unit)
        wesnoth.put_unit(unit)
      end
    elseif (wunit.variables.EoHS_unit_attribute_memory_x ~= wunit.x) or (wunit.variables.EoHS_unit_attribute_memory_y ~= wunit.y)
      or (wunit.variables.EoHS_strength_siphoner_x ~= wsiphoner.x) or (wunit.variables.EoHS_strength_siphoner_y ~= wsiphoner.y) then
      EoHS.set_unit_variable(wunit, "unit_attribute_memory_x", wunit.x)
      EoHS.set_unit_variable(wunit, "unit_attribute_memory_y", wunit.y)
      EoHS.set_unit_variable(wunit, "strength_siphoner_x", wsiphoner.x)
      EoHS.set_unit_variable(wunit, "strength_siphoner_y", wsiphoner.y)
      local unit = wunit.__cfg
      EoHS.update_unit_graphics(unit)
      wesnoth.put_unit(unit)
    end
  end
end)

-->>)}
