this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- change_terrain.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local radius = function(parameters)
  local actor = EoHS.get_unit(parameters.actor_id)
  local rank = (parameters.action_id == "change_terrain") and EoHS.skillset_realm_rank(EoHS.get_unit_skillset(actor), "nature_magic") or 1
  local max_radius = math.min(2,rank-1)
  local radius = parameters.radius
  EoHS.assert(rank >= 1, "Someone has Change Terrain without having any Nature spells...?")
  if (type(radius) == "number") and (radius >= 0) and (radius <= max_radius) then return radius end
  return max_radius
end

local affected_hexes_func = function(parameters, known_or_actual)
  local actor = EoHS.get_unit(parameters.actor_id)
  local result = {}
  for i,hex in ipairs(EoHS.find_reach(parameters.target_x, parameters.target_y, ((known_or_actual == "actual") and EoHS.passable_only or EoHS.known_passable_only)(actor.side), radius(parameters))) do
    table.insert(result, {x=hex.x, y=hex.y, visual="change"})
  end
  return result
end

local change_types_allowed = {
  change_terrain = {default="grow",raise=true,sink=true,heat=true,cool=true,grow=true,rot=true,clear=true},
  earthworks = {default="raise",raise=true,sink=true,clear=true}
}

local change_type = function(parameters)
  local actor = EoHS.get_unit(parameters.actor_id)
  return change_types_allowed[parameters.action_id][parameters.terrain_change_type] and parameters.terrain_change_type or change_types_allowed[parameters.action_id].default
end

EoHS.make_spell("change_terrain", {
  image = "attacks/crush-wose.png",
  name = _"Change Terrain",
  description = _"You change the terrain of one or more hexes. You can affect a diameter-3 circle at Nature rank 2 and a diameter-5 circle at Nature rank 3. The spell costs 2 mana times the diameter. Changing a single hex is permanent, but multiple hexes will revert to their original state after 9 turns.",
  
  base_cost = function(parameters) return { action_points=6, mana= 2 + radius(parameters) * 4 } end,
  base_range = 4,
  target_type = EoHS.target_types.hex,
  
  affected_hexes = affected_hexes_func,
  
  -- TODO: can we have a checkbox "show changed terrains on map"
  
  make_extra_attributes = function(parameters, make_aspect, list_entry_only)
    -- TODO make this look nicer
    local affected_hexes = affected_hexes_func(parameters, "known")
    local num_changed = 0
    for i,hex in ipairs(affected_hexes) do
      local old_terrain = wesnoth.get_terrain(hex.x, hex.y)
      local new_terrain = EoHS.terrain_after_change(old_terrain, change_type(parameters))
      make_aspect.type_value_and_details(
        EoHS.substitute(_"$1|,$2|: $3| ->", {hex.x, hex.y, EoHS.terrain_name(old_terrain)}),
        EoHS.terrain_name(new_terrain),
        "")
      if new_terrain ~= old_terrain then num_changed = num_changed + 1 end
    end
    make_aspect.type_value_and_details(_"Hexes changed:", num_changed, "", (num_changed > 0) and "valid" or "impossible")
  end,
  
  extra_parameters_dialog_grid = function(dialog_context, parameters)
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    local actor = EoHS.get_unit(parameters.actor_id)
    local rank = EoHS.skillset_realm_rank(EoHS.get_unit_skillset(actor), "nature_magic")
    
    local rows = {}
    --[[local update_radius_toggles = function()
      for i=0,rank-1 do
        local id = "change_terrain_radius_"..i
        wesnoth.set_dialog_value(parameters.radius == i, id)
      end
    end]]
    local make_radius_toggle = function(radius_choice, label)
      if rank > radius_choice then
        table.insert(rows, r{c{ horizontal_grow=true, EoHS.fake_listbox_entry(dialog_context, label, { {"text",{
          x=0,
          y=EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
          w="(text_width)",
          h="(text_height)",
          font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
          color = EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT,
          text = label,
        }} }, radius(parameters) == radius_choice, function() parameters.radius = radius_choice end) }})
        --[[local id = "change_terrain_radius_"..radius
        table.insert(rows, r{c{ horizontal_alignment="left", EoHS.toggle_button(dialog_context, {id=id, label=label}) }})
        dialog_context.preshow(function()
          wesnoth.set_dialog_callback(function()
            parameters.radius = radius
            update_radius_toggles()
          end, id)
        end)]]
      end
    end
    
    if parameters.action_id == "change_terrain" then
      make_radius_toggle(0, _"Single hex (permanent)")
      make_radius_toggle(1, _"Diameter 3 (9 turns)")
      make_radius_toggle(2, _"Diameter 5 (9 turns)")
    end
    --[[dialog_context.preshow(function()
      update_radius_toggles()
    end)]]
    
    local type_toggles = {}
    local update_type_toggles = function()
      for i,terrain_change_type in ipairs(type_toggles) do
        local id = "change_terrain_type_"..terrain_change_type
        wesnoth.set_dialog_value(change_type(parameters) == terrain_change_type, id)
      end
    end
    local make_type_toggle = function(terrain_change_type, label)
      if change_types_allowed[parameters.action_id][terrain_change_type] then
        --[[local id = "change_terrain_type_"..terrain_change_type
        table.insert(type_toggles, terrain_change_type)
        table.insert(rows, r{c{ horizontal_alignment="left", EoHS.toggle_button(dialog_context, {id=id, label=label}) }})
        dialog_context.preshow(function()
          wesnoth.set_dialog_callback(function()
            parameters.terrain_change_type = terrain_change_type
            update_type_toggles()
          end, id)
        end)]]
        table.insert(rows, r{c{ horizontal_grow=true, EoHS.fake_listbox_entry(dialog_context, label, { {"text",{
          x=0,
          y=EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
          w="(text_width)",
          h="(text_height)",
          font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
          color = EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT,
          text = label,
        }} }, change_type(parameters) == terrain_change_type, function() parameters.terrain_change_type = terrain_change_type end) }})
      end
    end
    table.insert(rows, r{c{ {"spacer",{height=15}} }})
    make_type_toggle("raise", _"Raise: Deep water -> shallow water -> ford/swamp -> flat -> hills -> mountains")
    make_type_toggle("sink", _"Sink: Mountains -> hills -> flat -> ford/swamp -> shallow water (no deep water)")
    make_type_toggle("heat", _"Heat: Snow -> normal -> desert")
    make_type_toggle("cool", _"Cool: Desert -> normal -> snow")
    make_type_toggle("grow", _"Grow: Land (except mountains) -> forest -> great tree, water -> reef")
    make_type_toggle("rot", _"Rot: Land -> mushroom grove, water (except deep) -> swamp")
    make_type_toggle("clear", _"Clear: Remove forest/mushrooms/reef, great tree -> dead great tree -> removed")
    dialog_context.preshow(function()
      update_type_toggles()
    end)
    
    return g(rows)
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "entangle.wav" }) end)
    local affected_hexes = affected_hexes_func(parameters)
    for i,hex in ipairs(affected_hexes) do
      EoHS.add_terrain_change(hex.x,hex.y,{ name=change_type(parameters), duration = (radius(parameters) > 0) and 9 or nil })
    end
    
    if parameters.action_id == "earthworks" then EoHS.set_unit_attribute_immediate(EoHS.get_unit(parameters.actor_id), "moves", 0) end
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

EoHS.actions.earthworks = EoHS.deep_copy(EoHS.actions.change_terrain)
EoHS.actions.earthworks.name = _"Earthworks"
EoHS.actions.earthworks.is_spell = false
EoHS.actions.earthworks.description = _"You permanently change the terrain of one hex. This uses up your moves."
EoHS.actions.earthworks.base_cost = { action_points=6 }
EoHS.actions.earthworks.base_range = 1

-->>)}
