this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- ogre_fury.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.end_ogre_fury = function(unit)
  EoHS.set_unit_variable(unit, "ogre_fury")
  EoHS.update_all_type_adjustments(unit)
  local original_hitpoints = EoHS.get_unit_variable(unit, "ogre_fury_original_hitpoints")
  if unit.hitpoints > original_hitpoints then unit.hitpoints = original_hitpoints end
  EoHS.set_unit_variable(unit, "ogre_fury_attacked_this_turn")
  EoHS.set_unit_variable(unit, "ogre_fury_original_hitpoints")
end
EoHS.at_side_turn_end("ogre_fury", function(units)
  for i,unit in ipairs(units.with_variable.ogre_fury or {}) do
    if unit.side == wesnoth.current.side then
      if EoHS.get_unit_variable(unit, "ogre_fury_attacked_this_turn") then
        EoHS.set_unit_variable(unit, "ogre_fury_attacked_this_turn")
      else
        EoHS.end_ogre_fury(unit)
      end
      EoHS.put_unit(unit)
    end
  end
end)

local humanoid_races = {dwarf=true,elf=true,goblin=true,human=true,lizard=true,merman=true,naga=true,ogre=true,orc=true,troll=true}

EoHS.make_spell("ogre_fury", {
  image = {image_modded="units/ogres/ogre-attack5.png", offset={x=-1,y=2}},
  name = _"Ogre Fury",
  description = _"You suddenly grow the target humanoid (non-wizard) unit into a hulking ogre, and it is healed to full hitpoints. However, it must attack immediately after transforming, and it only remains an ogre for as long as it attacks every turn. Once it ends a turn without attacking, it changes back and has just as few hitpoints as it did before - or less, if it had less remaining as an ogre.",
  
  base_cost = { action_points=6, mana=16 },
  base_range = 1,
  target_type = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local unit = EoHS.get_seen_unit(parameters.target_x,parameters.target_y,actor.side)
    local details = ""
    local validity = "impossible"
    if not EoHS.hex_is_unfogged(parameters.target_x,parameters.target_y) then
      details = _"You can't tell if there is a unit there."
    elseif unit then
      if not humanoid_races[unit.race] then
        details = _"Only humanoids (dwarves, elves, goblins, humans, saurians, merfolk, nagas, orcs, and trolls) can grow into ogres."
      elseif EoHS.get_unit_variable(unit, "is_wizard") then
        details = _"You can't turn a wizard into an ogre."
      elseif unit.race == "ogre" then
        details = _"That unit is already an ogre."
      elseif wesnoth.is_enemy(unit.side, actor.side) then
        validity = "undesirable"
        details = _"You probably don't want to cast that at an enemy."
      elseif (unit.side == actor.side) and (unit.attacks_left <= 0) then
        details = _"The ogre must attack this turn, and that unit can't attack any more."
      -- TODO: detect whether the unit *can* reach anything to attack it
      else
        validity = "valid"
      end
    end
    return {
      short_name = _"humanoid",
      name = _"Humanoid",
      details = details,
      validity = validity
    }
  end,
  
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="change"}}
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
    EoHS.prepare_max_moves_change(unit)
    EoHS.set_unit_variable(unit, "ogre_fury", true)
    EoHS.set_unit_variable(unit, "ogre_fury_original_hitpoints", unit.hitpoints)
    EoHS.set_unit_variable(unit, "ogre_fury_attacked_this_turn")
    EoHS.update_all_type_adjustments(unit)
    EoHS.finish_max_moves_change(unit)
    unit.hitpoints = nil
    EoHS.put_unit(unit, {immediate=true})
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "ogre-hit-1.ogg" }) end)
    wesnoth.float_label(unit.x, unit.y, "<span color='#ffd087'>".._"Ogre fury!".."</span>")
    EoHS.finish_casting(parameters.actor_id)
  end,
})

EoHS.make_conditional_ability("ogre_fury", function(unit) if EoHS.get_unit_variable(unit, "ogre_fury") then return { "dummy", {
  name = _"ogre fury",
  description = _"This unit will revert to its original form if it ends a turn without attacking."
}} end end)

-->>)}
