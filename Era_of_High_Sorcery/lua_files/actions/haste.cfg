this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- haste.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local shields_givable = function(actor, target)
  if not target then return 1 end
  return math.max(1, math.min(target.level, EoHS.skillset_realm_rank(EoHS.get_unit_skillset(actor), "evocation")))
end

EoHS.make_spell("haste", {
  image = "icons/sandals.png",
  name = _"Haste",
  description = _"You enchant a unit to move faster. It gets +50% moves (rounded up) and +2 AP for three turns. (For non-wizards, +2 AP simply means they can attack twice in a turn.) Casting the spell again on the same unit increases the duration by three turns.",
  
  is_enchantment = true,
  
  base_cost = { action_points=5, mana=18 },
  base_range = 1,
  target_type = EoHS.target_types.unit_probably_ally,
  
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="help"}}
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
    local turns_already = EoHS.get_unit_variable(unit, "haste_turns")
    if not turns_already then
      EoHS.set_unit_action_points_immediate(unit, EoHS.get_unit_action_points(unit) + 2)
      EoHS.prepare_max_moves_change(unit)
      unit.max_moves = math.floor(0.5 + unit.max_moves * 1.51)
      table.insert(EoHS.force_subtag(unit, "modifications"), {"object",{
        id = "EoHS_haste",
        {"effect",{
          apply_to = "movement",
          increase = "51%",
        }}
      }})
      EoHS.finish_max_moves_change(unit)
    end
    EoHS.set_unit_variable(unit, "haste_turns", (turns_already or 0) + 3)
    EoHS.update_conditional_abilities(unit)
    EoHS.update_unit_graphics(unit)
    EoHS.put_unit(unit, {immediate=true})
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "horse-canter.wav" }) end)
    EoHS.finish_casting(parameters.actor_id)
  end,
})

EoHS.make_conditional_ability("haste", function(unit)
  local turns = EoHS.get_unit_variable(unit, "haste_turns")
  if turns then
    return { "dummy", {
      name = EoHS.substitute(_"haste($1|)", {turns}),
      description = (turns > 1) and EoHS.substitute(_"This unit gets +50% moves and +2 AP for $1| turns.", {turns}) or _"This unit gets +50% moves and +2 AP this turn.",
    }}
  end
end)

EoHS.remove_haste = function(unit)
  EoHS.set_unit_variable(unit, "haste_turns")
  EoHS.remove_subtags(unit, "modifications.object", "EoHS_haste")
  
  EoHS.prepare_max_moves_change(unit)
  unit.max_moves = nil
  unit.max_moves = EoHS.create_wunit(unit).max_moves
  EoHS.finish_max_moves_change(unit)
  
  EoHS.update_conditional_abilities(unit)
  EoHS.update_unit_graphics(unit)
end

EoHS.at_turn_refresh("haste_turns", function(units)
  for i,unit in ipairs(units.with_variable.haste_turns or {}) do
    if unit.side == wesnoth.current.side then
      EoHS.set_unit_action_points_immediate(unit, EoHS.get_unit_action_points(unit) + 2)
    end
  end
end)

EoHS.at_side_turn_end("haste_turns", function(units)
  for i,unit in ipairs(units.with_variable.haste_turns or {}) do
    if unit.side == wesnoth.current.side then
      local turns_left = EoHS.get_unit_variable(unit, "haste_turns") - 1
      if turns_left > 0 then
        EoHS.set_unit_variable(unit, "haste_turns", turns_left)
        EoHS.update_conditional_abilities(unit)
      else
        EoHS.remove_haste(unit)
      end
      EoHS.put_unit(unit)
    end
  end
end)

-->>)}
