this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- zombie_swarm.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local affected_hexes_func = function(parameters, known_or_actual)
  local actor = EoHS.get_unit(parameters.actor_id)
  local result = {}
  for x,y in helper.adjacent_tiles(actor.x, actor.y) do
    if EoHS.location_is_passable(x,y,actor.side) and not (EoHS.get_unit(x,y) or EoHS.swarm_is_present(x,y)) then
      table.insert(result, {x=x,y=y,visual="help"})
    end
  end
  return result
end

EoHS.make_spell("zombie_swarm", {
  image = {
    {image_modded="units/undead/zombie-mounted.png", offset={x=8,y=-2}},
    {image_modded="units/undead/zombie-attack.png", offset={x=4,y=9}},
    {image_modded="units/undead/zombie-saurian.png", offset={x=-12,y=4}},
    {image_modded="units/undead/zombie-bat-se-2.png", offset={x=-9,y=-8}},
  },
  name = _"Zombie Swarm",
  -- TODO separate out swarm description
  description = _"You summon an AI-controlled Walking Corpse onto each adjacent empty hex. They choose a random variation, partially depending on the terrain where they appear, and can attack the same turn they're summoned. They are aggressive and always fight if they can; otherwise, they wander randomly unless they can capture a village or go for healing in one turn. These 'swarm' units move at the end of your turn, and during your turn, they are partially nonexistent, so that they don't get in the way of moving your regular units.",
  
  is_summon = true,
  
  base_cost = { action_points=7, mana=28 },
  
  affected_hexes = affected_hexes_func,
  
  make_extra_attributes = function(parameters, make_aspect)
    local actor = EoHS.get_unit(parameters.actor_id)
    local affected_hexes = affected_hexes_func(parameters, "known")
    make_aspect.type_value_and_details(_"Number summoned:", #affected_hexes, "", affected_hexes[1] and (affected_hexes[5] and "valid" or "undesirable") or "impossible")
  end,
  
  happen = function(parameters)
    EoHS.begin_casting(parameters.actor_id)
    local affected_hexes = affected_hexes_func(parameters, "actual")
    local actor = EoHS.get_unit(parameters.actor_id)
    local units = {}
    for i,hex in ipairs(affected_hexes) do
      local terrain = wesnoth.get_terrain(hex.x,hex.y)
      local variation_possibilities = {"gryphon,drake,bat"}
      local landlubbers = "dwarf,goblin,mounted,saurian,troll,wose,default,default,default,default,default"
      if terrain == "Wwf" then table.insert(variation_possibilities, "swimmer,swimmer,swimmer,swimmer,swimmer,swimmer,"..landlubbers)
      elseif string.match(terrain, "^[WS]") then table.insert(variation_possibilities, "swimmer,swimmer,swimmer,swimmer,swimmer")
      elseif string.match(terrain, "^M") then table.insert(variation_possibilities, "dwarf,dwarf,dwarf,dwarf,dwarf,dwarf,dwarf,dwarf,dwarf,troll,troll,troll,goblin,goblin,gryphon,default")
      elseif string.match(terrain, "^Q") then --nothing
      else table.insert(variation_possibilities, landlubbers) end
      if string.match(terrain, "^U") then table.insert(variation_possibilities, "dwarf,dwarf,dwarf,dwarf,dwarf,troll,troll,troll,troll,troll") end
      if string.match(terrain, "^H") then table.insert(variation_possibilities, "dwarf,troll,troll,goblin,goblin,saurian") end
      if string.match(terrain, "^[GRI]") then table.insert(variation_possibilities, "mounted,mounted,mounted,mounted,defaultdefault") end
      if string.match(terrain, "%^F") then table.insert(variation_possibilities, "wose,wose,wose,wose,wose,wose,wose,wose") end
      if string.match(terrain, "%^S") then table.insert(variation_possibilities, "saurian,saurian,saurian,saurian,saurian,saurian,drake,drake,drake") end
      local unit = EoHS.summon_unit({side=actor.side,type="Walking Corpse",variation=EoHS.random(table.concat(variation_possibilities,","))}, hex.x, hex.y, nil, actor, true)
      if unit then
        unit.moves = unit.max_moves
        unit.attacks_left = unit.max_attacks
        EoHS.set_unit_variable(unit, "is_swarm", true)
      end
      table.insert(units, unit)
    end
    EoHS.fake_recruit(units)
    if actor.side == wesnoth.current.side then EoHS.flatten_swarms(wesnoth.current.side) end
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}
