this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- group_teleport.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local motion_list_func = function(parameters, known_or_actual)
  local result = {}
  local actor = EoHS.get_unit(parameters.actor_id)
  local record = function(x,y)
    local unit = (known_or_actual == "actual") and EoHS.get_unit(x,y) or EoHS.get_seen_unit(x,y,actor.side)
    if unit then
      local tx,ty = EoHS.same_relative_location(x,y,actor.x,actor.y,parameters.target_x,parameters.target_y)
      local cant_teleport, wont_teleport
      local wont_teleport_func = function(u)
        if EoHS.unit_is_immobile(u) then return _"Group Teleport doesn't move immobile units." end
        if EoHS.location_is_enemy_circle_of_protection(u.x,u.y,actor.side) then return _"Group Teleport doesn't move units in enemy circles of protection." end
      end
      local wont_teleport = wont_teleport_func(unit)
      if not wont_teleport then
        if (tx == x) and (ty == y) then
          cant_teleport = _"There's point in teleporting to the same hex."
        elseif not EoHS.location_is_passable(tx,ty) then
          cant_teleport = _"It would be teleported into a wall."
        elseif EoHS.location_is_enemy_circle_of_protection(tx,ty,actor.side) then
          cant_teleport = _"You can't teleport a unit into an enemy circle of protection."
          -- TODO don't waste time creating a wunit...
        elseif not EoHS.wunit_can_move_on_hex(EoHS.create_wunit(unit),tx,ty) then
          cant_teleport = _"It can't move on its destination terrain."
        elseif not EoHS.hex_is_unfogged(tx,ty,actor.side) then
          cant_teleport = _"It might be teleported onto another unit."
        else
          local target_unit = ((known_or_actual == "actual") and EoHS.get_unit(tx,ty) or EoHS.get_seen_unit(tx,ty,actor.side))
          if target_unit and (EoHS.distance_between(actor.x,actor.y,tx,ty) <= 1) and not wont_teleport_func(target_unit) then target_unit = nil end
          if target_unit then
            cant_teleport = _"It would be teleported onto another unit."
          end
        end
      end
      table.insert(result, {x=x, y=y, tx=tx, ty=ty, wont_teleport=wont_teleport, cant_teleport=cant_teleport})
    end
  end
  record(actor.x,actor.y)
  for x,y in helper.adjacent_tiles(actor.x,actor.y) do
    record(x,y)
  end
  return result
end

table.insert(EoHS.universal_attack_specials, EoHS.attack_disabling_special{
  id="EoHS_just_teleported_1",
  name=_"just teleported",
  name_inactive="",
  active_on="offense",
  { "filter_self", { EoHS.has_unit_variable("just_teleported_ally") }}
})
table.insert(EoHS.universal_attack_specials, EoHS.attack_disabling_special{
  id="EoHS_just_teleported_2",
  name=wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0") and "" or _"just teleported",
  name_inactive="",
  active_on="offense",
  { "filter_opponent", { EoHS.has_unit_variable("just_teleported_enemy") }}
})

EoHS.at_side_turn("just_teleported_enemy", function(units)
  for i,unit in ipairs(units.with_variable.just_teleported_enemy or {}) do
    if unit.side == wesnoth.current.side then
      EoHS.set_unit_variable_immediate(unit, "just_teleported_enemy")
    end
  end
end)
EoHS.at_side_turn_end("just_teleported_ally", function(units)
  for i,unit in ipairs(units.with_variable.just_teleported_ally or {}) do
    if unit.side == wesnoth.current.side then
      EoHS.set_unit_variable_immediate(unit, "just_teleported_ally")
    end
  end
end)

EoHS.make_spell("group_teleport", {
  image = "halo/teleport-7.png",
  name = _"Group Teleport",
  description = _"You teleport yourself and every adjacent unit (friend or foe) to the target hex. Units can move after teleporting, but cannot attack or be attacked. (Specifically, teleported enemies can't be attacked until after their own turn, and teleported allies can't attack until after their own turn.)",
  
  base_cost = { action_points=7, mana=22 },
  base_range = 6,
  target_type = EoHS.target_types.hex,
  
  affected_hexes = function(parameters, known_or_actual)
    local actor = EoHS.get_unit(parameters.actor_id)
    local motion_list = motion_list_func(parameters, known_or_actual)
    local result = {}
    for i,motion in ipairs(motion_list) do
      if not motion.wont_teleport then
        table.insert(result, {x=motion.x, y=motion.y, visual="change"})
        if (EoHS.distance_between(actor.x,actor.y,motion.tx,motion.ty) > 1) or not ((known_or_actual == "actual") and EoHS.get_unit(motion.tx,motion.ty) or EoHS.get_seen_unit(motion.tx,motion.ty,actor.side)) then
          table.insert(result, {x=motion.tx, y=motion.ty, visual="change", require_no_invisible_enemy=true})
        end
      end
    end
    return result
  end,
  
  make_extra_attributes = function(parameters, make_aspect)
    local motion_list = motion_list_func(parameters, "known")
    for i,motion in ipairs(motion_list) do
      local unit = EoHS.get_unit(motion.x,motion.y)
      local value,details,validity
      validity = "valid"
      local name = EoHS.unit_appellation(unit)
      if motion.wont_teleport then
        value = _"nowhere"
        details = motion.wont_teleport
      else
        value = EoHS.substitute(_"to ($1|,$2|)",{motion.tx,motion.ty})
        if motion.cant_teleport then
          details = motion.cant_teleport
          validity = "impossible"
        end
      end
      make_aspect.type_value_and_details(EoHS.substitute(_"$1| teleports...", {name}), value, details, validity)
    end
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    local actor = EoHS.get_unit(parameters.actor_id)
    local motion_list = motion_list_func(parameters, "known")
    for i,motion in ipairs(motion_list) do
      if not motion.wont_teleport then
        motion.unit = EoHS.get_unit(motion.x,motion.y)
        motion.unit.x, motion.unit.y = motion.tx, motion.ty
        EoHS.set_unit_variable(motion.unit, wesnoth.is_enemy(motion.unit.side, actor.side) and "just_teleported_enemy" or "just_teleported_ally", true)
        EoHS.update_unit_graphics(motion.unit)
        EoHS.remove_unit(motion.x,motion.y)
      end
    end
    for i,motion in ipairs(motion_list) do
      EoHS.put_unit(motion.unit, {immediate=true,allow_new_location=true,allow_unknown_id=true}) -- TODO better interface for moving units
      wesnoth.float_label(motion.unit.x, motion.unit.y, "<span color='#ffffff'>".._"teleport".."</span>")
    end
    for i,motion in ipairs(motion_list) do wesnoth.fire("redraw", { side = motion.unit.side }) end
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "fanfare-short.wav" }) end)
    for i,motion in ipairs(motion_list) do EoHS.fire_event("moveto", motion.unit.x, motion.unit.y) end
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}
