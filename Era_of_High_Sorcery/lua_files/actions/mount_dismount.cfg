this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- mount_dismount.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local mountable_units={["Wolf"]=true,["Great Wolf"]=true,["Direwolf"]=true,["Water Serpent"]=true,["Gryphon"]=true,["Sea Serpent"]=true,["Fire Dragon"]=true,["Skeletal Dragon"]=true}

EoHS.get_mount = function(unit)
  return EoHS.get_subtag(unit, "variables.EoHS_mount")
end
EoHS.set_mount = function(unit, mount)
  local literal_variables = EoHS.get_subtag(unit, "variables")
  EoHS.remove_subtags(literal_variables, "EoHS_mount")
  if mount then table.insert(literal_variables, {"EoHS_mount",mount}) end
end

EoHS.update_mount_hitpoints = function(unit)
  -- Essentially, each HP change applies to just the rider or just the mount, based on which would make their %HP more similar,
  --   until they're balanced, at which point it stays that way.
  local mount = EoHS.get_mount(unit)
  if mount then
    local last_hitpoints = EoHS.get_unit_variable(unit, "remembered_mounted_hitpoints")
    local gain = unit.hitpoints - last_hitpoints
    if gain ~= 0 then
      local desired_mount_hitpoints = math.floor(0.5 + (mount.max_hitpoints * (unit.hitpoints / unit.max_hitpoints)))
      local diff1 = mount.hitpoints      - desired_mount_hitpoints
      local diff2 = mount.hitpoints+gain - desired_mount_hitpoints
      if (diff1 * diff2) <= 0 then
        mount.hitpoints = desired_mount_hitpoints
      else
        if math.abs(diff2) < math.abs(diff1) then
          mount.hitpoints = mount.hitpoints+gain
        end
      end
      EoHS.set_unit_variable(unit, "remembered_mounted_hitpoints", unit.hitpoints)
      return true
    end
  end
  return false
end

-- It's confusing to dismount something you've been riding for a while only to find that it's still poisoned.
-- So we cure poison for mounts, even though we don't apply most other rules.
EoHS.at_side_turn("is_mounted", function(units)
  for i,unit in ipairs(units.with_variable.is_mounted or {}) do
    if wesnoth.get_terrain_info(wesnoth.get_terrain(unit.x,unit.y)).healing then -- I guess all healing terrains cure? TODO verify
      local mount = EoHS.get_mount(unit)
      EoHS.set_subtag_attribute(mount, "status.poisoned")
      EoHS.put_unit(unit)
    end
  end
end)

-- Deliberately not a spell
EoHS.make_action("mount_dismount", {
  image = "units/goblins/direwolver-moving.png",
  name = _"Mount/dismount",
  description = _"You mount an adjacent unit, or dismount onto an adjacent hex. You can mount Wolves, Water Serpents, Gryphons, Sea Serpents, Dragons, and Skeletal Dragons. While mounted, your moves, movement costs, and defenses are replaced with those of your mount, and you gain your mount's attacks and max hitpoints on top of your own. Otherwise, you retain all your normal unit attributes. Mounting costs 6 AP and reduces your moves to zero. Dismounting does not cost AP. When you dismount, your mount retains its movement, you get off with your current moves or your normal max moves (whichever is less), and then you pay your normal movement cost to enter the target terrain.",

  base_cost = function(parameters) return { action_points=(not EoHS.get_unit_variable(EoHS.get_unit(parameters.actor_id), "is_mounted")) and 6 or nil } end,
  base_range = 1,
  target_type = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local mounted = EoHS.get_unit_variable(actor, "is_mounted")
    if mounted then return EoHS.target_types.empty_hex(parameters) end
    local unit = EoHS.get_seen_unit(parameters.target_x,parameters.target_y,actor.side)
    local cant = nil
    if unit then
      if unit.side ~= actor.side then
        cant = _"You can only mount your own unit."
      elseif unit.type == "Giant Mudcrawler" then
        cant = _"You refuse to climb on top of something so disgusting."
      elseif not mountable_units[unit.type] then
        cant = _"That type of unit can't be ridden."
      end
    end
    return {
      short_name = _"mount",
      name = _"Mountable unit",
      details = cant or "",
      validity = (unit and not cant) and "valid" or "impossible"
    }
  end,
  
  affected_hexes = function(parameters) return {{x=parameters.target_x,y=parameters.target_y,visual="change"}} end,
  
  make_extra_attributes = function(parameters, make_aspect)
    local actor = EoHS.get_unit(parameters.actor_id)
    if EoHS.get_unit_variable(actor, "is_mounted") then
      local unmounted_actor = EoHS.deep_copy(actor)
      EoHS.set_unit_variable(unmounted_actor, "is_mounted")
      EoHS.update_all_type_adjustments(unmounted_actor, true)
      -- TODO don't waste time creating a wunit...
      local movement_cost = wesnoth.unit_movement_cost(EoHS.create_wunit(unmounted_actor), wesnoth.get_terrain(parameters.target_x, parameters.target_y))
      local details = ""
      local validity = "impossible"
      if not (movement_cost and (movement_cost > 0) and (movement_cost <= unmounted_actor.max_moves)) then
        movement_cost = "-"
        details = _"You can't move on that terrain."
      else
        if movement_cost <= unmounted_actor.moves then validity = "valid" end
      end
      make_aspect.type_value_and_details(_"Movement cost", movement_cost, details, validity)
    end
  end,
  
  use_message = function(parameters)
    local target_unit = EoHS.get_unit(parameters.target_x,parameters.target_y)
    if target_unit then
      return _"$actor.name| ($actor.x|,$actor.y|) mounts a $mount| ($target.x|,$target.y|)", {mount=EoHS.unit_typename(target_unit)}
    else
      return _"$actor.name| ($actor.x|,$actor.y|) dismounts to ($target_x|,$target_y|)"
    end
  end,
  
  happen = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    if EoHS.get_unit_variable(actor, "is_mounted") then
      EoHS.assert(not EoHS.update_mount_hitpoints(actor), "mount hitpoints should be up-to-date per standardize_units from the code that invokes mount/dismount, but they're not")
      local mount = EoHS.get_mount(actor)
      EoHS.set_unit_variable(actor, "is_mounted")
      EoHS.set_mount(actor)
      EoHS.update_all_type_adjustments(actor)
      mount.moves = actor.moves
      EoHS.set_unit_action_points_immediate(mount, EoHS.get_unit_action_points(actor))
      actor.moves = math.min(actor.moves, actor.max_moves)
      actor.hitpoints = actor.hitpoints - mount.hitpoints
      mount.x = actor.x
      mount.y = actor.y
      actor.x = parameters.target_x
      actor.y = parameters.target_y
      
      EoHS.put_unit(mount, {immediate=true,allow_new_location=true,allow_unknown_id=true,allow_overwrite=true})
      EoHS.put_unit(actor, {immediate=true,allow_new_location=true,allow_unknown_id=true})
      local wactor = wesnoth.get_unit(actor.x,actor.y)
      local zoc = false
      for x,y in helper.adjacent_tiles(actor.x,actor.y) do
        local unit = EoHS.get_unit(x,y)
        if unit and unit.zoc and wesnoth.is_enemy(actor.side, unit.side) then
          zoc = true
          break
        end
      end
      if zoc then
        for i,ability in ipairs(EoHS.game_action_simulations.abilities_affecting_unit_wunit(actor, wactor)) do
          if ability[1] == "skirmisher" then
            zoc = false
            break
          end
        end
      end
      if zoc then
        wactor.moves = 0
      else
        wactor.moves = wactor.moves - wesnoth.unit_movement_cost(wactor, wesnoth.get_terrain(actor.x, actor.y))
      end
      actor.moves = wactor.moves
      wesnoth.fire("redraw", { side = actor.side })
      EoHS.fire_event("moveto", actor.x, actor.y)
    else
      local mount = EoHS.get_unit(parameters.target_x,parameters.target_y)
      EoHS.set_unit_variable(actor, "is_mounted", true)
      EoHS.set_mount(actor, mount)
      actor.hitpoints = actor.hitpoints + mount.hitpoints
      EoHS.set_unit_variable(actor, "remembered_mounted_hitpoints", actor.hitpoints)
      EoHS.set_unit_variable(actor, "mount_type", mount.type)
      EoHS.set_unit_variable(actor, "mount_gender", mount.gender) -- TODO minor, maybe make these a fake_subtag like unit_attribute_memory
      EoHS.set_unit_variable(actor, "mount_variation", mount.variation)
      EoHS.set_unit_variable(actor, "mount_image_mods", EoHS.get_unit_variable(mount, "image_mods"))
      EoHS.update_all_type_adjustments(actor)
      actor.moves = 0
      
      EoHS.remove_unit(actor.x, actor.y)
      actor.x = parameters.target_x
      actor.y = parameters.target_y
      EoHS.put_unit(actor, {immediate=true,allow_unknown_id=true,allow_new_location=true,allow_overwrite=true})
    end
  end,
})

-->>)}
