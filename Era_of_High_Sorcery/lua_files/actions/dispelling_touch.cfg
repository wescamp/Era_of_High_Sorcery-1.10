this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- dispelling_touch.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local effects_desc = _"First, if the enemy is in a circle of protection, dispel the circle.\nOtherwise, if the enemy is under the influence of any unit enchantments or transformations, bypass Mage Shield and dispel all of them (beneficial or not). If they have bound more than three souls with Soul Bind, this only unbinds the three most recent.\nOtherwise, if the unit is a summon, undead, or drake, banish it to its side's recall list. If it's a summon, the wizard who cast it can also re-summon it for 20 mana and 6 AP."

EoHS.make_touch_enchantment("dispelling_touch", {
  image = "attacks/touch-faerie.png",
  name = _"Dispelling Touch",
  description = EoHS.substitute(_"You enchant your default melee attack. The next time you hit on offense against a unit with magic, that magic is dispelled. The order of effects is:\n\n$1|\n\nWhile you hold a Dispelling Touch, you can also use it on your own unit or an empty hex for 6 AP, in which case you choose which effects to dispel.", {effects_desc}),
  
  base_cost = { action_points=6, mana=6 },
  
  sound = "magic-holy-2.ogg",
})

EoHS.dispelling_touch_special = { "dummy", {
  id = "EoHS_dispelling_touch",
  name = _"dispelling touch",
  description = EoHS.substitute(_"The next time this attack hits on offense against a unit with magic, that magic is dispelled.\n$1|", {effects_desc}),
}}

EoHS.soon(function()
  EoHS.dispellable_unit_variables = {
    { varname = "touch_enchantment", name = function(unit) return EoHS.actions[EoHS.get_unit_variable(unit, "touch_enchantment")].name end,
      remove_func = function(unit) EoHS.set_unit_variable(unit, "touch_enchantment"); EoHS.update_all_type_adjustments(unit) end },
    { varname = "mage_shields", name = function() return EoHS.actions.mage_shield.name end, remove_func = function(unit)
      EoHS.set_unit_variable(unit, "mage_shields")
      EoHS.update_conditional_abilities(unit)
      EoHS.update_unit_graphics(unit) end },
    { varname = "energy_overload", is_harmful=true, name = function() return _"energy overload" end, remove_func = function(unit)
      EoHS.set_unit_variable(unit, "energy_overload"); EoHS.update_energy_overload(unit) end },
    { varname = "wizard_sword_turns", name = function() return EoHS.actions.wizard_sword.name end, remove_func = EoHS.remove_wizard_sword },
    { varname = "ogre_fury", name = function() return EoHS.actions.ogre_fury.name end, remove_func = EoHS.end_ogre_fury },
    { varname = "haste", name = function() return EoHS.actions.haste.name end, remove_func = EoHS.remove_haste },
    -- Redundant name, but never can both apply to the same unit
    { varname = "mud_touched", is_harmful=true, name = function() return EoHS.actions.mud_touch.name end, remove_func = function(unit) EoHS.set_unit_variable(unit, "mud_touched"); EoHS.update_all_type_adjustments(unit) end },
    { varname = "regeneration_turns", name = function() return EoHS.actions.regeneration.name end, remove_func = EoHS.remove_regeneration },
    { varname = "dehydrated", is_harmful=true, name = function() return EoHS.actions.dehydration.name end, remove_func = EoHS.remove_dehydration },
    { varname = "lightning_paralysis", is_harmful=true, name = function() return _"paralysis" end, remove_func = EoHS.remove_lightning_paralysis },
    { varname = "curse_of_anxiety_turns", is_harmful=true, name = function() return EoHS.actions.curse_of_anxiety.name end, remove_func = EoHS.remove_curse_of_anxiety },
    { varname = "strength_siphoner_id", is_harmful=true, name = function() return EoHS.actions.siphon_strength.name end, remove_func = EoHS.remove_siphon_strength },
    { varname = "dark_pact", name = function() return EoHS.actions.dark_pact.name end, remove_func = function(unit)
      EoHS.set_unit_variable(unit, "dark_pact")
      EoHS.update_conditional_abilities(unit)
      EoHS.update_unit_graphics(unit) end },
    { varname = "spiritform", name = function() return EoHS.actions.spiritform.name end, remove_func = EoHS.end_spiritform },
    { varname = "souls_bound", name = function() return EoHS.actions.soul_bind.name end, remove_func = EoHS.remove_a_few_souls },
      -- TODO minor, for allies allow select removal of souls / removing any number of souls
      -- TODO this is the only removal func that isn't idempotent, make sure that doesn't cause any trouble
  }
  EoHS.dispellable_hex_things = {
    { id = "poison_ground", name = function() return EoHS.actions.poison_ground.name end, check_func = EoHS.get_ground_poisoned, remove_func = EoHS.set_ground_poisoned },
    { id = "circle_of_protection", name = function() return EoHS.actions.circle_of_protection.name end, check_func = EoHS.get_circle_of_protection, remove_func = EoHS.set_circle_of_protection },
    { id = "change_terrain", name = function() return _"temporary Change Terrain effects" end, check_func = EoHS.has_temporary_terrain_change, remove_func = EoHS.remove_temporary_terrain_changes },
  }
end)

EoHS.dispelling_touch_can_banish_unit = function(unit)
  return (unit.race == "undead") or (unit.race == "drake") or EoHS.get_unit_variable(unit, "is_summon")
end
EoHS.has_any_known_dispellable_magic = function(x,y,side)
  local unit = EoHS.get_seen_unit(x,y,side)
  if unit then
    if EoHS.dispelling_touch_can_banish_unit(unit) then return true end
    for i,info in ipairs(EoHS.dispellable_unit_variables) do
      if EoHS.get_unit_variable(unit, info.varname) then return true end
    end
  end
  for i,info in ipairs(EoHS.dispellable_hex_things) do
    if info.check_func(x,y) then return true end
  end
  return false
end

EoHS.banish_unit = function(unit)
  EoHS.remove_unit(unit.x, unit.y)
  wesnoth.float_label(unit.x, unit.y, "<span color='#ff33bb'>"..(_"Banished!").."</span>")
  unit.x = "recall"
  unit.y = "recall"
  wesnoth.put_recall_unit(unit) -- TODO implement resummoning
end

EoHS.make_action("use_dispelling_touch", {
  image = "attacks/touch-faerie.png",
  name = _"Use Dispelling Touch",
  description = _"You use up your Dispelling Touch to remove magic from an ally or empty hex.",
  
  base_cost = { action_points=6 },
  base_range = 1,
  target_type = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local unit = EoHS.get_seen_unit(parameters.target_x,parameters.target_y,actor.side)
    local details,validity = "","valid"
    if not EoHS.has_any_known_dispellable_magic(parameters.target_x,parameters.target_y,actor.side) then
      validity = "impossible"
      details = _"You don't see any magic there to dispel."
    elseif not EoHS.hex_is_unfogged(parameters.target_x,parameters.target_y) then
      validity = "impossible"
      details = _"You can't tell if there's an enemy there."
    elseif unit and wesnoth.is_enemy(unit.side, actor.side) then
      validity = "impossible"
    end
    return {
      short_name = _"ally or hex",
      name = _"Ally or empty hex",
      details = details,
      validity = validity
    }
  end,
  
  use_message = function(parameters)
    if EoHS.get_unit(parameters.target_x,parameters.target_y) then
      return _"$actor.name| ($actor.x|,$actor.y|) uses their Dispelling Touch on $target.name| ($target.x|,$target.y|)"
    else
      return _"$actor.name| ($actor.x|,$actor.y|) uses their Dispelling Touch on ($target_x|,$target_y|)"
    end
  end,
  
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="change",require_no_invisible_enemy=true}}
  end,
  
  extra_parameters_dialog_grid = function(dialog_context, parameters)
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    
    local rows = {}
    local x,y = parameters.target_x,parameters.target_y
    local actor = EoHS.get_unit(parameters.actor_id)
    local unit = EoHS.get_seen_unit(x,y,actor.side)
    
    -- TODO: "undesirable" to dispel good things, "impossible" to dispel nothing
    local make_toggle = function(id, name, omit_dispel)
      table.insert(rows, r{c{ horizontal_alignment="left", EoHS.toggle_button(dialog_context, {id=id, label=omit_dispel and name or EoHS.substitute(_"Dispel $1|", {name})}) }})
      dialog_context.preshow(function()
        wesnoth.set_dialog_value(parameters[id], id)
        wesnoth.set_dialog_callback(function()
          parameters[id] = wesnoth.get_dialog_value(id)
        end, id)
      end)
    end
    if unit and EoHS.dispelling_touch_can_banish_unit(unit) then
      local id = "dispelling_touch_banishes_unit"
      make_toggle(id, _"Banish unit to recall list", true)
      if parameters[id] == nil then parameters[id] = true end
    end
    for i,info in ipairs(EoHS.dispellable_unit_variables) do
      local id = "dispelling_touch_dispels_"..info.varname
      if parameters[id] == nil then parameters[id] = true end
      if unit and EoHS.get_unit_variable(unit, info.varname) then make_toggle(id, info.name(unit)) end
    end
    for i,info in ipairs(EoHS.dispellable_hex_things) do
      local id = "dispelling_touch_dispels_"..info.id
      if parameters[id] == nil then parameters[id] = true end
      if info.check_func(x,y) then make_toggle(id, info.name(x,y)) end
    end
    
    return g(rows)
  end,
  
  happen = function(parameters)
    -- TODO animate
    local x,y = parameters.target_x,parameters.target_y
    local unit = EoHS.get_unit(x,y)
    if unit then
      for i,info in ipairs(EoHS.dispellable_unit_variables) do
        local id = "dispelling_touch_dispels_"..info.varname
        if parameters[id] and EoHS.get_unit_variable(unit, info.varname) then info.remove_func(unit); EoHS.put_unit(unit) end
      end
      if parameters.dispelling_touch_banishes_unit and EoHS.dispelling_touch_can_banish_unit(unit) then
        EoHS.banish_unit(unit)
      end
    end
    for i,info in ipairs(EoHS.dispellable_hex_things) do
      local id = "dispelling_touch_dispels_"..info.id
      if parameters[id] and info.check_func(x,y) then info.remove_func(x,y) end
    end
    
    local actor = EoHS.get_unit(parameters.actor_id)
    EoHS.set_unit_variable(actor, "touch_enchantment")
    EoHS.update_all_type_adjustments(actor)
    EoHS.put_unit(actor)
  end,
})

-->>)}
