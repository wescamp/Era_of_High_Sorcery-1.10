this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- repelling_gust.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local affected_hexes_func = function(parameters)
  local actor = EoHS.get_unit(parameters.actor_id)
  local result = {}
  local find = function(x,y) if not (EoHS.get_circle_of_protection(x, y) or (x==actor.x and y==actor.y)) then table.insert(result, {x=x, y=y, visual="change"}) end end
  find(parameters.target_x, parameters.target_y)
  for x,y in helper.adjacent_tiles(parameters.target_x, parameters.target_y) do find(x,y) end
  return result
end

EoHS.make_spell("repelling_gust", {
  image = "attacks/rock_thrown.png",
  name = _"Repelling Gust",
  description = _"You blow every unit in a diameter-3 circle, to a random location 12-18 hexes further away from you. Each unit is sent further in the same direction as it is from you now. (It has no effect on yourself.) If you blow your own units, they lose all their moves and actions for the turn. Repelling Gust won't place a unit on a terrain it can't normally enter; if it can't find a suitable hex within 0.5 radians of the default direction, it will try wider angles up to a quarter-circle away, and if there are still none, it will try locations closer than 12 hexes.",
  
  base_cost = { action_points=6, mana=14 },
  base_range = 3,
  target_type = EoHS.target_types.hex,
  
  affected_hexes = affected_hexes_func,
  
  make_extra_attributes = function(parameters, make_aspect)
    local affected_hexes = affected_hexes_func(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local num_blown = 0
    for i,hex in ipairs(affected_hexes) do
      local unit = EoHS.get_seen_unit(hex.x,hex.y)
      if unit then
        local value,details,validity
        validity = "valid"
        local name = EoHS.unit_appellation(unit)
        if EoHS.unit_is_immobile(unit) then
          make_aspect.type_value_and_details(EoHS.substitute(_"$1| is immobile", {EoHS.unit_appellation(unit)}), "", _"Repelling Gust doesn't move immobile units.")
        else
          num_blown = num_blown + 1
        end
      end
    end
    make_aspect.type_value_and_details(_"Units blown:", num_blown, "", (num_blown > 0) and "valid" or "undesirable")
  end,
  
  happen = function(parameters)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    local actor = EoHS.get_unit(parameters.actor_id)
    local affected_hexes = affected_hexes_func(parameters)
    EoHS.shuffle(affected_hexes)
    local used_locations_disunified = {}
    for i,hex in ipairs(affected_hexes) do
      local unit = EoHS.get_unit(hex.x, hex.y)
      if unit and not EoHS.unit_is_immobile(unit) then
        unit.moves = 0
        local wunit = EoHS.create_wunit(unit)
        EoHS.set_unit_action_points_immediate(unit, 0)
        -- synchronize_choice in case the trig is different between systems
        hex.dst = EoHS.synchronize_choice(function()
          local locs = EoHS.find_reach(unit.x, unit.y, EoHS.passable_only(actor.side), 18)
          local acceptable_locs = {}
          local cost_tolerance = 12
          local angle_tolerance = 0.5
          local angle_from_actor = EoHS.angle_between(unit.x, unit.y, actor.x, actor.y)
          while not acceptable_locs[1] do
            for i,loc in ipairs(locs) do
              if loc.cost >= cost_tolerance then
                local angle = EoHS.angle_between(loc.x, loc.y, actor.x, actor.y)
                local angle_difference = angle-angle_from_actor
                if angle_difference > math.pi then angle_difference = angle_difference - 2*math.pi end
                if angle_difference < -math.pi then angle_difference = angle_difference + 2*math.pi end
                if math.abs(angle_difference) <= angle_tolerance then
                  if EoHS.wunit_can_move_on_hex(wunit,loc.x,loc.y) then
                    if not (EoHS.get_unit(loc.x, loc.y) or used_locations_disunified[loc.x..","..loc.y]) then
                      used_locations_disunified[loc.x..","..loc.y] = true
                      table.insert(acceptable_locs, loc)
                    end
                  end
                end
              end
            end
            if angle_tolerance < (math.pi/2) then
              angle_tolerance = angle_tolerance + 0.1
            else
              cost_tolerance = cost_tolerance - 1
            end
            if cost_tolerance < 0 then return {} end
          end
          
          local choice = math.random(1, #acceptable_locs)
          local result = acceptable_locs[choice]
          return result
        end)
      end
    end
    local anim_tables = {}
    for i,hex in ipairs(affected_hexes) do
      if hex.dst then
        local unit = EoHS.get_unit(hex.x, hex.y)
        local dx, dy = EoHS.pixels_to_hex(hex.x, hex.y, hex.dst.x, hex.dst.y)
        local default_image_modded = EoHS.unit_default_image_stuff(unit)
        local animation = { start_time=0, { "frame", { image=default_image_modded, duration=100, sound="throw-1.wav,throw-2.wav,throw-3.wav,throw-4.wav" }}}
        local function x(frac)
          return (dx * frac)
        end
        local function y(frac)
          return (dy * frac) - (300 - (1200*((frac - 0.5)^2)))
        end
        for i = 1,10 do
          local x1,x2,y1,y2 = x((i - 1) / 10),x(i / 10),y((i - 1) / 10),y(i / 10)
          table.insert(animation, { "frame", {
            image=default_image_modded,
            duration=150,
            x=x1.."~"..x2, y=y1.."~"..y2,
          }})
        end
        table.insert(anim_tables, {
          x=hex.x, y=hex.y,
          animation = animation
        })
      end
    end
    EoHS.animate_units(anim_tables)
    for i,hex in ipairs(affected_hexes) do
      if hex.dst then
        local unit = EoHS.get_unit(hex.x, hex.y)
        EoHS.remove_unit(hex.x, hex.y)
        unit.x = hex.dst.x
        unit.y = hex.dst.y
        EoHS.put_unit(unit, {immediate=true,allow_new_location=true,allow_unknown_id=true})
      end
    end
    for i,hex in ipairs(affected_hexes) do
      if hex.dst then
        wesnoth.fire("redraw", { side = EoHS.get_unit(hex.dst.x, hex.dst.y).side })
      end
    end
    for i,hex in ipairs(affected_hexes) do
      if hex.dst then
        EoHS.fire_event("moveto", hex.dst.x, hex.dst.y)
      end
    end
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}
