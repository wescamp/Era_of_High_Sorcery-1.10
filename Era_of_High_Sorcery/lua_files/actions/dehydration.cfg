this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- dehydration.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.make_spell("dehydration", {
  image = "attacks/curse.png",
  name = _"Dehydration",
  description = _"You enchant a unit to lose its zone of control and be slowed at the end of every turn. It can only be cured by ending a turn in a water hex (including fords, swamp, sunken ruins, and oases).",
  
  is_enchantment = true,
  
  base_cost = { action_points=6, mana=13 },
  base_range = 1,
  target_type = EoHS.target_types.unit_probably_enemy,
  
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="harm"}}
  end,
  
  make_extra_attributes = function(parameters, make_aspect, list_entry_only)
    local actor = EoHS.get_unit(parameters.actor_id)
    local unit = EoHS.get_seen_unit(parameters.target_x,parameters.target_y,actor.side)
    if unit and EoHS.get_unit_variable(unit, "dehydrated") then
      make_aspect.type_and_details(_"Already dehydrated", "", "impossible")
    end
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
    EoHS.set_unit_variable(unit, "dehydrated", true)
    table.insert(EoHS.force_subtag(unit, "modifications"), {"object",{
      id="EoHS_dehydration",
      { "effect", {
        apply_to="zoc",
        value=false,
      }},
      { "effect", {
        apply_to = "image_mod",
        add = "~CS(0, -80, -255)",
      }},
    }})
    unit.zoc = false
    EoHS.update_conditional_abilities(unit)
    EoHS.update_unit_graphics(unit)
    EoHS.put_unit(unit)
    wesnoth.float_label(unit.x, unit.y, "<span color='#882200'>".._"dehydrated".."</span>")
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "hiss-die.wav" }) end)
    EoHS.finish_casting(parameters.actor_id)
  end,
})

EoHS.remove_dehydration = function(unit)
  EoHS.set_unit_variable(unit, "dehydrated")
  EoHS.remove_subtags(unit, "modifications.object", "EoHS_dehydration")
  unit.zoc = nil
  local movement_costs = EoHS.get_subtag(unit, "movement_costs")
  movement_costs.swamp_water   = nil
  movement_costs.shallow_water = nil
  EoHS.update_conditional_abilities(unit)
  EoHS.update_unit_graphics(unit)
end

EoHS.at_turn_refresh("dehydrated", function(units)
  for i,unit in ipairs(units.with_variable.dehydrated or {}) do
    -- I didn't feel the need to give these the full "also an object" treatment.
    -- With fords on most maps, they're not even very necessary.
    local movement_costs = EoHS.get_subtag(unit, "movement_costs")
    if movement_costs.swamp_water   * 2 > unit.max_moves then movement_costs.swamp_water   = math.floor(unit.max_moves/2); EoHS.put_unit(unit) end
    if movement_costs.shallow_water * 2 > unit.max_moves then movement_costs.shallow_water = math.floor(unit.max_moves/2); EoHS.put_unit(unit) end
  end
end)

EoHS.at_side_turn_end("dehydrated", function(units)
  for i,unit in ipairs(units.with_variable.dehydrated or {}) do
    local t = wesnoth.get_terrain(unit.x, unit.y)
    if string.match(t, "^[WS]") or string.match(t, "^Ch[ws]") or string.match(t, "%^Do") then
      EoHS.remove_dehydration(unit)
      EoHS.put_unit(unit)
      wesnoth.float_label(unit.x, unit.y, "<span color='#00ff00'>".._"hydrated".."</span>")
    else
      EoHS.set_unit_status_immediate(unit, "slowed", true)
    end
  end
end)

EoHS.make_conditional_ability("dehydration", function(unit)
  if EoHS.get_unit_variable(unit, "dehydrated") then
    return { "dummy", {
      name = _"dehydrated",
      description = _"This unit has no zone of control and is slowed at the end of every turn. It can only be cured by ending a turn in a water hex (including fords, swamp, sunken ruins, and oases).",
    }}
  end
end)

-->>)}
