this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- regeneration.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.make_spell("regeneration", {
  image = "attacks/fangs-spider.png",
  name = _"Regeneration",
  description = _"You enchant a unit to have regenerates +16 for six turns. It also gains 10 current and max hitpoints for the duration. Casting the spell again on the same unit increases the duration by six turns. When the spell ends, if the unit has more than its normal max hitpoints, it loses the extra HP, but otherwise it doesn't lose any.",
  
  is_enchantment = true,
  
  base_cost = { action_points=6, mana=10 },
  base_range = 1,
  target_type = EoHS.target_types.unit_probably_ally,
  
  affected_hexes = function(parameters)
    return {{x=parameters.target_x,y=parameters.target_y,visual="help"}}
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
    local turns_already = EoHS.get_unit_variable(unit, "regeneration_turns")
    EoHS.set_unit_variable(unit, "regeneration_turns", (turns_already or 0) + 6)
    if not turns_already then
      wesnoth.float_label(unit.x, unit.y, "<span color='#00FF00'>".._"regenerates +16".."</span>")
      local healed_to = math.min(unit.max_hitpoints + 10, unit.hitpoints + 10)
      local healing = (healed_to-unit.hitpoints)
      unit.hitpoints = math.max(unit.hitpoints, healed_to)
      if healing > 0 then wesnoth.float_label(unit.x, unit.y, "<span color='#00FF00'>"..healing.."</span>") end
    end
    EoHS.update_regeneration(unit)
    EoHS.update_unit_graphics(unit)
    EoHS.put_unit(unit, {immediate=true})
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "heal.wav" }) end)
    EoHS.finish_casting(parameters.actor_id)
  end,
})
-- TODO: cleaner, consistent handling of max HP changes (what if HP goes down during an ordinary update because of scenario effect % changes?)
-- TODO minor: unduplicate code with some other enchantments (Wizard Sword...)
EoHS.remove_regeneration = function(unit)
  EoHS.set_unit_variable(unit, "regeneration_turns")
  EoHS.remove_subtags(unit, "modifications.object", "EoHS_regeneration")
  EoHS.remove_subtags(unit, "abilities.regenerate", "EoHS_regeneration")
  local amount_above_max = math.max(0, unit.hitpoints - unit.max_hitpoints)
  unit.max_hitpoints = nil
  unit.max_hitpoints = EoHS.create_wunit(unit).max_hitpoints
  unit.hitpoints = math.min(unit.hitpoints, unit.max_hitpoints+amount_above_max)
  EoHS.update_unit_graphics(unit)
end
local regeneration_ability = function(turns_left) return {"regenerate",{
  value = 16,
  id = "EoHS_regeneration",
  name = EoHS.substitute(_"regen +16 ($1|)", {turns_left}),
  description = EoHS.substitute(_"The unit will heal itself 16 HP per turn, and has 10 extra max HP. If it is poisoned, it will remove the poison instead of healing.\n\nThis ability was granted by a spell, and is temporary. It will heal the unit $1| more times.", {turns_left}),
  affect_self = true,
  poison = "cured",
}} end
EoHS.update_regeneration = function(unit)
  local turns_left = EoHS.get_unit_variable(unit, "regeneration_turns")
  local ability = regeneration_ability(turns_left)
  local modifications = EoHS.get_subtag(unit, "modifications")
  EoHS.remove_subtags(modifications, "object", "EoHS_regeneration")
  table.insert(modifications, {"object",{id="EoHS_regeneration",
    {"effect",{apply_to="new_ability",
      {"abilities",{
        ability
      }},
    }},
    {"effect",{apply_to="hitpoints",
      increase_total = 10,
    }},
  }})
  EoHS.remove_subtags(unit, "abilities")
  unit.max_hitpoints = nil
end

EoHS.at_turn_refresh("regeneration_turns", function(units)
  for i,unit in ipairs(units.with_variable.regeneration_turns or {}) do
    if unit.side == wesnoth.current.side then
      local turns_left = EoHS.get_unit_variable(unit, "regeneration_turns") - 1
      if turns_left > 0 then
        EoHS.set_unit_variable(unit, "regeneration_turns", turns_left)
        EoHS.update_regeneration(unit)
      else
        EoHS.remove_regeneration(unit)
      end
      EoHS.put_unit(unit)
    end
  end
end)

-->>)}
