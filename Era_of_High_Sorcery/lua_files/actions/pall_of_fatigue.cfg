this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- pall_of_fatigue.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local affected_hexes_func = function(parameters, known_or_actual)
  local actor = EoHS.get_unit(parameters.actor_id)
  local result = {}
  for i,hex in ipairs(EoHS.find_reach(actor.x, actor.y, ((known_or_actual == "actual") and EoHS.passable_only or EoHS.known_passable_only)(actor.side), 9)) do
    local unit = ((known_or_actual == "actual") and EoHS.get_unit(hex.x, hex.y) or EoHS.get_seen_unit(hex.x, hex.y, actor.side))
    if unit and wesnoth.is_enemy(unit.side, actor.side) then table.insert(result, {x=hex.x, y=hex.y, visual="harm"}) end
  end
  return result
end
local get_fatigue_attack = EoHS.skill_attack_func("necromancy", function(attack) attack.damage = math.floor(0.5+attack.damage*attack.number/5); attack.number = 1 end)

EoHS.make_spell("pall_of_fatigue", {
  image = "attacks/staff-necromantic.png",
  name = _"Pall of Fatigue",
  description = _"Every enemy unit within nine hexes of you is subject to a cold magic attack, like your ranged chill wave but weaker. The attack has only one swing and one-fifth the total power.",
  
  base_cost = { action_points=6, mana=6 },
  
  affected_hexes = affected_hexes_func,
  
  make_extra_attributes = function(parameters, make_aspect, list_entry_only)
    if list_entry_only then return end -- Somewhat undesirable, but don't do the big pathfinding all the time. TODO maybe find a way to provide the same pathfinding work to all spells
    local affected_hexes = affected_hexes_func(parameters, "known")
    local actor = EoHS.get_unit(parameters.actor_id)
    local number_damaged = 0
    for i,hex in ipairs(affected_hexes) do
      local unit = EoHS.get_seen_unit(hex.x,hex.y,actor.side)
      if unit then
        local value,details="",""
        local validity = "valid"
        local name = EoHS.unit_appellation(unit)
        if EoHS.unit_is_immune_to_direct_spell_damage(unit) then
          value = _"None"
          details = EoHS.unit_is_immune_to_direct_spell_damage_description(unit)
        else
          if not list_entry_only then
            local attack_context = EoHS.game_action_simulations.fleshed_out_attack_context({
              attacker={x=actor.x,y=actor.y,attack=get_fatigue_attack(actor)},
              defender={x=unit.x,y=unit.y}})
            value = attack_context.attacker.damage.."-"..attack_context.attacker.attacks
          end
          number_damaged = number_damaged + 1
        end
        make_aspect.type_value_and_details(EoHS.substitute(_"Damage to $1|", {name}), value, details, validity)
      end
    end
    make_aspect.type_value_and_details(_"Units affected:", number_damaged, "", (number_damaged > 0) and "valid" or "impossible")
  end,
  
  happen = function(parameters)
    local affected_hexes = affected_hexes_func(parameters, "actual")
    local actor = EoHS.get_unit(parameters.actor_id)
    local attacks = {}
    
    local casting_image_1 = EoHS.unit_casting_image_stuff(actor, 1)
    local casting_image_2 = EoHS.unit_casting_image_stuff(actor, 2)
    local dx, dy = EoHS.pixels_to_hex(actor.x, actor.y, parameters.target_x, parameters.target_y)
    local animation = {
      base_score = 10,
      offset=0,
      start_time = -600,
      { "frame", { image=casting_image_1, duration=200, }},
      { "frame", { image=casting_image_2, duration=800, sound = "wail-long.wav", }},
      { "frame", { image=casting_image_1, duration=200, }},
      fatigue_start_time = -600,
      { "fatigue_frame", { image="halo/fire-aura.png~CS(-255,-255,-255)~SCALE(1400,1400)", duration=1200, alpha="0~1,1~0" }},
    }
    EoHS.add_temporary_anims(actor, { {"attack_anim", animation} })
    EoHS.put_unit(actor, {immediate=true})
    for i,hex in ipairs(affected_hexes) do
      local unit = EoHS.get_unit(hex.x,hex.y)
      if unit then
        table.insert(attacks, {context={
          attacker={x=actor.x,y=actor.y},
          defender={x=unit.x,y=unit.y}
        }, extras={is_spell = true, spend_moves_and_attacks = false, update_context_func = function(attack_context)
          local actor = EoHS.get_unit(parameters.actor_id)
          attack_context.attacker.attack = actor and get_fatigue_attack(actor)
        end}})
      end
    end
    EoHS.parallel_attacks(attacks)
    actor = EoHS.get_unit(parameters.actor_id)
    if actor then
      EoHS.remove_temporary_anims(actor)
      EoHS.put_unit(actor, {immediate=true})
    end
  end,
})

-->>)}
