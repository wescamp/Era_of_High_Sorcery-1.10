this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- dialogs.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local g = function(contents) return { "grid", contents } end
local r = function(contents) return { "row", contents } end
local c = function(contents) return { "column", contents } end

EoHS.set_canvas_over_button = function(canvas, id)
  for i,button_state in ipairs({"","-disabled","-pressed","-active"}) do
    local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")
    local mods = ""
    if w111 and (button_state == "-disabled") then button_state=""; mods="~GS()" end
    local button_canvas = EoHS.shallow_copy(canvas)
    table.insert(button_canvas, 1, {"image",{
      w = "(width)",
      h = "(height)",
      name = (w111 and "buttons/button_normal/button_H22" or "buttons/button")..button_state..".png"..mods
    }})
    wesnoth.set_dialog_canvas(i, button_canvas, id)
  end
end

local fake_listbox_background = {"rectangle",{
  x = 0,
  y = 0,
  w = "(width)",
  h = "(height)",
  fill_color = EoHS.macros.GUI__BACKGROUND_COLOR_ENABLED,
}}
EoHS.fake_listbox_canvas_unselected = {fake_listbox_background}
EoHS.fake_listbox_canvas_selected = EoHS.deep_copy(EoHS.macros.GUI__LISTBOX_SELECTED_CELL)
table.insert(EoHS.fake_listbox_canvas_selected, 1, fake_listbox_background)

EoHS.fake_listbox_entry = function(dialog_context, size_str, canvas_extras, selected, switch_func)
  local canvas
  local contents = {id = dialog_context.make_unique_id(), label=size_str}
  local result = dialog_context.button(contents, switch_func)
  if selected then
    canvas = EoHS.deep_copy(EoHS.fake_listbox_canvas_selected)
  else
    canvas = EoHS.deep_copy(EoHS.fake_listbox_canvas_unselected)
  end
  for i,canvas_extra in ipairs(canvas_extras) do
    table.insert(canvas, canvas_extra)
  end
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_canvas(1, canvas, contents.id)
    wesnoth.set_dialog_canvas(3, canvas, contents.id)
    wesnoth.set_dialog_canvas(4, canvas, contents.id)
  end)
  
  return result
end

EoHS.escape_string_for_formula = function(str)
  -- We can handle a translatable string userdata,
  -- or a string with parentheses but no singlequotes (it's not parsed as a formula expression),
  -- or a string with singlequotes but no parentheses (as a formula string literal),
  -- but as far as I can tell, formula is such a half-baked language that there
  -- isn't even a way to escape quotes in a string literal.
  -- So we hackily "escape" them by fake-translating them so that they become a userdata.
  if type(str) == "string" then
    local parens = string.match(str, "[%(%)]")
    local quotes = string.match(str, "'")
    if parens and quotes then return _(str) --string.gsub(str,"'","`")
    elseif parens then return "('"..str.."')" end
  end
  return str
end

EoHS.unit_preview_pane = function(dialog_context, unit)
  local line = function(text, color)
    local id = dialog_context.make_unique_id()
    dialog_context.preshow(function()
      wesnoth.set_dialog_canvas(1, {{"text",{
        x=0,y=EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,w="(text_width)",h="(text_height)",
        font_size=EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
        color=color or EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT,text=EoHS.escape_string_for_formula(text),
        text_markup = true
      }}},id)
    end)
    return r{c{horizontal_grow=true, {"label",{definition="default_small",label=text,id=id}} }}
  end
  local traits_line, abilities_line
  for i,trait in ipairs(EoHS.get_subtags(unit, "modifications.trait")) do
    local name = trait[unit.gender.."_name"] or trait.name
    if name then traits_line = (traits_line and traits_line..", " or "")..name end
  end
  for i,ability in ipairs(EoHS.get_subtags(unit, "abilities.*")) do
    local name = ability[unit.gender.."_name"] or ability.name
    if name then abilities_line = (abilities_line and abilities_line..", " or "")..name end
  end
  local rows = {
    r{c{horizontal_alignment="left", {"image",{label=EoHS.unit_thumbnail(unit, true)}} }},
    r{c{horizontal_alignment="left", dialog_context.button({label=_"Profile"}, function() EoHS.show_unit_type_help(unit.type) end) }},
    line("<b>"..unit.name.."</b>"),
    line(EoHS.unit_typename(unit), "245,230,193,255"),
    line("  "..wesnoth.races[unit.race].name, "166,146,117,255"),
    line(EoHS.substitute(_"level $1|", {unit.level})),
    line(unit.alignment), -- TODO translatable
    line(traits_line or " "),
    line(abilities_line or " "),
    line(EoHS.substitute(_"HP: $1|/$2|", {unit.hitpoints,unit.max_hitpoints})), -- TODO colors
    line(EoHS.substitute(_"XP: $1|/$2|", {unit.experience,unit.max_experience})), -- TODO colors
    line(EoHS.substitute(_"Moves: $1|/$2|", {unit.moves,unit.max_moves})),
  }
  for attack in helper.child_range(unit, "attack") do
    table.insert(rows, line(EoHS.substitute(_"$1|-$2| $3|", {attack.damage,attack.number,attack.description}), "245,230,193,255"))
    table.insert(rows, line(EoHS.substitute(_"  $1|-$2|", {attack.range,attack.type}), "166,146,117,255")) -- TODO translatable
    local specials = EoHS.get_subtag(attack, "specials")
    if specials then
      local names
      for i,special in ipairs(specials) do
        -- TODO only the active ones (how does the game do this?)
        local name = special[2].name
        if name and (name ~= "") then names = (names and names.."," or "")..name end
      end
      if names then
        table.insert(rows, line("  "..names, "166,146,117,255")) -- TODO translatable
      end
    end
  end
  return g(rows)
end

EoHS.unit_info_canvas = function(unit, extra_strings)
  local image_size_str = "(if(height-6 < image_original_width, height-6, image_original_width))"
  local canvas = { {"image",{
    x = "((height - image_width) / 2)",
    y = "((height - image_height) / 2)",
    w = image_size_str,
    h = image_size_str,
    name = EoHS.unit_thumbnail(unit)
  }} }
  local strings = {
    EoHS.unit_appellation(unit),
    "("..unit.x..","..unit.y..")",
  }
  for i,extra_string in ipairs(extra_strings) do
    table.insert(strings, extra_string)
  end
  for i,str in ipairs(strings) do
    local buffer=5
    local fontgapwanted=2
    local numstr=#strings
    local fontsize=14
    local totalloss = buffer*2 + numstr*fontsize
    local heightwanted = totalloss+(numstr-1)*fontgapwanted
    local fontgapstr="(if(height<"..heightwanted..",(height-"..totalloss..")/"..(numstr-1)..","..fontgapwanted.."))"
    table.insert(canvas, {"text",{
      x = "(height-1)",
      y = "(("..(i-1).."*("..fontsize.."+"..fontgapstr.."))+"..buffer..")",
      w = "(text_width)",
      h = "(text_height)",
      font_size = fontsize,
      color = "221, 221, 221, 255",
      text = EoHS.escape_string_for_formula(str),
      text_markup = true
    }})
  end
  return canvas
end

local hex_canvas_cache
EoHS.start_caching_hex_canvases = function()
  hex_canvas_cache = {}
end
EoHS.stop_caching_hex_canvases = function()
  hex_canvas_cache = nil
end

local add_hex_canvas_impl = function(canvas, x, y, side)
  local make_image = function(name)
    table.insert(canvas, {"image",{ x = "0", y = "0", w = "(width)", h = "(height)", name = name }})
  end
  
  if EoHS.hex_is_unshrouded(x, y, side) then
    make_image(EoHS.terrain_symbol_image(wesnoth.get_terrain(x, y)))
    local items = EoHS.get_items(x,y)
    local unfogged = EoHS.hex_is_unfogged(x, y, side)
    if items then for i,item in ipairs(items) do
      if unfogged or (item[2].visible_in_fog ~= false) then make_image(item[2].image) end
    end end
    
    if unfogged then
      local unit = EoHS.get_seen_unit(x, y, side)
      if unit then
        canvas[1][2].name = canvas[1][2].name
        make_image(EoHS.unit_thumbnail(unit).."~O(3)") -- Using the 58x58 default to exaggerate the unit size so it shows up better on the tiny button, and reducing transparency to exaggerate the ellipse
      end
    else
      make_image("terrain/fog/fog1.png")
    end
  else
    make_image("terrain/void/void.png")
  end
end

EoHS.hex_canvas = function(x, y, side, image_canvas_element_prototype)
  local cached,idx
  if hex_canvas_cache then
    idx = x..","..y..","..side
    cached = hex_canvas_cache[idx]
  end
  if not cached then
    cached = {}
    add_hex_canvas_impl(cached, x, y, side)
    if hex_canvas_cache then hex_canvas_cache[idx] = cached end
  end
  
  local result = EoHS.deep_copy(cached)
  if not image_canvas_element_prototype then return result end
  for i,image in ipairs(result) do
    for k,v in pairs(image_canvas_element_prototype) do image[2][k] = v end
  end
  return result
end

EoHS.add_hex_canvas = function(canvas, x, y, side, image_canvas_element_prototype)
  local hc = EoHS.hex_canvas(x, y, side, image_canvas_element_prototype)
  for i,elem in ipairs(hc) do table.insert(canvas, elem) end
end

EoHS.add_canvas_hex_border_25x25 = function(canvas, color, thickness)
  table.insert(canvas, {"line",{ x1 =  6, y1 =  0, x2 = 18, y2 =  0, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 = 18, y1 =  0, x2 = 24, y2 = 12, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 = 24, y1 = 12, x2 = 18, y2 = 24, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 = 18, y1 = 24, x2 =  6, y2 = 24, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 =  6, y1 = 24, x2 =  0, y2 = 12, color = color, thickness = thickness }})
  table.insert(canvas, {"line",{ x1 =  0, y1 = 12, x2 =  6, y2 =  0, color = color, thickness = thickness }})
end
EoHS.canvas_hex_border_25x25 = function(color, thickness)
  local result = {}
  EoHS.add_canvas_hex_border_25x25(result, color, thickness)
  return result
end

EoHS.target_selection_button = function(dialog_context, x, y, side, image_mods, canvas_extras, select_func)
  local canvas
  local contents = {id = dialog_context.make_unique_id(), definition="down_arrow"}
  local result = dialog_context.button(contents, select_func or (function() end))
  local canvas = EoHS.hex_canvas(x, y, side)
  for i,canvas_image in ipairs(canvas) do
    canvas_image[2].name = canvas_image[2].name and canvas_image[2].name..(image_mods or "")
  end
  if canvas_extras then for i,canvas_extra in ipairs(canvas_extras) do
    table.insert(canvas, canvas_extra)
  end end
  local hover_canvas = EoHS.deep_copy(canvas)
  for i,canvas_image in ipairs(hover_canvas) do
    canvas_image[2].name = canvas_image[2].name and canvas_image[2].name.."~CS(50,50,0)"
  end
  EoHS.add_canvas_hex_border_25x25(hover_canvas, "255, 255, 0, 255", 2)
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_canvas(1, canvas, contents.id)
    wesnoth.set_dialog_canvas(3, hover_canvas, contents.id)
    wesnoth.set_dialog_canvas(4, hover_canvas, contents.id)
    -- TODO differentiate 3 and 4?
  end)
  
  return result
end

local function is_even(v) return (v % 2) == 0 end
local y_bounds_in_radius = function(x, cx, cy, radius)
  local vdist = radius - math.floor(math.abs(x-cx) / 2)
  return cy - vdist + (is_even(cx) and not is_even(x) and 1 or 0),
         cy + vdist - (is_even(x) and not is_even(cx) and 1 or 0)
end

EoHS.target_selection_grid = function(dialog_context, cx, cy, radius, side, image_mods_and_canvas_extras_func, select_func, move_center_func)
  local columns = {}
  local w,h = wesnoth.get_map_size()
  local x_min = math.max(1,cx-radius)
  local x_max = math.min(w,cx+radius)
  local x_button_min = is_even(cx-x_min) and x_min+1 or x_min
  local x_button_max = is_even(cx-x_max) and x_max-1 or x_max
  local y_min_even = math.max(1-1,cy-radius)
  local y_max_even = math.min(h+1,cy+radius)
  local y_min_odd = math.max(1-1,cy-radius)
  local y_max_odd = math.min(h+1,cy+radius)
  if is_even(cx) then
    if y_min_odd == 1-1 then y_min_even = y_min_even - 1 else y_min_odd = y_min_odd + 1 end
  else
    if y_max_even == h+1 then y_max_odd = y_max_odd + 1 else y_max_even = y_max_even - 1 end
  end
  
  local make_leftarrow  = function() return dialog_context.button({definition="left_arrow" }, function() move_center_func(-1, 0) end) end
  local make_rightarrow = function() return dialog_context.button({definition="right_arrow"}, function() move_center_func( 1, 0) end) end
  local make_uparrow    = function() return dialog_context.button({definition="up_arrow"   }, function() move_center_func( 0,-1) end) end
  local make_downarrow  = function() return dialog_context.button({definition="down_arrow" }, function() move_center_func( 0, 1) end) end
  local y_min = function(x) return is_even(x) and y_min_even or y_min_odd end
  local y_max = function(x) return is_even(x) and y_max_even or y_max_odd end
  local arrow_locs = {}
  local make_arrow_loc = function(x,yf,f) arrow_locs[x..","..(yf(x))] = f end
  make_arrow_loc(x_button_min,   y_min, make_leftarrow )
  make_arrow_loc(x_button_min,   y_max, make_leftarrow )
  make_arrow_loc(x_button_max,   y_min, make_rightarrow)
  make_arrow_loc(x_button_max,   y_max, make_rightarrow)
  make_arrow_loc(x_button_min+1, y_min, make_uparrow   )
  make_arrow_loc(x_button_max-1, y_min, make_uparrow   )
  make_arrow_loc(x_button_min+1, y_max, make_downarrow )
  make_arrow_loc(x_button_max-1, y_max, make_downarrow )
  for x=x_min,x_max do
    local rows = {}
    local y_min_shown,y_max_shown = y_bounds_in_radius(x, cx, cy, radius)
    if y_min_shown < 1 then y_min_shown = 1 end
    if y_max_shown > h then y_max_shown = h end
    for y=y_min(x),y_max(x) do
      local widget
      local arrow_func = arrow_locs[x..","..y]
      if arrow_func then widget = arrow_func()
      elseif (y >= y_min_shown) and (y <= y_max_shown) then
        local image_mods, canvas_extras = image_mods_and_canvas_extras_func(x, y)
        widget = EoHS.target_selection_button(dialog_context, x, y, side, image_mods, canvas_extras, function() select_func(x,y) end)
      else
        widget = {"spacer",{height=25, width=25}}
      end
      table.insert(rows, r{c{ border="top,bottom", border_size=3, widget }})
    end
    table.insert(columns, c{g(rows)})
  end
  return g{r(columns)}
end

EoHS.validity_color = function(validity)
  if validity == "valid" then
    return EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT
  elseif validity == "undesirable" then
    return "255, 200, 0, 255"
  elseif validity == "impossible" then
    return "255, 0, 0, 255"
  else
    EoHS.err("invalid validity")
  end
end

EoHS.label_with_validity = function(dialog_context, validity, wml_table, alignment)
  local result = EoHS.deep_copy(wml_table)
  if not result.id then
    result.id = dialog_context.make_unique_id()
  end
  
  -- Hack: Manually determine the size based on a few presets that we use.
  -- This by no means determines, in general, the original size of the text.
  local size = 14
  if result.definition == "default_large" then size = EoHS.macros.GUI_NORMAL__FONT_SIZE__LARGE end
  
  dialog_context.preshow(function()
    wesnoth.set_dialog_canvas(1, { {"text",{
              x = (alignment == "left") and "0" or ((alignment == "right") and "(width-text_width)" or EoHS.macros.GUI__TEXT_HORIZONTALLY_CENTRED),
              y = "0",
              w = "(width)",
              h = "(text_height)",
              font_size = size,
              color = EoHS.validity_color(validity),
              text = "(text)",--result.label,
    }} }, result.id)
  end)
  return {"label",result}
end

EoHS.toggle_button = function(dialog_context, contents)
  if not contents.id then contents.id = dialog_context.make_unique_id() end
  
  local canvas_text = {"text",{
    x = 25,
    y = EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
    w = "(if(width < 25, 0, width - 25))",
    h = "(text_height)",
    font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
    color = EoHS.macros.GUI__FONT_COLOR_DISABLED__TITLE,
    text = "(text)",
  }}
  dialog_context.preshow(function()
    wesnoth.set_dialog_canvas(2, { {"image",{name=        "buttons/checkbox.png~GS()~CS(-20,-20,-20)"}},canvas_text }, contents.id)
    wesnoth.set_dialog_canvas(5, { {"image",{name="buttons/checkbox-pressed.png~GS()~CS(-20,-20,-20)"}},canvas_text }, contents.id)
  end)
  return {"toggle_button",contents}
end

EoHS.fake_set_toggle_button_active = function(active, id)
  local canvas_text = {"text",{
    x = 25,
    y = EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
    w = "(if(width < 25, 0, width - 25))",
    h = "(text_height)",
    font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
    color = active and EoHS.macros.GUI__FONT_COLOR_ENABLED__TITLE or EoHS.macros.GUI__FONT_COLOR_DISABLED__TITLE,
    text = "(text)",
  }}
  local mods = active and "" or "~GS()~CS(-20,-20,-20)"
  wesnoth.set_dialog_canvas(1, { {"image",{name="buttons/checkbox.png"        ..mods}},canvas_text }, id)
  wesnoth.set_dialog_canvas(3, { {"image",{name="buttons/checkbox.png"        ..mods}},canvas_text }, id)
  wesnoth.set_dialog_canvas(4, { {"image",{name="buttons/checkbox-pressed.png"..mods}},canvas_text }, id)
  wesnoth.set_dialog_canvas(6, { {"image",{name="buttons/checkbox-pressed.png"..mods}},canvas_text }, id)
end

EoHS.make_dialog_context = function(enter_callback, cancel_callback)
  local top_level = {
    {"tooltip",{id="tooltip_large"}},
    {"helptip",{id="helptip_large"}},
  }

  local preshow_list = {}
  local preshow = function(func) table.insert(preshow_list, func) end
  local preshow_func = function() for i,func in ipairs(preshow_list) do func() end end
  
  local postshow_list = {}
  local postshow = function(func) table.insert(postshow_list, func) end
  local postshow_func = function() for i,func in ipairs(postshow_list) do func() end end
  
  local button_list = {}
  button_list[-1] = enter_callback
  button_list[-2] = cancel_callback
  local make_button_return_value = function(func)
    table.insert(button_list, func)
    return #button_list
  end
  
  local next_id_number = 0
  local make_unique_id = function()
    next_id_number = next_id_number + 1
    return "dialog_context_fiat_id_"..next_id_number
  end
  return {
    preshow = preshow,
    postshow = postshow,
    make_button_return_value = make_button_return_value,
    make_unique_id = make_unique_id,
    add_top_level = function(wml_tag) table.insert(top_level, wml_tag) end,
    button = function(wml_table, func)
      local result = EoHS.deep_copy(wml_table)
      result.return_value = make_button_return_value(func)
      return {"button",result}
    end,
    show = function(grid)
      --EoHS.err(wesnoth.debug(grid))
      table.insert(top_level, grid)
      button_list[wesnoth.show_dialog(top_level, preshow_func, postshow_func)]()
    end,
  }
end

-->>)}
