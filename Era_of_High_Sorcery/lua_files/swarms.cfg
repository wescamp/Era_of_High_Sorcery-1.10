 this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- swarms.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")

--TODO put this in a more appropriate file
EoHS.priority_queue = function(priority_func)
  local function heap_insert(h,v,priority)
    h.size = h.size + 1
    if h.top_priority < priority then
      local temp = h.top
      local tempp = h.top_priority
      h.top = v
      h.top_priority = priority
      v = temp
      priority = tempp
    end
        if not h.child1 then h.child1 = {size=1,top=v,top_priority=priority}
    elseif not h.child2 then h.child2 = {size=1,top=v,top_priority=priority}
    else heap_insert((h.child1.size <= h.child2.size) and h.child1 or h.child2,v,priority) end
  end
  local function heap_pop(h)
    h.size = h.size - 1
    local child
        if not h.child1 then child = "child2"
    elseif not h.child2 then child = "child1"
    else child = (h.child1.top_priority > h.child2.top_priority) and "child1" or "child2" end
    h.top=h[child].top; h.top_priority=h[child].top_priority
    if h[child].size == 1 then h[child] = nil
    else heap_pop(h[child]) end
  end
  local heap
  return {
    insert = function(v,priority)
      priority = priority or (priority_func and priority_func(v) or v)
        if not heap then heap = {size=1,top=v,top_priority=priority}
      else heap_insert(heap, v, priority) end
    end,
    top = function() return heap and heap.top end,
    pop = function()
      if heap then
        local result = heap.top
        if heap.size == 1 then heap = nil
        else heap_pop(heap) end
        return result
      end
    end,
  }
end

EoHS.attack_priority = function(unit, wunit, dst_x, dst_y, victim, wvictim)
-- TODO put wunit at proper location
  local attack_num = 1
  local best_num
  local best_priority = 0
  for attack in helper.child_range(unit, "attack") do
    local att_stats, def_stats = wesnoth.simulate_combat(wunit, attack_num, wvictim)
    local   our_power = ((wvictim.hitpoints-def_stats.average_hp)/wvictim.max_hitpoints + def_stats.hp_chance[0])*victim.cost
    local their_power = ((wunit  .hitpoints-att_stats.average_hp)/wunit  .max_hitpoints + att_stats.hp_chance[0])*unit  .cost
    their_power = their_power + unit.cost -- "we're probably going to die anyway on their turn"
    local priority = 1000 * our_power / their_power
    if priority > best_priority then
      best_priority = priority
      best_num = attack_num
    end
    attack_num = attack_num + 1
  end
  return best_priority, best_num
end

EoHS.move_priority = function(unit, wunit, dst_x, dst_y)
  local result = 0
  
  local terrain = wesnoth.get_terrain(dst_x,dst_y)
  local terrain_info = wesnoth.get_terrain_info(terrain)
  result = result + math.max(0, math.min(unit.max_hitpoints - unit.hitpoints, terrain_info.healing))
  if terrain_info.village and not (wesnoth.get_village_owner(dst_x,dst_y) == unit.side) then result = result + 10 end
  
  local unit_there = EoHS.get_unit(dst_x, dst_y)
  if unit_there then
    if (dst_x == unit.x) and (dst_y == unit.y) then
      result = result - 100000000 -- Dislike staying under a real unit
    else
      result = result - 200000000 -- Dislike even more to climb under a different real unit
    end
  else -- and you can't attack from under a real unit
    local best_attack = 0
    for x,y in helper.adjacent_tiles(dst_x, dst_y) do
      local wvictim = wesnoth.get_unit(x,y)
      if wvictim and wesnoth.is_enemy(wvictim.side, unit.side) then
        local victim = EoHS.get_unit(x,y)
        if victim then
          best_attack = math.max(best_attack, (EoHS.attack_priority(unit, wunit, dst_x, dst_y, victim, wvictim)))
        end
      end
    end
    result = result + best_attack
    if best_attack > 0 then
      -- In combat only, we prefer better-defense and healing terrain, and prefer not to wander frivolously.
      result = result + terrain_info.healing + (100 - wesnoth.unit_defense(wunit, terrain))/20
      if (dst_x == unit.x) and (dst_y == unit.y) then result = result + 0.1 end
    end
  end
  
  return result
end

EoHS.get_swarms = function(side)
  local result = {}
  local w,h = wesnoth.get_map_size()
  for x=1,w do for y=1,h do
    local unit = EoHS.get_hex_variable(x,y, "swarm_unit")
    if unit and (unit.side == side) then table.insert(result, unit) end
  end end
  return result
end
-- TODO swarms' facing, draw HP bars and overlays
EoHS.set_swarm = function(unit)
  local item_image = "misc/blank-hex.png~BLIT("..EoHS.unit_thumbnail(unit)..",7,7)"
  EoHS.set_hex_variable(unit.x, unit.y, "swarm_item_image", item_image)
  EoHS.set_hex_variable(unit.x, unit.y, "swarm_unit", unit)
  EoHS.place_item({x=unit.x, y=unit.y, image=item_image, visible_in_fog=false})
end
EoHS.unset_swarm = function(x, y)
  EoHS.remove_item({x=x, y=y, image=EoHS.get_hex_variable(x, y, "swarm_item_image")})
  EoHS.set_hex_variable(x, y, "swarm_unit")
  EoHS.set_hex_variable(x, y, "swarm_item_image")
end
--[[EoHS.create_swarm = function(unit)
  unit = EoHS.create_wunit(unit).__cfg
  EoHS.update_all_type_adjustments(unit)
  EoHS.update_unit_graphics(unit)
  EoHS.set_swarm(unit)
end]]
EoHS.flatten_swarm = function(unit)
  EoHS.remove_unit(unit.x, unit.y)
  EoHS.set_unit_variable(unit, "is_swarm", true)
  EoHS.set_swarm(unit)
end
EoHS.flatten_swarms = function(side)
  local active_swarms = EoHS.get_units({ side=side, EoHS.is_on_the_map, EoHS.has_unit_variable("is_swarm") })
  for i,unit in ipairs(active_swarms) do EoHS.flatten_swarm(unit) end
end
EoHS.swarm_is_present = function(x, y)
  return EoHS.get_hex_variable(x, y, "swarm_unit.x") and true or false
end

EoHS.move_swarms = function(side)
  EoHS.flatten_swarms(side) -- just in case
  local swarms = EoHS.get_swarms(side)
  EoHS.shuffle(swarms)
  local wunits = {}
  for i,unit in ipairs(swarms) do
    wunits[unit] = EoHS.create_wunit(unit) -- TODO: store them for longer
  end
  local priority_map = {}
  for i,unit in ipairs(swarms) do
    local reach
    local wunit = wunits[unit]
    if w111 then reach = wesnoth.find_reach(wunit) -- Note: find_reach includes the source hex and hexes with allies on them
    else
      local existing_unit = wesnoth.get_unit(unit.x, unit.y)
      if existing_unit then wesnoth.extract_unit(existing_unit) end
      wesnoth.put_unit(wunit)
      reach = wesnoth.find_reach(wunit)
      wesnoth.extract_unit(wunit)
      if existing_unit then wesnoth.put_unit(existing_unit) end
    end
    EoHS.assert(reach[1], "A swarm should be able to reach somewhere...")
    if reach[1] then
      local unit_entry = {}
      priority_map[unit] = unit_entry
      EoHS.shuffle(reach)
      for i,reach_info in ipairs(reach) do
        local x,y = reach_info[1], reach_info[2]
        local xy = x..","..y
        local priority = EoHS.move_priority(unit,wunit,x,y)
        unit_entry[xy] = priority
        table.insert(unit_entry, {x=x,y=y,priority=priority})
        local hex_entry = priority_map[xy]
        if not hex_entry then hex_entry = {}; priority_map[xy] = hex_entry end
        table.insert(hex_entry, unit)
      end
    end
  end
  
  local choices = {}
  local choose = function(id,x,y)
    local old_u = choices[id]
    local old_xy = choices[x..","..y]
    if old_u then choices[old_u.x..","..old_u.y] = nil end
    if old_xy then choices[old_xy] = nil end
    choices[id] = {x=x,y=y}
    choices[x..","..y] = id
  end
  for i,unit in ipairs(swarms) do
    if priority_map[unit] then
      local frontier = EoHS.priority_queue(function(path) return path.value end)
      local paths = {}
      local paths_by_hex = {}
      local best_finished_path
      local insert_claimant = function(claimant_id, path_prefix)
        local claimant_targets = priority_map[claimant_id]
        local claimant_current_choice = choices[claimant_id]
        local claimant_current_priority = claimant_current_choice and claimant_targets[claimant_current_choice.x..","..claimant_current_choice.y] or 0
        for i,hex in ipairs(claimant_targets) do
          frontier.insert({ x=hex.x, y=hex.y, claimant_id=claimant_id,
            value = (path_prefix and path_prefix.value or 0) + hex.priority - claimant_current_priority,
            previous = path_prefix })
        end
      end
      insert_claimant(unit)
      while frontier.top() do
        local path = frontier.pop()
        local xy = path.x..","..path.y
        if not paths_by_hex[xy] then
          paths_by_hex[xy] = path
          local claimant_id = choices[xy]
          -- Assuming we've done the earlier units correctly,
          -- moving a claimant will NEVER result in an improved result,
          -- so if the path is already worse than the best path, we can ignore it, regardless of whether it involves moving something.
          if (not best_finished_path) or (path.value > best_finished_path.value) then
            if not claimant_id then
              best_finished_path = path
            else
              insert_claimant(claimant_id, path)
            end
          end
        --local competitors = priority_map[x..","..y]
        --for i,competitor_id in ipairs(competitors) do
        end
      end
      EoHS.assert(best_finished_path, "Bugs? The units should at least be able to pathfind to all being where they started...")
      while best_finished_path do
        choose(best_finished_path.claimant_id, best_finished_path.x, best_finished_path.y)
        best_finished_path = best_finished_path.previous
      end
    end
  end
  
  local movements = {}
  for i,unit in ipairs(swarms) do
    local choice = choices[unit]
    if choice and ((choice.x ~= unit.x) or (choice.y ~= unit.y)) then
      table.insert(movements, {unit=unit, x=choice.x, y=choice.y, src_x=unit.x, src_y=unit.y})
    else
      if not EoHS.get_unit(unit.x, unit.y) then
        EoHS.unset_swarm(unit.x, unit.y)
        EoHS.put_unit(unit, {allow_unknown_id=true, allow_new_location=true, immediate=true})
      end
    end
  end
  
  -- Grr... I thought move_units_fake would move them simultaneously.
  -- But no... Alternating?!?!
  -- TODO what to do.
  --[[
  local move_units_fake = {}
  for i,movement in ipairs(movements) do
    EoHS.unset_swarm(movement.unit)
  end
  for i,movement in ipairs(movements) do
    local path = wesnoth.find_path(wunits[movement.unit], movement.x, movement.y)
    if path then
      local xs = {}
      local ys = {}
      for i,l in ipairs(path) do
        table.insert(xs,l[1])
        table.insert(ys,l[2])
      end
      
      table.insert(move_units_fake, {"fake_unit",{
        side      = movement.unit.side,
        type      = movement.unit.type,
        gender    = movement.unit.gender,
        variation = movement.unit.variation,
        image_mods = EoHS.get_unit_variable(movement.unit, "move_units_fake_override"),
        x = table.concat(xs, ","),
        y = table.concat(ys, ","),
      }})
    end
  end
  wesnoth.fire("move_units_fake", move_units_fake)]]
  
  if movements[1] then
    local anim_tables = {}
    for i,movement in ipairs(movements) do
      EoHS.assert(not EoHS.get_unit(movement.x, movement.y), "A swarm unit should never move onto a unit")
      local unit = movement.unit
      unit.x = movement.x
      unit.y = movement.y
      unit.resting = false
      
      local path = wesnoth.find_path(wunits[unit], movement.x, movement.y)
      if path then
        local default_image_modded = EoHS.unit_default_image_stuff(unit)
        local x,y
        local anim = { start_time = 0, }
        for i,l in ipairs(path) do
          local x2,y2 = EoHS.pixels_to_hex(unit.x, unit.y, l[1], l[2])
          if x then
            table.insert(anim, {"frame",{
              image=default_image_modded,
              duration=200,
              x=x.."~"..x2, y=y.."~"..y2,
            }})
          else
            -- So that the animation doesn't jerk at the beginning...
            table.insert(anim, {"frame",{
              image=default_image_modded,
              duration=200,
              x=x2, y=y2,
            }})
          end
          x,y = x2,y2
        end
        table.insert(anim_tables, { unit = unit, animation = anim })
      end
    end
    EoHS.animate_units(anim_tables, { put_extras={allow_unknown_id=true, allow_new_location=true}, after_scrolling=function()
      for i,movement in ipairs(movements) do
        EoHS.unset_swarm(movement.src_x, movement.src_y)
      end
    end, })
    wesnoth.fire("redraw", {side=side})
    for i,movement in ipairs(movements) do
      local real_wunit = wesnoth.get_unit(movement.unit.x, movement.unit.y)
      if real_wunit and (EoHS.unit_id(real_wunit) == EoHS.unit_id(movement.unit)) then
        EoHS.fire_event("moveto", real_wunit.x, real_wunit.y)
      end
    end
  end
  
  -- First pass: Only swarm units who have a single attack option attack.
  -- That way, we reduce the cases of wasting attacks when a unit is killed.
  -- A kill may cause more units to be reduced to only a single option,
  -- so repeat until there's none.
  -- TODO: reduce duplicate code between the passes
  while true do
    local any_attacks = false
    for i,unit in ipairs(swarms) do
      local real_wunit = wesnoth.get_unit(unit.x, unit.y)
      if real_wunit and (EoHS.unit_id(real_wunit) == EoHS.unit_id(unit)) and (real_wunit.attacks_left > 0) then
        local real_unit = EoHS.get_unit(unit.x, unit.y)
        local attack_option,ax,ay
        for x,y in helper.adjacent_tiles(real_wunit.x, real_wunit.y) do
          local wvictim = wesnoth.get_unit(x,y)
          if wvictim and wesnoth.is_enemy(wvictim.side, real_unit.side) then
            local victim = EoHS.get_unit(x,y)
            if victim then
              local attack_priority, attack_num = EoHS.attack_priority(real_unit, real_wunit, real_wunit.x, real_wunit.y, victim, wvictim)
              if 0 < attack_priority then
                if attack_option then attack_option = "too many"
                else attack_option,ax,ay = attack_num,x,y end
              end
            end
          end
        end
        if attack_option and (attack_option ~= "too many") then
          any_attacks = true
          EoHS.game_action_simulations.attack_unit({
            attacker = { x=real_wunit.x, y=real_wunit.y, weapon_index_zero_based = attack_option - 1 },
            defender = { x=          ax, y=          ay, weapon_index_zero_based = "choose"     },
          })
          EoHS.units_may_advance_now()
        end
      end
    end
    if not any_attacks then break end
  end
  for i,unit in ipairs(swarms) do
    local real_wunit = wesnoth.get_unit(unit.x, unit.y)
    if real_wunit and (EoHS.unit_id(real_wunit) == EoHS.unit_id(unit)) and (real_wunit.attacks_left > 0) then
      local real_unit = EoHS.get_unit(unit.x, unit.y)
      
      local best_priority = 0
      local best_num
      local best_x
      local best_y
      for x,y in helper.adjacent_tiles(real_wunit.x, real_wunit.y) do
        local wvictim = wesnoth.get_unit(x,y)
        if wvictim and wesnoth.is_enemy(wvictim.side, real_unit.side) then
          local victim = EoHS.get_unit(x,y)
          if victim then
            local attack_priority, attack_num = EoHS.attack_priority(real_unit, real_wunit, real_wunit.x, real_wunit.y, victim, wvictim)
            if attack_priority > best_priority then
              best_priority = attack_priority
              best_num = attack_num
              best_x = x
              best_y = y
            end
          end
        end
      end
      if best_num then
        EoHS.game_action_simulations.attack_unit({
          attacker = { x=real_wunit.x, y=real_wunit.y, weapon_index_zero_based = best_num - 1 },
          defender = { x=      best_x, y=      best_y, weapon_index_zero_based = "choose"     },
        })
        EoHS.units_may_advance_now()
      end
    end
  end
end

-->>)}
