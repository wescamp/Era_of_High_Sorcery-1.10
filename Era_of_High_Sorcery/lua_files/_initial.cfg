this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- _initial.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

-- Some functions are frequently used even at preload time. We define them here so they can be used in any file.
-- We also provide EoHS.soon, which delays things just a little so that the function inside can use functions
-- defined in any other file.
EoHS.end_of_preload_funcs = {}
EoHS.soon = function(func)
  table.insert(EoHS.end_of_preload_funcs, func)
end

EoHS.events = {}
EoHS.event_functions = {}
EoHS.set_simple_event = function(name, unison, synchronized, force_empty_stack, func)
  table.insert(EoHS.event_functions, func)
  table.insert(EoHS.events, {
    name = name,
    first_time_only = "no",
    { "lua", {
      code = [[--EoHS.set_simple_event("]]..name..[[", ...)
EoHS.begin_event(]]..tostring(unison)..","..tostring(synchronized)..","..tostring(force_empty_stack)..[[)
EoHS.event_functions[]]..#EoHS.event_functions..[[]()
EoHS.end_event()]]
    }},
  })
end

local pack = function(...) return {...} end
EoHS.filter_func = function(func)
  return function(...)
    local old_context = EoHS.context
    EoHS.context = {in_event=false, unison=false, synchronized=false, disunified_unit_tables={}}
    local results = pack(func(...))
    EoHS.context = old_context
    return unpack(results)
  end
end
EoHS.make_filter_func = function(name, func)
  _G[name] = EoHS.filter_func(func)
end

EoHS.deep_copy = function(input)
  if type(input) ~= "table" then return input end
  local tables = {}
  local function process_entry(entry)
    if type(entry) == "table" then
      if tables[entry] == nil then
        tables[entry] = {}
        for k,v in pairs(entry) do
          tables[entry][k] = process_entry(v)
        end
      end
      return tables[entry]
    else
      return entry
    end
  end
  return process_entry(input)
end

EoHS.universal_attack_specials = {}

-->>)}
