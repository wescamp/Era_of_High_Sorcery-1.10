this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- menu.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

-- TODO what file is best for this?
EoHS.rules = "Overview: In EoHS, your leader is a wizard who can learn and cast powerful spells over multiple hexes. Go to the 'Training' tab to learn spells and select recruits, then go to the 'actions' tab to cast them.\n \nAction points (AP): Each unit gets 11 AP each turn. Attacking costs 6 AP. Spells and other actions have their own AP costs, and usually don't take away your moves, only your AP and mana.\n \nMana: Each wizard earns mana every turn. Wizards can usually spend gold in place of mana if they have no mana left.\n \nRange: Most spells have a limited range, which is counted as the ghost flies - i.e. you can't cast through walls and you are limited by the distance around walls.\n \nDialog: On your own turn, you can invoke the EoHS dialog from the right-click menu. Your target defaults to the location you clicked on, and if you have multiple wizards / units with actions, the actor defaults to the last unit you selected - so you can efficiently use an action by selecting your unit, then right clicking its target and picking the action you want. (But you can also select the actor and target within the dialog.) Off-turn, you can invoke the dialog by quickly mousing back and forth between any two units; any changes you make off-turn will take effect at the beginning of your next turn.\n \nMiscellaneous rules: The PvP settings eliminate upkeep. Some spells can damage units, and you gain XP from killing enemy units, but not from killing your own units. Wizards are immune to direct damage from spells, and they can only lose a quarter of their max hitpoints each time they're attacked (or more at lower levels - level 1 wizards can lose a third and level 0 wizards can lose a half). Beyond that, combat stops immediately."

local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")
if not w111 then EoHS.rules_wrapped = string.gsub(EoHS.rules, string.rep("[^\n]",110).."[^\n%s]*", function(s) return s.."\n" end) end

EoHS.rules = _(EoHS.rules) -- This doesn't work. TODO fix (maybe just wait for 1.12)

local g = function(contents) return { "grid", contents } end
local r = function(contents) return { "row", contents } end
local c = function(contents) return { "column", contents } end
local l = function(label) return {"label",{label=label}} end
local spacer = { "spacer", {}}

-- Disunified
EoHS.remembered_menu_parameters = {}

-- TODO: let observers see (a version of) the preselect menu
EoHS.show_menu = function(is_preselect)
  local arbitrary_side_you_control
  local sides_you_control_list
  if is_preselect then 
    for side,info in ipairs(wesnoth.sides) do
      if info.controller == "human" then
        arbitrary_side_you_control = side
        sides_you_control_list = (sides_you_control_list and sides_you_control_list.."," or "")..side
      end
    end
  else
    arbitrary_side_you_control = wesnoth.current.side
    sides_you_control_list = wesnoth.current.side
  end
  
  -- Leaving sides_you_control_list blank correctly makes observers able to see everything.
  local actors = EoHS.get_units({ EoHS.is_on_the_map, EoHS.unit_has_actions_filter, side=sides_you_control_list })
  local trainers = EoHS.get_units({ EoHS.is_on_the_map, EoHS.unit_can_train_filter, side=sides_you_control_list })
  
  local sides_with_units = {}
  for side in ipairs(wesnoth.sides) do
    sides_with_units[side] = wesnoth.eval_conditional({ {"have_unit",{side=side}} })
  end
  
  local anyone_can_train = function()
    for i,trainer in ipairs(trainers) do
      if EoHS.unit_skill_points_left(trainer) > 0 then return true end -- TODO: consider ability to pick an alliance
    end
  end
  local anyone_can_train_originally = anyone_can_train()
  
  local selected_trainer
  local selected_actor
  local found_remembered_trainer
  local found_remembered_actor
  for i,trainer in ipairs(trainers) do
    if EoHS.unit_id(trainer) == EoHS.last_selected_id then selected_trainer = trainer  end
    if EoHS.unit_id(trainer) == EoHS.remembered_trainer_id then found_remembered_trainer = true end
  end
  for i,actor in ipairs(actors) do
    if EoHS.unit_id(actor) == EoHS.last_selected_id then selected_actor = actor end
    if EoHS.unit_id(actor) == EoHS.remembered_menu_parameters.actor_id then found_remembered_actor = true end
  end
  if not found_remembered_trainer then EoHS.remembered_trainer_id = nil end
  if not found_remembered_actor then EoHS.remembered_menu_parameters.actor_id = nil end
  
  local finished = false
  local ok = false
  local result = {}
  local mode, subject
  local secret
  local parameters = EoHS.remembered_menu_parameters
  parameters.target_x = wesnoth.current.event_context.x1 or parameters.target_x
  parameters.target_y = wesnoth.current.event_context.y1 or parameters.target_y
  local target_selection_center_x
  local target_selection_center_y
  local current_action_validity
  local old_skillsets = {}
  local old_dress_up_options = {}
  for i,unit in ipairs(trainers) do
    local skillset = EoHS.get_unit_skillset(unit)
    if not skillset then EoHS.err("skillset not inited") end
    old_skillsets[unit] = EoHS.copy_skillset(skillset)
    old_dress_up_options[unit] = EoHS.copy_dress_up_options(EoHS.get_unit_dress_up_options(unit))
    local prepared_training = EoHS.get_client_local_trainings(unit)
    if prepared_training and prepared_training.training then
      EoHS.set_unit_skillset(unit, prepared_training.training)
      EoHS.update_all_type_adjustments(unit)
    end
    if prepared_training and prepared_training.dress_up then
      EoHS.set_unit_dress_up_options(unit, prepared_training.dress_up)
      EoHS.update_unit_graphics(unit)
    end
  end
  local foreach_changed_trainer = function(func)
    for i,unit in ipairs(trainers) do
      local training = EoHS.get_unit_skillset(unit)
      if not EoHS.skillsets_are_identical(training, old_skillsets[unit]) then
        func(unit, training)
      end
    end
  end
  local foreach_changed_dressup = function(func)
    for i,unit in ipairs(trainers) do
      local dress_up_options = EoHS.get_unit_dress_up_options(unit)
      if not EoHS.dress_up_options_are_identical(dress_up_options, old_dress_up_options[unit]) then
        func(unit, dress_up_options)
      end
    end
  end
  local set_subject = function(new_subject)
    subject = new_subject
    if EoHS.unit_has_actions(new_subject) then
      parameters.actor_id = EoHS.unit_id(new_subject)
      target_selection_center_x = new_subject.x
      target_selection_center_y = new_subject.y
    end
    if EoHS.unit_can_train(new_subject) then
      EoHS.remembered_trainer_id = EoHS.unit_id(new_subject)
    end
  end
  local set_mode = function(new_mode)
    -- If you train and then go to actions, it needs to accurately reflect the stats you'll have after training.
    if (mode == "training") and (new_mode ~= "training") then
      foreach_changed_trainer(function(trainer)
        if EoHS.unit_skill_points_left(trainer) >= 0 then
          EoHS.update_all_type_adjustments(trainer)
        else
          EoHS.set_unit_skillset(trainer, old_skillsets[trainer])
        end
      end)
      foreach_changed_dressup(function(unit)
        EoHS.update_unit_graphics(unit)
      end)
    end
    if     mode == "actions" then EoHS.stop_caching_hex_canvases()  end
    if new_mode == "actions" then EoHS.start_caching_hex_canvases() end
    mode = new_mode
    
    if ((mode == "training") or (mode == "actions")) and not is_preselect then EoHS.remembered_dialog_mode = mode end
  end
  if is_preselect then
    set_mode("training")
  elseif EoHS.get_variable("debug_mode") then
    set_mode("debug")
  elseif selected_actor and not selected_trainer then
    set_mode("actions")
  elseif trainers[1] and (EoHS.remembered_dialog_mode == "training") then
    set_mode("training")
  elseif actors[1] and (EoHS.remembered_dialog_mode == "actions") then
    set_mode("actions")
  elseif anyone_can_train_originally then
    set_mode("training")
  elseif actors[1] then
    set_mode("actions")
  else
    set_mode("instructions")
  end
  
  if (mode == "training") and selected_trainer then set_subject(selected_trainer) end
  if (mode == "actions")  and selected_actor   then set_subject(selected_actor  ) end
  
  while not finished do
    if mode == "training" and not (subject and EoHS.unit_can_train(subject)) then
      set_subject(EoHS.remembered_trainer_id and EoHS.get_unit(EoHS.remembered_trainer_id) or trainers[1])
    end
    if mode == "actions" then
      if not (subject and EoHS.unit_has_actions(subject)) then set_subject(parameters.actor_id and EoHS.get_unit(parameters.actor_id) or actors[1]) end
      if not (parameters.action_id and EoHS.unit_has_action(subject, parameters.action_id)) then parameters.action_id = EoHS.unit_actions(subject)[1] end
      if not parameters.target_x then parameters.target_x = subject.x end
      if not parameters.target_y then parameters.target_y = subject.y end
    end
    local d = EoHS.make_dialog_context(function() finished = true; ok = true end, function() finished = true end)
    
    local modes_row = {}
    do
      local make_mode_button = function(button_mode, name, image)
        local canvas_extras = { {"text",{
          x = "(if(text_width < (width+2-height), ((width+2-height) - text_width) / 2 + (height-2), height-4))",
          y = EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
          w = "(text_width)",
          h = "(text_height)",
          font_size = 14,
          color = "221, 221, 221, 255",
          text = name,
        }}, {"image",{
          x = 2,
          y = 2,
          w = "(height-4)",
          h = "(height-4)",
          name = image,
        }} }
        table.insert(modes_row, c{ EoHS.fake_listbox_entry(d, name.."mmmmmm\nm\nm", canvas_extras, mode == button_mode, function() set_mode(button_mode) end) })
      end
      if trainers[1] then make_mode_button("training"    , _"Training"     , "attacks/woodensword.png") end
      if actors[1] then   make_mode_button("actions"     , _"Actions"      , "attacks/staff-elven-star.png") end
                          make_mode_button("instructions", _"Instructions" , "icons/letter_and_ale.png")
                          make_mode_button("settings"    , _"View settings", "icons/crossed_sword_and_hammer.png")
                          make_mode_button("misc"        , _"Misc"         , "icons/dress_silk_green.png")
      if EoHS.get_variable("debug_mode") and not is_preselect then -- TODO minor: allow debug dumping and examining off-turn
                          make_mode_button("debug"       , _"Debug"        , "attacks/gaze.png") end
      table.insert(modes_row, c{ {"button",{id="cancel",label=_" \nClose\n "}} })
    end
    local modes_grid = g{r(modes_row)}
    
    -- TODO subjects should be clumped horizontally, not spread out
    local subjects_row = {}
    do
      local make_subject_button = function(button_subject)
        local extra_strings = {}
        if mode == "training" then
          table.insert(extra_strings, EoHS.substitute("$1| SP",{EoHS.unit_skill_points_left(button_subject)}))
        end
        if mode == "actions" then
          table.insert(extra_strings, EoHS.substitute("$1| AP",{EoHS.get_unit_action_points(button_subject)}))
          local mana = EoHS.get_unit_variable(button_subject, "mana")
          if mana then
            table.insert(extra_strings, EoHS.substitute("$1| mana",{mana}))
          end
        end
        table.insert(subjects_row, c{ EoHS.fake_listbox_entry(d, "mmmmmmmmmmmmmm\nm\nm\nm", EoHS.unit_info_canvas(button_subject, extra_strings), subject == button_subject, function() set_subject(button_subject) end) })
      end
      if mode == "training" then for i,unit in ipairs(trainers) do make_subject_button(unit) end end
      if mode == "actions"  then for i,unit in ipairs(  actors) do make_subject_button(unit) end end
    end
    local subjects_grid =  g{r(subjects_row)} --{"scrollbar_panel",{{"definition",{r(subjects_row)}}}} -- would be nice, but exposes an assertion failure https://gna.org/bugs/index.php?21785
    
    local contents
    if mode == "training" then
      local training_grid = EoHS.training_dialog_grid(d, subject, old_skillsets[subject], is_preselect and "preselect")
      contents = g{
        r{c{subjects_grid}},
        r{c{training_grid}},
      }
    end
    if mode == "actions" then
      local switch_func = function(id)
        return function()
          parameters.action_id = id
        end
      end
      local w,h = wesnoth.get_map_size()
      local target_grid_func = function(image_mods_and_canvas_extras_func)
        return EoHS.target_selection_grid(d, target_selection_center_x, target_selection_center_y, 7, subject.side, image_mods_and_canvas_extras_func, function(x,y)
          parameters.target_x = x
          parameters.target_y = y
        end, function(dx,dy)
          target_selection_center_x = math.min(w-5, math.max(6, target_selection_center_x + dx*4))
          target_selection_center_y = math.min(h-5, math.max(6, target_selection_center_y + dy*4))
        end)
      end
      contents = EoHS.actions_grid(d,parameters,subjects_grid,target_grid_func,switch_func)
    end
    if mode == "settings" then
      contents = EoHS.settings_dialog_grid(d, EoHS.get_variable("settings"), false)
    end
    if mode == "instructions" then
      contents = g{r{c{border="all",border_size=8,{"label",{wrap=true, characters_per_line=120, label=EoHS.rules_wrapped or EoHS.rules}} }}}
    end
    if mode == "misc" then
      local misc_rows = {}
      table.insert(misc_rows, r{c{ border="top", border_size=14, {"label",{definition="title",label=_"Your stats"}} }})
      if arbitrary_side_you_control then
        -- TODO un-duplicate this line with dress-up.cfg
        table.insert(misc_rows, r{c{ l(_"(Only counts complete, networked games, ignoring AI sides and sides that changed controller mid-game.)") }})
        table.insert(misc_rows, r{c{ border="all", border_size=12, g{
          r{c{ horizontal_grow=true, EoHS.label_with_validity(d, "valid", {label=_"Days played: "}, "right")},
            c{ horizontal_grow=true, EoHS.label_with_validity(d, "valid", {label=EoHS.get_potentially_out_of_date_persistent_variable(arbitrary_side_you_control, "total_days_played")}, "right")}},
          r{c{ horizontal_grow=true, EoHS.label_with_validity(d, "valid", {label=_"Wizards defeated in PvP: "}, "right")},
            c{ horizontal_grow=true, EoHS.label_with_validity(d, "valid", {label=EoHS.num_players_defeated(arbitrary_side_you_control)}, "right")}},
          r{c{ horizontal_grow=true, EoHS.label_with_validity(d, "valid", {label=_"New players introduced to EoHS by playing with them: "}, "right")},
            c{ horizontal_grow=true, EoHS.label_with_validity(d, "valid", {label=EoHS.num_newbies_introduced(arbitrary_side_you_control)}, "right")}},
        }}})
      else
        table.insert(misc_rows, r{c{ l(_"(Due to Wesnoth limitations, you can't view your stats as an observer.)") }})
      end
      
      if not is_preselect then
        local next_side = wesnoth.current.side
        table.insert(misc_rows, r{c{ border="top", border_size=22, d.button({label=_"End turn and train", id="end_turn_and_train_button"}, function()
          -- NOT returned, not unified
          EoHS.set_variable("client_local_preselect_side_turn", next_side)
          table.insert(result, { "end_turn_and_train", {} })
          finished = true
        end) }})
        table.insert(misc_rows, r{c{ border="all", border_size=2, l(_"This allows you to choose your skills and/or appearance on the next\nplayer's turn, so that the other players don't have to wait for you.\nHowever, the changes won't take effect until your following turn.\nYou can also invoke the menu off-turn by quickly mousing\nback and forth five times between any two units.") }})
        local can_end_turn_and_train
        while true do
          next_side = next_side + 1
          if not wesnoth.sides[next_side] then next_side = 1 end
          if next_side == wesnoth.current.side then
            can_end_turn_and_train = false
            break
          end
          if sides_with_units[next_side] and (wesnoth.sides[next_side].controller == "human") then
            can_end_turn_and_train = false
            break
          end
          -- TODO: this check has some false-positives about them being AI, can we do better?
          if sides_with_units[next_side] and (wesnoth.sides[next_side].controller == "network") and not EoHS.get_side_variable(next_side, "was_ever_ai") then
            can_end_turn_and_train = true
            break
          end
        end
        if not can_end_turn_and_train then
          table.insert(misc_rows, r{c{ border="all", border_size=4, l(_"Currently, the next player is also you, so this isn't useful.") }})
          d.preshow(function() wesnoth.set_dialog_active(false, "end_turn_and_train_button") end)
        end
        d.postshow(function() secret = wesnoth.get_dialog_value("secret_magics_box") end)
        table.insert(misc_rows, r{c{ border="top", border_size=45, {"text_box",{id="secret_magics_box"}} }})
        table.insert(misc_rows, r{c{ border="bottom", border_size=15, {"button",{label=_"Invoke secret magics",id="ok"}} }})
      end
      table.insert(misc_rows, r{c{ border="bottom", border_size=15, {"scroll_label",{horizontal_scrollbar_mode="never",label=_"Message log:\n"..(EoHS.get_variable("message_log") or "")}} }})
      contents = g(misc_rows)
    end
    if mode == "debug" then
      local debug_input
      d.postshow(function() debug_input = wesnoth.get_dialog_value("debug_input_box") end)
      local debug_rows = {
        r{c{ {"text_box",{id="debug_input_box"}} }},
        r{c{ d.button({label=_"Debug EoHS variables"}, function()
          local debug_vars = EoHS.deep_copy(wesnoth.get_variable("EoHS"))
          if EoHS.debug_table(debug_vars) then
            table.insert(result, { "debug_set_vars", debug_vars })
            finished = true
          end
        end) }},
        r{c{ d.button({label=_"Dump EoHS variables"}, function()
          EoHS.debug(wesnoth.get_variable("EoHS"))
        end) }},
      }
      local debug_unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
      if debug_unit then
        table.insert(debug_rows, r{c{ d.button({label=_"Debug this unit"}, function()
          if EoHS.debug_table(debug_unit) then
            table.insert(result, { "debug_put_unit", debug_unit })
            finished = true
          end
        end) }})
        table.insert(debug_rows, r{c{ d.button({label=_"Debug this unit's variables"}, function()
          if EoHS.debug_unit_variables(debug_unit) then
            table.insert(result, { "debug_put_unit", debug_unit })
            finished = true
          end
        end) }})
        table.insert(debug_rows, r{c{ d.button({label=_"Dump this unit"}, function()
          EoHS.debug(debug_unit)
        end) }})
        table.insert(debug_rows, r{c{ d.button({label=_"Do benchmarks"}, function()
          local measure_time = EoHS.debug_benchmark
          measure_time("getting units", EoHS.get_unit, parameters.target_x, parameters.target_y)
          measure_time("getting blanks", EoHS.get_unit, 1, 1)
          measure_time("copying units", EoHS.deep_copy, debug_unit)
          measure_time("loading units from variable", wesnoth.get_variable, "unit")
          measure_time("putting units", wesnoth.put_unit, debug_unit)
        end) }})
      end
      table.insert(debug_rows, r{c{ d.button({label=_"Enable fighting"}, function()
        table.insert(result, { "debug_command", { command = "enable_fighting" }})
        finished = true
      end) }})
      if EoHS.profiling then
        table.insert(debug_rows, r{c{ d.button({label=_"Dump profiling"}, function()
          EoHS.dump_profiling()
          finished = true
        end) }})
      else
        table.insert(debug_rows, r{c{ d.button({label=_"Enable profiling"}, function()
          table.insert(result, { "debug_command", { command = "enable_profiling" }})
          finished = true
        end) }})
      end
      table.insert(debug_rows, r{c{ d.button({label=_"Change all terrain"}, function()
        
    local w,h = wesnoth.get_map_size()
    for x=1,w do for y=1,h do EoHS.add_terrain_change(x,y,{name=debug_input}) end end
        finished = true
      end) }})
      contents = g(debug_rows)
    end
    --EoHS.err(EoHS.inspect(contents))
    local top_message
    if not EoHS.local_version then
      top_message = EoHS.substitute(_"You're playing Era of High Sorcery $1| by Eli Dupree (Elvish Pillager). Get it on the add-on server now!", {EoHS.hosted_version})
    elseif wesnoth.compare_versions(EoHS.local_version, "<", EoHS.hosted_version) then
      top_message = EoHS.substitute(_"You're playing Era of High Sorcery $1| by Eli Dupree (Elvish Pillager). Update your old version ($2|) after this game.", {EoHS.hosted_version,EoHS.local_version})
    elseif wesnoth.compare_versions(EoHS.local_version, ">", EoHS.hosted_version) then
      top_message = EoHS.substitute(_"You're playing Era of High Sorcery $1| by Eli Dupree (Elvish Pillager). Remind the host to update to $2|!", {EoHS.hosted_version,EoHS.local_version})
    else
      top_message = EoHS.substitute(_"You're playing Era of High Sorcery $1| by Eli Dupree (Elvish Pillager). Visit  elidupree.com/EoHS", {EoHS.hosted_version})
    end
    d.preshow(function()
      
    wesnoth.set_dialog_canvas(1, { {"text",{
      x = "0", y = "0", w = "(text_width)", h = "(text_height)",
      font_size = 14,
      color = EoHS.macros.GUI__FONT_COLOR_ENABLED__TITLE,
      text = "<span font_style='italic'>"..top_message.."</span>", text_markup = true,
    }} }, "top_message")
    end)
    d.show(g{
      r{c{ {"label",{label=top_message.."mm", id="top_message"}} }},
      r{c{modes_grid}},
      r{c{g{r{c{ {"spacer",{height=400}} },c{contents}}}}}
    })
  end
  
  -- Any 'commands' observers issue are immediately forgotten
  if not arbitrary_side_you_control then return {} end
  
  foreach_changed_trainer(function(unit, skillset)
    if EoHS.unit_skill_points_left(unit) >= 0 then
      local training = EoHS.copy_skillset(skillset)
      training.trainer_id = EoHS.unit_id(unit)
      table.insert(result, { "training", training })
    end
  end)
  foreach_changed_dressup(function(unit, dress_up_options)
    local dressing = EoHS.copy_dress_up_options(dress_up_options)
    dressing.dresser_id = EoHS.unit_id(unit)
    table.insert(result, { "dress_up", dressing })
  end)
  if ok and (mode == "actions") and parameters.action_id then
    if current_action_validity ~= "impossible" then
      table.insert(result, { "action", parameters })
    end
  end
  if ok and secret then
    if secret == "carnelian" then
      table.insert(result, { "activate_debug_mode", {} })
    end
    for side,info in ipairs(wesnoth.sides) do
      if (info.controller == "human") and EoHS.is_valid_supporter_password(side, secret) then
        -- We need to make sure it doesn't get interpreted as a number and thus truncated, so stick a letter in front
        table.insert(result, { "add_supporter_password", { side = side, password = "n"..secret } })
        break
      end
    end
  end
  
  if (mode == "training") and anyone_can_train_originally and not anyone_can_train() then
    EoHS.remembered_dialog_mode = "actions"
  end
  
  EoHS.stop_caching_hex_canvases()
  return result
end

EoHS.menu_item_invoked = function()
  --EoHS.standardize_units()
  EoHS.update_and_share_persistent_variables_of_current_side()
  local choice = EoHS.synchronize_choice(EoHS.show_menu, function() EoHS.err("An AI invoked the EoHS menu item?!?") end)
  if choice then for i,instruction in ipairs(choice) do
    if instruction[1] == "training" then
      local unit = EoHS.get_unit(instruction[2].trainer_id)
      EoHS.train_unit_to_skillset(unit, instruction[2])
      EoHS.put_unit(unit)
    end
    if instruction[1] == "dress_up" then
      local unit = EoHS.get_unit(instruction[2].dresser_id)
      EoHS.set_unit_dress_up_options(unit, instruction[2])
      EoHS.update_unit_graphics(unit)
      EoHS.put_unit(unit)
    end
    if instruction[1] == "action" then
      EoHS.standardize_units()
      EoHS.do_action(instruction[2])
    end
    if instruction[1] == "end_turn_and_train" then
      wesnoth.fire("end_turn", {})
    end
    if instruction[1] == "add_supporter_password" then
      -- Transit successful, take the letter off the front
      EoHS.add_supporter_password(instruction[2].side, string.sub(instruction[2].password, 2))
    end
    if instruction[1] == "activate_debug_mode" then
       wesnoth.fire("print", {
         text = _"EoHS debug mode has been turned on!",
         size = 50,
         duration = 150,
         red=255,green=255,blue=255,
       })
      EoHS.set_variable("debug_mode", true)
      EoHS.menu_item_invoked()
    end
    if instruction[1] == "debug_put_unit" then
      EoHS.put_unit(instruction[2], {allow_unknown_id=true,allow_new_location=true,allow_overwrite=true}) -- TODO roll into debug_command
    end
    if instruction[1] == "debug_command" then
      EoHS.debug_command(instruction[2])
    end
    if instruction[1] == "debug_set_vars" then
      wesnoth.set_variable("EoHS", instruction[2]) -- TODO roll into debug_command
    end
  end end
end

-->>)}
