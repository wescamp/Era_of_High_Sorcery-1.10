this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- terrain.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.terrain_index = {}
for i,entry in ipairs(wesnoth.get_variable("EoHS.wesnoth_cfgs.terrain")) do
  EoHS.terrain_index[entry[2].string] = entry[2]
end

local get_terrain_memory = function(x,y)
  return EoHS.get_hex_variable(x,y,"terrain_changes")
end
local set_terrain_memory = function(x,y,value)
  return EoHS.set_hex_variable(x,y,"terrain_changes",value)
end

local get_base = function(terrain)
  return string.match(terrain, "^[^%^]+")
end
local get_overlay = function(terrain)
  return string.match(terrain, "%^(.+)")
end
local make_terrain = function(base, overlay)
  if overlay and overlay ~= "" then return base.."^"..overlay else return base end
end
local set_base = function(terrain, new_base)
  local overlay = get_overlay(terrain, "%^(.+)")
  if overlay then return new_base.."^"..overlay else return new_base end
end
local set_overlay = function(terrain, new_overlay)
  local base = get_base(terrain)
  if new_overlay then return base.."^"..new_overlay else return base end
end

EoHS.terrain_is_impassable = function(terrain)
  return string.match(terrain, "[_X]")
end

EoHS.terrain_symbol_image = function(terrain)
  if EoHS.terrain_index[terrain] then
    return "terrain/"..EoHS.terrain_index[terrain].symbol_image..".png"
  end
  local overlay = string.match(terrain, "%^.+")
  local base = string.match(terrain, "[^%^]+")
  local base_str = (base and EoHS.terrain_index[base] and "terrain/"..EoHS.terrain_index[base].symbol_image..".png")
  local overlay_str = (overlay and EoHS.terrain_index[overlay] and "terrain/"..EoHS.terrain_index[overlay].symbol_image..".png")
  if base_str and overlay_str then return base_str.."~BLIT("..overlay_str..",0,0)" end
  return overlay_str or base_str
end

EoHS.terrain_name = function(terrain)
  if EoHS.terrain_index[terrain] then return EoHS.terrain_index[terrain].editor_name or EoHS.terrain_index[terrain].name end
  local overlay = string.match(terrain, "%^.+")
  local base = string.match(terrain, "[^%^]+")
  local base_str = (base and EoHS.terrain_index[base] and EoHS.terrain_index[base].editor_name or EoHS.terrain_index[base].name)
  local overlay_str = (overlay and EoHS.terrain_index[overlay] and EoHS.terrain_index[overlay].editor_name or EoHS.terrain_index[overlay].name)
  if base_str and overlay_str then return base_str.."+"..overlay_str end
  return base_str or overlay_str or _"Unknown terrain"
end

local aliasof = function(terrain)
  local base = string.match(terrain, "[^%^]+")
  local overlay = string.match(terrain, "%^.+")
  local base_aliasof = EoHS.terrain_index[base].aliasof or EoHS.terrain_index[base].string
  if overlay then
    return string.gsub((EoHS.terrain_index[overlay].aliasof or EoHS.terrain_index[overlay].string), "_bas", base_aliasof)
  else
    return base_aliasof
  end
end

local same_aliasof = function(t1,t2)
  local t1_aliasofs,t2_aliasofs = {},{}
  for a in EoHS.comma_separated_values(aliasof(t1)) do t1_aliasofs[a] = true end
  for a in EoHS.comma_separated_values(aliasof(t2)) do t2_aliasofs[a] = true end
  for a in pairs(t1_aliasofs) do if not t2_aliasofs[a] then return false end end
  for a in pairs(t2_aliasofs) do if not t1_aliasofs[a] then return false end end
  return true
end
--[[
terrain_attributes = {
  height = {
    [-4] = "Q* except Qlf"
    [-3] = "Wo*"
    [-2] = "Ww*,Ai,*hw,*hs"
    [-1] = "Wwf,S*"
    [1] = "H*,Uh"
    [2] = "M*"
  },
  temperature = {
    [-1] = "W*g,A*,^F*a,Ha,Ms,*ha"
    [1] = "W*t,D*,^Ft*,Hd,Md,Cd*"
    [2] = "Ql*,Mv"
  },
  vegetation = {
    [1] = "^F*,Wwr*,S*,*hs"
    [2] = "^Fe*"
  },
}
]]
local in_list = function(str, list) for c in EoHS.comma_separated_values(list) do if string.match(str,"^"..c.."$") then return true end end; return false end
local destroy_bridges = function(terrain) if string.match(terrain, "%^B") then return set_overlay(terrain) else return terrain end end
local destroy_vegetation = function(terrain) if in_list(get_overlay(terrain) or "", "F.+,Uf.*,Efm,Gvs,Em,Emf,Edp,Edpp,Ewl,Ewf") then return set_overlay(terrain) else return terrain end end

local terrain_changes = {
  raise = function(terrain)
    local base,overlay=get_base(terrain),EoHS.lua_pattern_escape(get_overlay(terrain) or "invalid")
    local    base_in = function(list) return in_list(   base, list) end
    local overlay_in = function(list) return in_list(overlay, list) end
    if overlay == "Vm" then return "Ss^Vhs" end
    if base=="Wog" then return set_base(terrain, "Wwg") end
    if base=="Wo"  then return set_base(terrain, "Ww" ) end
    if base=="Wot" then return set_base(terrain, "Wwt") end
    terrain = destroy_bridges(terrain)
    if base=="Chw" then return set_base(terrain, "Chr") end
    if base=="Chs" then return set_base(terrain, "Chr") end
    if base=="Khw" then return set_base(terrain, "Khr") end
    if base=="Khs" then return set_base(terrain, "Khr") end
    if base_in("Wwg,Wwt,Wwr.*,Ww") then return set_base(terrain, "Wwf") end
    if base=="Wwf" then return set_base(terrain, "Re") end
    if base_in("S.+") then return overlay_in("V.+") and set_base(terrain, "Re") or "Re^Fp" end
    if base=="Ai" then return set_base(terrain, "Aa") end
    if base=="Rd" then return set_base(terrain, "Hhd") end
    if base_in("U.+") then return set_base(terrain, "Uh") end
    if base_in("D.+") then return set_base(terrain, "Hd") end
    if base_in("R.+,G.+,Iwr") then return set_base(terrain, "Hh") end
    if base_in("A.+") then return set_base(terrain, "Ha") end
    if base=="Ha" then return destroy_vegetation(set_base(terrain, "Ms")) end
    if base=="Hh" then return destroy_vegetation(set_base(terrain, "Mm")) end
    if base=="Hd" then return destroy_vegetation(set_base(terrain, "Md")) end
    return terrain
  end,
  sink = function(terrain)
    local base,overlay=get_base(terrain),EoHS.lua_pattern_escape(get_overlay(terrain) or "invalid")
    local    base_in = function(list) return in_list(   base, list) end
    local overlay_in = function(list) return in_list(overlay, list) end
    terrain = destroy_bridges(terrain)
    if base_in("Wwf,S.+") then
      if overlay_in("V.+") then return "Ww^Vm" end
      return set_base(terrain, "Ww")
    end
    if base=="Uh" then return set_base(terrain, "Uu") end
    if base=="Aa" then return destroy_vegetation(set_base(terrain, "Ai")) end
    if base_in("R.+,G.+,Iwr,Ur.*") then return destroy_vegetation(set_base(terrain, overlay_in("F.+,Uf.*,V.+") and "Ss" or "Wwf")) end
    if base_in("U.+,D.+") then return destroy_vegetation(set_base(terrain, "Ww")) end
    if base_in("C.+") and (base ~= "Chs") then return set_base(terrain, "Chw") end
    if base_in("K.+") and (base ~= "Khs") then return set_base(terrain, "Khw") end
    if base=="Ha" then return set_base(terrain, "Aa") end
    if base=="Hh" then return set_base(terrain, "Re") end
    if base=="Hhd" then return set_base(terrain, "Rd") end
    if base=="Hd" then return set_base(terrain, "Dd") end
    if base=="Ms" then return set_base(terrain, "Ha") end
    if base=="Mm" then return set_base(terrain, "Hh") end
    if base=="Md" then return set_base(terrain, "Hd") end
    return terrain
  end,
  heat = function(terrain)
    local base,overlay=get_base(terrain),EoHS.lua_pattern_escape(get_overlay(terrain) or "invalid")
    local    base_in = function(list) return in_list(   base, list) end
    local overlay_in = function(list) return in_list(overlay, list) end
    if overlay == "Fpa" then terrain = set_overlay(terrain, "Fp")
    elseif overlay_in("F.+a") then terrain = set_overlay(terrain, string.gsub(overlay, "a$", "w")) end
    if overlay_in("V.+a") then terrain = set_overlay(terrain, string.match(overlay, "(.+)a")) end
    if overlay == "Vct" then terrain = set_overlay(terrain, "Vdt") end
    if base=="Wog" then return set_base(terrain, "Wo") end
    if base=="Wo" then return set_base(terrain, "Wot") end
    if base=="Wwg" then return set_base(terrain, "Ww") end
    if base=="Ww" then return set_base(terrain, "Wwt") end
    if base=="Wwrg" then return set_base(terrain, "Wwr") end
    if base=="Wwr" then return set_base(terrain, "Wwrt") end
    if base=="Aa" then return set_base(terrain, "Re") end
    if base=="Ai" then return set_base(terrain, "Wwg") end
    if base_in("R.+,G.+,Iwr,Ur.*") then return set_base(terrain, "Dd") end
    if base=="Ha" then return set_base(terrain, "Hh") end
    if base_in("H.+") then return set_base(terrain, "Hd") end
    if base_in("[CK].+a") then return set_base(terrain, string.match(base, "(.+)a")) end
    if base_in("C.+r") then return set_base(terrain, "Cdr") end
    if base_in("C.+") and (base ~= "Chs") and (base ~= "Chw") then return set_base(terrain, "Cd") end
    if base_in("K.+r") then return set_base(terrain, "Kdr") end
    if base_in("K.+") and (base ~= "Khs") and (base ~= "Khw") then return set_base(terrain, "Kd") end
    --if base_in("H.+") and overlay_in("F.+") then return "Hd^Ftd" end
    if base=="Ms" then return set_base(terrain, "Mm") end
    if base=="Mm" then return set_base(terrain, "Md") end
    return terrain
  end,
  cool = function(terrain)
    local base,overlay=get_base(terrain),EoHS.lua_pattern_escape(get_overlay(terrain) or "invalid")
    local    base_in = function(list) return in_list(   base, list) end
    local overlay_in = function(list) return in_list(overlay, list) end
    
    if overlay == "Vdt" then terrain = set_overlay(terrain, "Vct") end
    if base=="Hd" then return set_base(terrain, "Hh") end
    if base=="Md" then return set_base(terrain, "Mm") end
    if base=="Cd" then return set_base(terrain, "Ch") end
    if base=="Kd" then return set_base(terrain, "Kh") end
    if base=="Cdr" then return set_base(terrain, "Chr") end
    if base=="Kdr" then return set_base(terrain, "Khr") end
    if base_in("D.+") then return set_base(terrain, "Re") end
      
    if overlay_in("Fet.*") then -- nothing, there's no snow version
    elseif overlay_in("Ft.*") then terrain = set_overlay(terrain, "Fds") -- nothing, there's no snow version
    elseif overlay_in("Fp,Vhh,Vhc,Vh,Ve,Vo") then terrain = set_overlay(terrain, overlay.."a")
    elseif overlay_in("F.+[^a],Vhhr,Vhcr,Vhr") then terrain = set_overlay(terrain, string.gsub(overlay, ".$", "a")) end
    
    if base_in("H.+") then return set_base(terrain, "Ha") end
    if base_in("R.+,G.+,Iwr") then return set_base(terrain, "Aa") end
    if base=="Chr" then return set_base(terrain, "Cha") end
    if base=="Khr" then return set_base(terrain, "Kha") end
    if base_in("[CK][eoh]") then return set_base(terrain, base.."a") end
    if base=="Mm" then return set_base(terrain, "Ms") end
    if base_in("W.+,S.+") then return set_base(terrain, "Ai") end
    return terrain
  end,
  grow = function(terrain)
    local base,overlay=get_base(terrain),EoHS.lua_pattern_escape(get_overlay(terrain) or "invalid")
    local    base_in = function(list) return in_list(   base, list) end
    local overlay_in = function(list) return in_list(overlay, list) end
    
    if overlay_in("F.+") then return set_overlay(terrain, "Fet") end
    if not overlay_in("V.+") then
      if base_in("Ww.*") then return destroy_bridges(set_base(terrain, string.gsub(base,"Wwf?","Wwr"))) end
      if base_in("Wo.*") then return destroy_bridges(set_base(terrain, string.gsub(base,"Wo","Wwr"))) end
      if base_in("S.+") then return destroy_bridges(set_base(terrain, "Wwr")) end
      if base_in("Hd,D.*,Rd,Hhd") then return set_overlay(terrain, "Ft") end
      if base_in("Aa,Ha") then return set_overlay(terrain, "Fpa") end
      if base_in("R.+,G.+,Iwr,Ur.*,H.*") then return set_overlay(terrain, "Fds") end
    end
    return terrain
  end,
  rot = function(terrain)
    local base,overlay=get_base(terrain),EoHS.lua_pattern_escape(get_overlay(terrain) or "invalid")
    local    base_in = function(list) return in_list(   base, list) end
    local overlay_in = function(list) return in_list(overlay, list) end
    
    if base_in("[CK]hw") then return set_base(terrain, string.gsub(base,"hw","hs")) end
    if base_in("Ww.*") then return set_base(terrain, "Ss") end
    if not overlay_in("V.+,Fet.*") then
      if base_in("H.*,D.*,Aa,R.+,G.+,Iwr,U.*,H.*") then return set_overlay(terrain, "Uf") end
    end
    return terrain
  end,
  clear = function(terrain)
    local base,overlay=get_base(terrain),EoHS.lua_pattern_escape(get_overlay(terrain) or "invalid")
    local    base_in = function(list) return in_list(   base, list) end
    local overlay_in = function(list) return in_list(overlay, list) end
    
    if base_in("S.+") then terrain = set_base(terrain, "Ww") end
    if base_in("Rp,Rr,Rrc") then terrain = set_base(terrain, "Rr")
    elseif base_in("R.+,G.+") then terrain = set_base(terrain, "Rd") end
    if base=="Hh" then terrain = set_base(terrain, "Hhd") end
    if base_in("Wwr.*") then terrain = set_base(terrain, string.gsub(base,"Wwr","Ww")) end
    if overlay=="Fet" then return set_overlay(terrain, "Fetd") end
    if overlay_in("F.+,Uf.*,Efm,Gvs,Em,Emf,Edp,Edpp,Ewl,Ewf,Do") then
      return set_overlay(terrain)
    end
    return terrain
  end,
  poison = function(terrain)
    local base,overlay=get_base(terrain),EoHS.lua_pattern_escape(get_overlay(terrain) or "invalid")
    local    base_in = function(list) return in_list(   base, list) end
    local overlay_in = function(list) return in_list(overlay, list) end
    
    if overlay_in("Efm,Gvs,Em,Emf,Edp,Edpp,Ewl,Ewf") then terrain = set_overlay(terrain) end
    if overlay=="Fet" then terrain = set_overlay(terrain, "Fetd")
    elseif overlay_in("F.+a") then terrain = set_overlay(terrain, "Fda")
    elseif overlay_in("F.+") then terrain = set_overlay(terrain, "Fdw") end
    if base=="Wot" then return set_base(terrain, "Wo") end
    if base=="Wo" then return set_base(terrain, "Wog") end
    if base=="Wwt" then return set_base(terrain, "Ww") end
    if base=="Ww" then return set_base(terrain, "Wwg") end
    if base=="Wwrt" then return set_base(terrain, "Wwr") end
    if base=="Wwr" then return set_base(terrain, "Wwrg") end
    if base=="Gg" then return set_base(terrain, "Gs") end
    if base=="Gs" then return set_base(terrain, "Gd") end
    if base=="Gd" then return set_base(terrain, "Re") end
    if base=="Rp" then return set_base(terrain, "Rr") end
    if base=="Hh" then return set_base(terrain, "Hhd") end
    if base_in("Vhh,Vhc,Vh") then terrain = set_base(terrain, base.."r") end
    return terrain
  end,
  freeze_water = function(terrain)
    local base=get_base(terrain)
    local base_in = function(list) return in_list(base, list) end
    if base_in("W.+,S.+") and (base ~= "Wwf") then return set_base(terrain, "Ai") end
    return terrain
  end,
}

local opposite_terrain_changes = {
  heat = "cool", cool = "heat",
  raise = "sink", sink = "raise",
}

EoHS.terrain_after_change = function(terrain, terrain_change_name)
  local result = terrain_changes[terrain_change_name](terrain)
  return result
end
local terrain_after_changes = function(terrain, memory)
  for i,change in ipairs(memory) do
    terrain = EoHS.terrain_after_change(terrain, change[2].name)
  end
  return terrain
end

local apply_terrain_changes = function(x,y)
  local memory = get_terrain_memory(x,y)
  if not memory then return end
  local terrain = terrain_after_changes(memory.original_terrain, memory)
  --if same_aliasof(terrain, memory.original_terrain) then terrain = memory.original_terrain end
  memory.latest_terrain = terrain
  set_terrain_memory(x,y,memory)
  wesnoth.set_terrain(x,y,terrain)
end

EoHS.add_terrain_change = function(x,y,terrain_change)
  EoHS.handle_non_EoHS_terrain_change(x,y,"relative")
  local memory = get_terrain_memory(x,y) or { original_terrain = wesnoth.get_terrain(x,y) }
  local counters = false
  if terrain_change.duration and opposite_terrain_changes[terrain_change.name] then
    for i=#memory,1,-1 do
      if memory[i][2].duration and (memory[i][2].name == opposite_terrain_changes[terrain_change.name]) then
        table.remove(memory, i)
        counters = true
        break
      end
    end
  end
  if not counters then
    terrain_change.turn_created = wesnoth.current.turn
    terrain_change.side_created = wesnoth.current.side
    table.insert(memory, {"change",terrain_change})
  end
  set_terrain_memory(x,y,memory)
  apply_terrain_changes(x,y)
end

EoHS.update_terrain_changes = function()
  local w,h = wesnoth.get_map_size()
  for x=1,w do for y=1,h do
    local memory = get_terrain_memory(x,y)
    if memory then
      local old_num = #memory
      EoHS.remove_subtags(memory, "change", function(change)
        if not change.duration then return false end
        local turn_diff = (wesnoth.current.turn - (change.turn_created + change.duration))
        if turn_diff > 0 then return true end
        if turn_diff == 0 and (wesnoth.current.side >= change.side_created) then return true end
        return false
      end)
      if #memory ~= old_num then
        set_terrain_memory(x,y,memory)
        apply_terrain_changes(x,y)
        if not memory[1] then set_terrain_memory(x,y) end
      end
    end
  end end
end

EoHS.has_temporary_terrain_change = function(x,y)
  local memory = get_terrain_memory(x,y)
  if memory then
    for i,change in ipairs(memory) do if change[2].duration then return true end end
  end
end
EoHS.remove_temporary_terrain_changes = function(x,y)
  local memory = get_terrain_memory(x,y)
  if memory then
    local old_num = #memory
    EoHS.remove_subtags(memory, "change", function(change) return change.duration end)
    if #memory ~= old_num then
      set_terrain_memory(x,y,memory)
      apply_terrain_changes(x,y)
      if not memory[1] then set_terrain_memory(x,y) end
    end
  end
end

EoHS.handle_non_EoHS_terrain_change = function(x,y,change_type)
  local memory = get_terrain_memory(x,y)
  if not memory then return end
  local current_terrain = wesnoth.get_terrain(x,y)
  if current_terrain ~= memory.latest_terrain then
    if change_type == "relative" then set_terrain_memory(x,y,nil)
    else
      memory.original_terrain = current_terrain
      set_terrain_memory(x,y,memory)
      apply_terrain_changes(x,y)
    end
  end
end

EoHS.handle_non_EoHS_terrain_changes = function(change_type)
  if not ((change_type == "absolute") or (change_type == "relative")) then
    EoHS.err("EoHS.handle_terrain_changes must be passed either 'absolute' (previous terrains were overwritten without regard to what the terrains were at the moment) or 'relative' (terrains were changed incrementally, e.g. replacing each terrain with a snowier version of the same terrain)")
  else
    local w,h = wesnoth.get_map_size()
    for x=1,w do for y=1,h do EoHS.handle_non_EoHS_terrain_change(x,y,change_type) end end
  end
end

-->>)}
