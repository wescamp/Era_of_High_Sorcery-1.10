this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- utils-ui.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")

EoHS.give_alert = function()
  wesnoth.play_sound("bell.wav")
end

EoHS.message = function(string)
  -- Doesn't use [chat] side= to decide who it's shown to; instead, we just use this function
  -- in a disunified manner (especially since we sometimes want to show different messages
  --   to different players, not just binary show/not show.)
  string = EoHS.substitute("$1|", {string}) -- wesnoth.message can't take tstrings, so convert them
  wesnoth.message("EoHS", string)
  -- TODO: add timestamps
  EoHS.set_variable("message_log", (EoHS.get_variable("message_log") or "")..(
    EoHS.substitute(_"Turn $1|, side $2|: ", {wesnoth.current.turn, wesnoth.current.side})..string.."\n"
  ))
end

EoHS.place_item = function(item)
  -- TODO: consider redraw
  wesnoth.fire("item", item)
  local items = EoHS.get_hex_variable(item.x, item.y, "items") or {}
  table.insert(items, {"item",item})
  EoHS.set_hex_variable(item.x, item.y, "items", items)
end
EoHS.remove_item = function(item)
  wesnoth.fire("remove_item", {x=item.x,y=item.y,image=(item.image or item.halo)})
  local items = EoHS.get_hex_variable(item.x, item.y, "items")
  EoHS.remove_subtags(items, "item", function(i) return (i.image == item.image) or (i.halo == item.halo) end)
  EoHS.set_hex_variable(item.x, item.y, "items", items)
end
EoHS.get_items = function(x,y)
  return EoHS.get_hex_variable(x, y, "items")
end

do
  local old_view_locked = false
  local EoHS_lock_counter = 0
  EoHS.lock_view = function()
    if not wesnoth.lock_view then return end
    if EoHS_lock_counter == 0 then
      old_view_locked = wesnoth.view_locked and wesnoth.view_locked()
      if not old_view_locked then wesnoth.lock_view(true) end
    end
    EoHS_lock_counter = EoHS_lock_counter + 1
  end
  EoHS.unlock_view = function()
    if not wesnoth.lock_view then return end
    EoHS_lock_counter = EoHS_lock_counter - 1
    if EoHS_lock_counter == 0 then
      if not old_view_locked then wesnoth.lock_view(false) end
    end
  end
end

local function is_even(v) return (v % 2) == 0 end
EoHS.pixels_to_hex = function(x1, y1, x2, y2)
  return 54*(x2 - x1), 72*(y2 - y1) + (is_even(x2) and 36 or 0) - (is_even(x1) and 36 or 0)
end

EoHS.show_unit_type_help = function(type_id)
  wesnoth.fire("open_help", {topic=(EoHS.get_unit_type(type_id).hide_help and "." or "").."unit_"..type_id})
end

EoHS.if_has_total_knowledge_of_side = function(side, then_func, else_func)
  return EoHS.disunified(function()
    local controls_any, controls_knower
    for side2,info in ipairs(wesnoth.sides) do
      if (info.controller == "human") or (info.controller == "human_ai") then
        controls_any = true
        if not wesnoth.is_enemy(side, side2) then controls_knower = true; break end
        if not (info.fog or info.shroud) then controls_knower = true; break end
      end
    end
    if controls_knower or not controls_any then
      return then_func()
    else
      return else_func and else_func()
    end
  end)
end

EoHS.add_temporary_anims = function(unit, anims)
  anims.apply_to = "new_animation"
  local adjust_func = EoHS.unit_animation_adjustments(unit)
  for i,anim in ipairs(anims) do adjust_func(anim) end
  table.insert(EoHS.force_subtag(unit, "modifications"), {"object",{id="EoHS_temporary_anims",
    {"effect",anims},
  }})
end
EoHS.remove_temporary_anims = function(unit)
  EoHS.remove_subtags(unit, "modifications.object", "EoHS_temporary_anims")
end

EoHS.animate_unit = function(anim_table, options)
  -- If we don't redraw first, the animation lags enough that it essentially starts in the middle
  --   or is skipped entirely. The redraw clears that behavior.
  if not (options and options.dont_redraw_first) then wesnoth.fire("redraw") end
  wesnoth.fire("animate_unit", anim_table)
end

local anim_x = function(a) return a.x or (a.unit and a.unit.x) or EoHS.get_subtag(a, "filter").x end
local anim_y = function(a) return a.y or (a.unit and a.unit.y) or EoHS.get_subtag(a, "filter").y end
EoHS.animate_units = function(tables, extras)
  if not tables[1] then return end
  local min_x,min_y,max_x,max_y
  local units_modified = {}
  for i,t in ipairs(tables) do
    t.x = anim_x(t)
    t.y = anim_y(t)
    table.insert(t, {"filter",{x=t.x, y=t.y}})
    if not (min_x and (min_x <= t.x)) then min_x = t.x end
    if not (min_y and (min_y <= t.y)) then min_y = t.y end
    if not (max_x and (max_x >= t.x)) then max_x = t.x end
    if not (max_y and (max_y >= t.y)) then max_y = t.y end
  end
  local centerness = function(t)
    return math.abs((t.x - min_x) * (t.y - min_y) * (t.x - max_x) * (t.y - max_y))
  end
  local centermost_idx
  local best_score
  for i,t in ipairs(tables) do
    local score = centerness(t)
    if not (best_score and (best_score >= score)) then
      best_score = score
      centermost_idx = i
    end
  end
  -- The animation will play wherever the centermost unit is.
  -- The game will scroll there automatically. BUT... while it scrolls, the units appear
  --   at their actual location, which might be bad - we use this for swarm movement,
  --   and the swarms cannot start at their starting location because there might also
  --   be a non-swarm unit there.
  -- So we preempt the problem by scrolling there ahead of time.
  EoHS.lock_view()
  wesnoth.fire("redraw")
  wesnoth.scroll_to_tile(tables[centermost_idx].x, tables[centermost_idx].y, true)
  if extras and extras.after_scrolling then extras.after_scrolling() end
  for i,t in ipairs(tables) do
    if t.animation then
      local unit = t.unit or EoHS.get_unit(t.x,t.y)
      EoHS.assert(unit, "EoHS.animate_units given a location with no unit")
      table.insert(units_modified, unit)
      local anim = t.animation
      t.animation = nil
      t.flag = "EoHS_animate_units"
      anim.apply_to = "EoHS_animate_units"
      EoHS.add_temporary_anims(unit, { {"animation",anim} })
      local put_extras = extras and extras.put_extras or {}
      put_extras.immediate=true
      EoHS.put_unit(unit, put_extras)
    end
    t.x = nil
    t.y = nil
    t.unit = nil
  end
  local anim_tag = tables[centermost_idx]
  for i,t in ipairs(tables) do
    if i ~= centermost_idx then table.insert(anim_tag, {"animate",t}) end
  end
  wesnoth.fire("animate_unit", anim_tag)
  EoHS.unlock_view()
  for i,unit in ipairs(units_modified) do
    EoHS.remove_temporary_anims(unit)
    EoHS.put_unit(unit)
  end
end

EoHS.parallel_attacks = function(attacks)
  EoHS.shuffle(attacks)
  for i,attack in ipairs(attacks) do
    attack.extras.animate = false
    EoHS.game_action_simulations.attack_unit(attack.context, attack.extras)
  end
  
  local original_units = {}
  local round = 1
  while true do
    local any = false
    local anims = {}
    local anim_xys = {} -- Hack - only play one animation from each location
    local unit_xys = {} -- TODO deal with the issue where one-attacking-many ends up with the one facing in various directions, which looks odd
    for i,attack in ipairs(attacks) do
      local a = attack.extras.animation_rounds[round]
      if a then
        any = true
        for i,thing in ipairs(a) do
          if type(thing) == "function" then
            thing()
          else
            local xy = anim_x(thing)..","..anim_y(thing)
            if thing.type then unit_xys[xy] = thing
            else
              if not anim_xys[xy] then
                anim_xys[xy] = true
                table.insert(anims, thing)
              end
            end
          end
        end
      end
    end
    
    if not any then break end
    for k,v in pairs(unit_xys) do
      local xy = v.x..","..v.y
      if not original_units[xy] then
        local unit = EoHS.get_unit(v.x, v.y)
        original_units[xy] = unit or {type="remove_unit", x=v.x, y=v.y}
      end
      if v.type == "remove_unit" then EoHS.remove_unit(v.x,v.y)
      else EoHS.put_unit(v, {allow_unknown_id=true, allow_new_location=true, allow_overwrite=true, immediate=true}) end
    end
    EoHS.animate_units(anims)
    round = round + 1
  end
  
  for k,v in pairs(original_units) do
    if v.type == "remove_unit" then EoHS.remove_unit(v.x,v.y)
    else EoHS.put_unit(v, {allow_unknown_id=true, allow_new_location=true, allow_overwrite=true, immediate=true}) end
  end
end

EoHS.dump_server_pbl = function(passphrase)
  -- TODO: description can't be translatable?
  wesnoth.fire("wml_message", { logger="err", message=[[author="Elvish Pillager"
description="]]..tostring(EoHS.macros.EOHS_DESCRIPTION)..[["
email="web@elidupree.com"
icon="units/monsters/fire-dragon.png~BLIT(units/human-magi/great-mage.png~TC(2,magenta),72,30)~BLIT(units/monsters/fire-dragon.png~CROP(125,45,35,30),125,45)~BLIT(units/monsters/fire-dragon.png~CROP(108,70,52,130),108,70)~BLIT(halo/elven/ice-halo5.png,91,8)~CROP(72,34,72,72)~BLIT(misc/blank-hex.png~BG(0,0,0)~CROP(0,0,72,12),0,60)~BLIT(misc/font8x8.png~CROP(40,24,8,8)~CS(-255,0,-255),12,62)~BLIT(misc/font8x8.png~CROP(32,24,8,8)~CS(-255,0,-255),20,62)~BLIT(misc/font8x8.png~CROP(56,24,8,8)~CS(-255,0,-255),28,62)~BLIT(misc/font8x8.png~CROP(32,24,8,8)~CS(-255,0,-255),36,62)~BLIT(misc/font8x8.png~CROP(16,40,8,8)~CS(-255,0,-255),44,62)~BLIT(misc/font8x8.png~CROP(16,40,8,8)~CS(-255,0,-255),52,62)"
passphrase="]]..passphrase..[["
title="Era of High Sorcery"
type="era"
translate="true"
version="]]..EoHS.macros.EOHS_VERSION..[["
]]})
end

-- We need the crown overlay because otherwise the crown will go under the orb-recolorer.
-- Other overlays work fine just by putting the orb-recolorer at the beginning of the list.
local no_attacks_overlay = w111 and "misc/orb.png~CS(-255,0,0)~O(0.5)" or "misc/orb-unmoved.png~CS(-255,-80,0)~O(0.5)"
local canrecruit_overlay = "misc/leader-crown.png"
EoHS.update_orb = function(unit)
  unit.overlays = unit.overlays or ""
  local changed1
  unit.overlays, changed1 = string.gsub(unit.overlays, EoHS.lua_pattern_escape(no_attacks_overlay)..",?", "")
  local changed2
  unit.overlays, changed2 = string.gsub(unit.overlays, EoHS.lua_pattern_escape(canrecruit_overlay)..",?", "")
  if EoHS.unit_has_actions(unit) and (unit.side == wesnoth.current.side) and (wesnoth.sides[unit.side].controller == "human") and (unit.attacks_left == 0) then
    unit.overlays = no_attacks_overlay..(unit.canrecruit and ","..canrecruit_overlay or "")..(unit.overlays and ","..unit.overlays or "")
    EoHS.put_unit(unit)
  elseif (changed1+changed2) > 0 then
    EoHS.put_unit(unit)
  end
end

EoHS.unit_typename = function(unit)
  return EoHS.get_unit_variable(unit, "type_name_override") or unit.language_name
end
EoHS.unit_appellation = function(unit)
  if EoHS.get_unit_variable(unit, "is_wizard") or (unit.unrenamable and (unit.name ~= "")) or (unit.name ~= EoHS.get_unit_variable(unit, "original_name")) then
    return unit.name
  else
    return EoHS.unit_typename(unit)
  end
end

local old_upkeep = wesnoth.theme_items.upkeep
wesnoth.theme_items.upkeep = EoHS.filter_func(function()
  if EoHS.get_variable("settings_inited") and EoHS.get_variable("settings.eliminate_upkeep") then
    return { { "element", { text = _"EoHS" }} }
  else
    return old_upkeep()
  end
end)

local old_unit_type = wesnoth.theme_items.unit_type
wesnoth.theme_items.unit_type = EoHS.filter_func(function()
  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  local override = EoHS.get_unit_variable(wunit, "type_name_override")
  if override then
    return { { "element", {
      text = (w111 and override or '<span foreground="#f5e6c1">'..override..'</span>'),
      tooltip = EoHS.substitute(_"Type: <b>$1|</b>\n$2|", {override, EoHS.get_unit_variable(wunit, "type_description_override") or ""})
    }} }
  end
  return old_unit_type()
end)

--[[wesnoth.theme_items.unit_moves = function()
  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  return { {"element",{ text=EoHS.substitute(_"$1|/$2|, $3| AP", {wunit.moves, wunit.max_moves, EoHS.get_unit_action_points(wunit)})}} }
end]]
local old_unit_weapons = wesnoth.theme_items.unit_weapons
-- TODO rename filter_func so this is correct usage
-- TODO: improve descriptions of Soul Bind weapons, lightning attacks
wesnoth.theme_items.unit_weapons = EoHS.filter_func(function()
  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  local old_result = old_unit_weapons()
  if not EoHS.get_variable("settings_inited") then return old_result end
  local result = {}
  local ap = EoHS.get_unit_action_points(wunit)
  local ap_color = "00ff00"
  if ap < 6 then ap_color = string.format("%.2x%.2x%.2x", 120-(ap*24), 120+(ap*15), 120+(ap*15)) end
  table.insert(result, {"element",{ text='<span foreground="#'..ap_color..'">'..EoHS.substitute(_"AP: $1|", {ap})..'</span>\n' }})
  EoHS.if_has_total_knowledge_of_side(wunit.side, function()
    local unit = EoHS.get_unit(wunit.x, wunit.y)
    if unit then
      local mana_income = EoHS.unit_mana_income(unit)
      if mana_income then
        local mana = EoHS.get_unit_variable(unit, "mana")
        local mana_cap = EoHS.unit_mana_cap(unit)
        local mana_entry = EoHS.substitute(mana_cap and _'mana: $1|/$2|<span color="#a0a0a0">, +$3|/turn</span>\n' or _'mana: $1|<span color="#a0a0a0">, +$3|/turn</span>\n', {mana, mana_cap, mana_income})
        table.insert(result, {"element",{ text=mana_entry }})
        if EoHS.get_wizard_setting(unit, "can_spend_gold_on_spells") then
          local side_info = wesnoth.sides[unit.side]
          table.insert(result, {"element",{ text=EoHS.substitute(_'m+gold: $1|<span color="#a0a0a0">, +$2|/turn</span>\n', {mana+side_info.gold, mana_income+side_info.total_income}) }})
        end
      end
    end
  end)
  for i,e in ipairs(old_result) do
    table.insert(result, e)
  end
  
  return result
end)

-->>)}
