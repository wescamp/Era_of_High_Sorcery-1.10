this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- dress-up.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

--[[shared colors:
c5956a 73432b a9794f 5d422f 7b4231(human_skin and elf_hair)
73432b also elf skin?
f6d39b faf3c9 784838 human_skin and elf_skin
f6d39b also elf_hair?
elder_mage_hair is also lich bones

ffefc6 a trouble color: human_skin and male_wizard_hair. Make sure the beard is cropped away from the rest when recolored
ebd5bc a trouble color: female mage hair, but also book
561b00 human skin, konrad_hair]]

local dress_up_palettes = {
  human_skin = "f8c090 c5956a 73432b f6d39b a9794f 561b00 d8a67a faf3c9 876246 d08f52 5d422f 784838 936920 f8e0c3 b17632 f8c393 cf7f62 b15902 6b3c0b f9c292 ffefc6 ce8463 704010 723e0d 7b4231 b18f75 ffffff",
  ruffian_skin = "human_skin 89624f dbad69 b57e62 e6c1b1",
  ruffian_hair = "first:404041 4b2f27 512425 cb7258 d49567 914f42 dab26f c26f54 c99447 73473a d8ad6b d39564 62292a d29262 d3a55e be895b bc9562 6b3b2e 964f41 9b5b47 a25e49 995042 715732 75483a 723932 86483f 55382f 8c5644 6b4134 50372c 3f2f27",
  elf_hair = "first:d0d0d1 c5956a 73432b a9794f 5d422f 7b4231 f3f4b5 dec497 f3f4b7 f4f5be f4f5ba f4f5bd force:ffffff c7986f c1a694 907859 6d532e 834d3e c6976d c1a694 e2cba3 f3f4b6 e0c79c e7e8e7 c79970 e0c89e e1caa1 cb9f77 f6f7c6 e5d0ad e6d3b3 c99c74 c99d75 f7f8ce f5f6c4 e2e3e2 c89a70 dedfde c99c73 f7d8a6 cda37d edd8b8 529439 4f7229 6c7d39 9cde5a 838441 865142 6d7d3b 919e6b 607229 3a4110 210e05 fef6c5 7d4433 575e34 677832 677933 657630 734a29 faf3ca faf4cc c89b72 ffc694 f6d39b",
  elf_skin = "f6d39b faf3c9 fdd595 d2a57d 784838 ffffff",
  male_wizard_hair = "first:606061 8b3219 c18371 ffefc6 dab0a4 592010 a9543c 44260d 4c4439",
  female_wizard_hair = "fcfcfc ebd5bc cfa87a ffffff 9a7458 7a4a3f 4e3430 886962 d9bab7",
  elder_mage_skin = "human_skin 7b4231 f3c49e c2876d f9e2ce daab85 949473 dba086 c1926c a68574",
  elder_mage_hair = "d6d69c ffffce 949473 525239 b6b68a e6e6b5 6b6b52",
  redplus_coat = "808080 bfbfbf 999999 595959 424242 ffffff 5a5a5a 7a7a7a ababab 535353",
  redmage_robes = "de8b6d ab6b54 59382c 8c5845 683a28 422110 bdae8d ffffff 75462f",
  redmage_pants = "first:8a9f75 5d583c 575233 3f3321 ffffff",
  mage_robes = "first:b18134 8a5c2f 4f2d29 75462f 5a3819 804018 582820",
  mage_staff = "fcd580 f8dd79 e5b263 e1be72 f9cb75 ffe88f ffe38d f8d27e a46d31 daa85d dbab60 b69557 b69d5e 9f6a2f 957153 94744c 8f5c27 6d4217 481f07 3b240b",
  archplus_robes = "cabca2 a4977e 8c7f67 635841 ffffff 4b402b 847860 2d2410",
  boots_and_frills = "c67b02 ffe38c faca58 84401e 86461b 422110 985810 582820 c08008 84411f",
  mage_shoes = "d6d6d6 5a5a5a 7a7a7a ababab",
  staves_greatmageorb = "d6d6d6 a8a098 6a7477 ",
  lich_staff = "f8c838 c87020 704028",
  lich_robes = "first:889880 506858 283028 313131 4b6152 344036 44584a 303130",
  rogue_hair = "d7f0f0 b9cee4 85a7ca 617cab 496697 384f76 293d5f",
  konrad_hair = "first:808081 ffe75a f8c068 d26f41 a26307 800000 6d532e 561b00 754e36 3a230f",
}
for k,v in pairs(dress_up_palettes) do
  v = string.gsub(v, "human_skin", dress_up_palettes["human_skin"])
  v = string.gsub(v, " ffffff", "")
  v = string.gsub(v, "force:ffffff", "ffffff")
  v = string.gsub(v, " ", ",")
  -- The order of a palette doesn't matter EXCEPT that the first color is the reference color for
  -- where to put the middle lightness of a range. For standardization, we use the same (unused) color for all palettes
  -- except for a few that need to be corrected for being generally lighter or darker.
  if string.match(v, "first:") then v = string.gsub(v, "first:", "") else v = "a0a0a1,"..v end
  dress_up_palettes[k] = v
end
dress_up_palettes.konrad_skin = string.gsub(dress_up_palettes.human_skin, ",561b00", "")

local eye_coords_table = {
  ["units/undead-necromancers/lich.png"             ] = { x = 36, y = 19 },
  ["units/undead-necromancers/lich-magic-1.png"     ] = { x = 36, y = 19 },
  ["units/undead-necromancers/lich-magic-2.png"     ] = { x = 36, y = 18 },
  ["units/undead-necromancers/lich-magic-3.png"     ] = { x = 35, y = 18 },
  ["units/undead-necromancers/lich-defend.png"      ] = { x = 35, y = 19 },
  --[[["units/undead-necromancers/lich-idle-1.png"      ] = { x = 36, y = 19 },
  ["units/undead-necromancers/lich-idle-2.png"      ] = { x = 36, y = 19 },
  ["units/undead-necromancers/lich-idle-3.png"      ] = { x = 36, y = 19 },]]
  ["units/undead-necromancers/lich-melee-1.png"     ] = { x = 37, y = 19 },
  ["units/undead-necromancers/lich-melee-2.png"     ] = { x = 38, y = 20 },
  ["units/human-magi/mage.png"                      ] = { x = 34, y = 25 },
  ["units/human-magi/mage-attack-magic1.png"        ] = { x = 34, y = 25 },
  ["units/human-magi/mage-attack-magic2.png"        ] = { x = 33, y = 25 },
  ["units/human-magi/mage-attack-staff1.png"        ] = { x = 36, y = 25 },
  ["units/human-magi/mage-attack-staff2.png"        ] = { x = 36, y = 25 },
  ["units/human-magi/mage-defend.png"               ] = { x = 33, y = 25 },
  ["units/human-magi/red-mage.png"                  ] = { x = 33, y = 23 },
  ["units/human-magi/red-mage-attack-magic-1.png"   ] = { x = 33, y = 23 },
  ["units/human-magi/red-mage-attack-magic-2.png"   ] = { x = 33, y = 22 },
  ["units/human-magi/red-mage-attack-staff-1.png"   ] = { x = 36, y = 25 },
  ["units/human-magi/red-mage-attack-staff-2.png"   ] = { x = 36, y = 25 },
  ["units/human-magi/red-mage-defend.png"           ] = { x = 32, y = 23 },
  ["units/human-magi/arch-mage.png"                 ] = { x = 35, y = 24 },
  ["units/human-magi/arch-mage-attack-magic-1.png"  ] = { x = 35, y = 24 },
  ["units/human-magi/arch-mage-attack-magic-2.png"  ] = { x = 34, y = 24 },
  ["units/human-magi/arch-mage-attack-staff-1.png"  ] = { x = 35, y = 23 },
  ["units/human-magi/arch-mage-attack-staff-2.png"  ] = { x = 37, y = 23 },
  ["units/human-magi/arch-mage+female-attack-staff-1.png"] = { x = 36, y = 24 },
  ["units/human-magi/arch-mage+female-attack-staff-2.png"] = { x = 36, y = 25 },
  ["units/human-magi/arch-mage-defend.png"          ] = { x = 34, y = 24 },
  ["units/human-magi/great-mage.png"                ] = { x = 35, y = 22 },
  ["units/human-magi/great-mage-attack-magic-1.png" ] = { x = 35, y = 22 },
  ["units/human-magi/great-mage-attack-magic-2.png" ] = { x = 34, y = 22 },
  ["units/human-magi/great-mage-attack-staff-1.png" ] = { x = 36, y = 23 },
  ["units/human-magi/great-mage-attack-staff-2.png" ] = { x = 36, y = 23 },
  ["units/human-magi/great-mage+female-attack-staff-1.png" ] = { x = 36, y = 24 },
  ["units/human-magi/great-mage+female-attack-staff-2.png" ] = { x = 37, y = 24 },
  ["units/human-magi/great-mage-defend.png"         ] = { x = 34, y = 23 },
}
local nonhair_recovery_table = {
  ["units/human-magi/mage-attack-staff1.png"  ] = {{ x1 = 43, x2 = 44, y1 = 11, y2 = 17 }},
  ["units/human-magi/red-mage-attack-staff-1.png"   ] = {{ x1 = 39, x2 = 45, y2 = 15 }, { x1 = 42, x2 = 45, y1 = 15, y2 = 18 }},
  ["units/human-magi/arch-mage-attack-staff-1.png"  ] = {{ x1 = 37, x2 = 43, y2 = 13 }},
  ["units/human-magi/arch-mage+female-attack-staff-1.png"  ] = {{ x1 = 37, x2 = 44, y2 = 14 }},
  ["units/human-magi/great-mage-attack-staff-1.png"  ] = {{ x1 = 36, x2 = 44, y2 = 14 }},
}
    
EoHS.palettes_and_ranges_effect = function(palettes_and_ranges)
  local result = {"effect",{apply_to="image_mod"}}
  for i,pr in ipairs(palettes_and_ranges) do
    table.insert(result[2], pr)
  end
  return result
end
    
EoHS.force_palettes_and_ranges = function(palettes_and_ranges)
  EoHS.create_wunit({
    type="Boat",
    { "modifications", {
      { "object", {
        EoHS.palettes_and_ranges_effect(palettes_and_ranges)
      }}
    }}
  })
end
EoHS.record_color_palette = function(palettes_and_ranges, palette)
  local palette_id = "EoHS_color_palette_"..palette
  if not palettes_and_ranges[palette_id] then
    table.insert(palettes_and_ranges, { "color_palette", {
      [palette_id] = dress_up_palettes[palette]} })
    palettes_and_ranges[palette_id] = true
  end
end
EoHS.record_color_range = function(palettes_and_ranges, range)
  local range_id = "EoHS_color_range_"..range
  local range_info = string.gsub(range,"_",",")
  if not palettes_and_ranges[range_id] then
    local hilight = string.gsub(range_info, "%d+", function(numstr) return ""..math.min(math.floor(tonumber(numstr)*1.5+94),255) end)
    --local hilight = string.gsub(range_info, "%d+", function(numstr) return ""..math.min(tonumber(numstr)+128,255) end)
    --local hilight = "255,255,255"
    table.insert(palettes_and_ranges,{ "color_range", { id=range_id,
      rgb=range_info..","..hilight..",0,0,0" }})
    palettes_and_ranges[range_id] = true
  end
end

EoHS.random_dress_up_options = function(unit)
  local result = {}
  local skin_index = EoHS.random("0..100")
  local hair_index = math.floor(skin_index * EoHS.random("0..100") / 100)
  local skin_table = {
    {  0,  80, 25,  0 },
    { 33, 100, 35,  0 },
    { 67, 160, 80, 30 },
    { 86, 209,158,112 },
  }
  local hair_table = {
    {  0,  40, 30, 25 },
    { 20,  60, 50, 30 },
    { 76, 150, 80, 35 },
    { 86, 210, 50,  0 },
  }
  local table_val = function(table, index)
    for i,entry in ipairs(table) do
      if index < entry[1] then
        local prev = table[i-1]
        local c = function(idx)
          local ref = prev[idx] + ((entry[idx] - prev[idx]) * (index - prev[1]) / (entry[1] - prev[1]))
          --EoHS.err(""..index..","..ref..",".."")
          return ""..math.floor(EoHS.random("90..110") * ref / 100)
        end
        return c(2)..","..c(3)..","..c(4)
      end
    end
    return nil
  end
  result.recolor_skin = table_val(skin_table, skin_index)
  result.recolor_hair = table_val(hair_table, hair_index)
  result.hair = (unit.gender == "male") and "hooded" or "ponytail"
  return result
end

EoHS.normative_dress_up_options = function(unit)
  local result = {}
  result.hair = (unit.gender == "male") and "hooded" or "ponytail"
  return result
end
  
local dialog_grid_anims = {
  ["Lich"] = {
    "units/undead-necromancers/lich.png",
    "units/undead-necromancers/lich-magic-1.png",
    "units/undead-necromancers/lich-magic-2.png",
    "units/undead-necromancers/lich-magic-3.png",
    "units/undead-necromancers/lich-defend.png",
    "units/undead-necromancers/lich-melee-1.png",
    "units/undead-necromancers/lich-melee-2.png",
  },
  ["Mage"] = {
    "units/human-magi/mage.png",
    "units/human-magi/mage-attack-magic1.png",
    "units/human-magi/mage-attack-magic2.png",
    "units/human-magi/mage-attack-staff1.png",
    "units/human-magi/mage-attack-staff2.png",
    "units/human-magi/mage-defend.png",
  },
  ["Red Mage"] = {
    "units/human-magi/red-mage.png",
    "units/human-magi/red-mage-attack-magic-1.png",
    "units/human-magi/red-mage-attack-magic-2.png",
    "units/human-magi/red-mage-attack-staff-1.png",
    "units/human-magi/red-mage-attack-staff-2.png",
    "units/human-magi/red-mage-defend.png",
  },
  ["Arch Mage"] = {
    "units/human-magi/arch-mage.png",
    "units/human-magi/arch-mage-attack-magic-1.png",
    "units/human-magi/arch-mage-attack-magic-2.png",
    "units/human-magi/arch-mage-attack-staff-1.png",
    "units/human-magi/arch-mage-attack-staff-2.png",
    "units/human-magi/arch-mage-defend.png",
  },
  ["Great Mage"] = {
    "units/human-magi/great-mage.png",
    "units/human-magi/great-mage-attack-magic-1.png",
    "units/human-magi/great-mage-attack-magic-2.png",
    "units/human-magi/great-mage-attack-staff-1.png",
    "units/human-magi/great-mage-attack-staff-2.png",
    "units/human-magi/great-mage-defend.png",
  },
}

-- TODO: de-duplicate the list somehow
local dress_up_options_list = {
  "hair", "sidetails", "expose_one_leg",
  "crowns", "crests", "chocobone_helm", "horned_helm", "wide_brimmed_hat", "spectre_helm",
  "recolor_skin", "recolor_hair", "recolor_robes", "recolor_coat", "recolor_staff",  "recolor_boots_and_frills", "recolor_pants",  
}
EoHS.get_unit_dress_up_options = function(unit) return EoHS.get_fake_subtag(EoHS.force_unit_variables(unit), "dress_up_options") end
EoHS.copy_dress_up_options = function(src, dst)
  if not dst then dst = {} end
  for i,option in ipairs(dress_up_options_list) do
    dst[option] = src[option]
  end
  return dst
end
EoHS.set_unit_dress_up_options = function(unit, options) EoHS.copy_dress_up_options(options, EoHS.get_unit_dress_up_options(unit)) end
EoHS.dress_up_options_are_identical = function(s1,s2)
  for i,option in ipairs(dress_up_options_list) do
    if s1[option] ~= s2[option] then return false end
  end
  return true
end

EoHS.dress_up_dialog_grid = function(dialog_context, unit)
  local options = EoHS.get_unit_dress_up_options(unit)
  local g = function(contents) return { "grid", contents } end
  local r = function(contents) return { "row", contents } end
  local c = function(contents) return { "column", contents } end
  local rc = function(contents) return r{c(contents)} end
  local l = function(label) return {"label",{label=label}} end
  local title = function(text) return { "label", { label = text, definition = "title" } } end
  
  local unit_image = unit.image
  local anim_index = 1
  
  local large_image = "misc/blank-hex.png~SCALE(300,300)"
  local update_funcs = {}
  local update = function(initial)
    if not initial then for i,update_func in ipairs(update_funcs) do update_func() end end
    local preview = EoHS.dressed_up_unit_image_aggregate(unit_image..EoHS.unit_TC_image_mod(unit), options)
    local palettes_and_ranges = {}
    EoHS.record_palettes_and_ranges_used(palettes_and_ranges, preview)
    EoHS.force_palettes_and_ranges(palettes_and_ranges)
    --local extents = EoHS.image_aggregate_extents(preview)
    preview = EoHS.image_aggregates_combined("terrain/grass/green.png", preview)
    preview = EoHS.collapse_image_aggregate("image_modded", preview)
    preview = large_image.."~BLIT("..preview.."~SCALE(288,288),6,6)~BLIT("..preview..",0,0)"
    wesnoth.set_dialog_value(preview, "dress_up_dialog_grid_preview_image")
  end
  
  local color_picker_grid = function(option, name, default_r, default_g, default_b)
    local slider_id_prefix = "dress_up_dialog_grid"..option
    local s = function(i) return {"slider",{id=slider_id_prefix..i,step_size=1,minimum_value=0,maximum_value=255}} end
    local give = function()
      if options[option] then
        wesnoth.set_dialog_value(false, slider_id_prefix.."toggle")
        local r,g,b = string.match(options[option], "(%d+),(%d+),(%d+)")
        wesnoth.set_dialog_value(r, slider_id_prefix.."r")
        wesnoth.set_dialog_value(g, slider_id_prefix.."g")
        wesnoth.set_dialog_value(b, slider_id_prefix.."b")
      else
        wesnoth.set_dialog_value(true, slider_id_prefix.."toggle")
      end
    end
    local take = function()
      if wesnoth.get_dialog_value(slider_id_prefix.."toggle") then
        options[option] = nil
      else
        local r,g,b = wesnoth.get_dialog_value(slider_id_prefix.."r"),wesnoth.get_dialog_value(slider_id_prefix.."g"),wesnoth.get_dialog_value(slider_id_prefix.."b")
        --[[local sum = r+g+b
        if sum < 90 then
          if sum == 0 then r,g,b = 30,30,30 else r,g,b=math.ceil(r*90/sum),math.ceil(g*90/sum),math.ceil(b*90/sum) end
        end
        local gap = 255*3 - sum
        if gap < 90 then
          if gap == 0 then r,g,b = 255-30,255-30,255-30 else r,g,b=255-math.ceil((255-r)*90/gap),255-math.ceil((255-g)*90/gap),255-math.ceil((255-b)*90/gap) end
        end]]
        options[option] = r..","..g..","..b
        --give()
      end
    end
    
    table.insert(update_funcs, take)
    dialog_context.preshow(function()
      give()
      wesnoth.set_dialog_callback(function() take(); update() end, slider_id_prefix.."toggle")
      if not options[option] then
        wesnoth.set_dialog_value(default_r, slider_id_prefix.."r")
        wesnoth.set_dialog_value(default_g, slider_id_prefix.."g")
        wesnoth.set_dialog_value(default_b, slider_id_prefix.."b")
      end
      --wesnoth.set_dialog_callback(take, slider_id_prefix.."r")
      --wesnoth.set_dialog_callback(take, slider_id_prefix.."g")
      --wesnoth.set_dialog_callback(take, slider_id_prefix.."b")
    end)
    dialog_context.postshow(take)
    return g{
      rc{ l(name) },
      rc{ EoHS.toggle_button(dialog_context, {id=slider_id_prefix.."toggle",label=_"Use original colors"}) },
      rc{g{
        r{c{ horizontal_alignment="right", border="right", border_size=3, l(_"Red")},c{ s("r") }},
        r{c{ horizontal_alignment="right", border="right", border_size=3, l(_"Green")},c{ s("g") }},
        r{c{ horizontal_alignment="right", border="right", border_size=3, l(_"Blue")},c{ s("b") }},
      }},
    }
  end
  
  local toggle_rows = {}
  local hair_toggle_ids = {}
  local make_toggle_desc = function(id, enabled, desc)
    table.insert(toggle_rows, rc{ horizontal_alignment="left", border="left", border_size=31, {"label",{id=id.."desclabel",definition="default_tiny",label=desc}} })

    dialog_context.preshow(function()
      wesnoth.set_dialog_canvas(1, {{"text",{x = "0",
                  y = "0",
                  w = "(text_width)",
                  h = "(text_height)",
                  font_size = 10,
                  color = enabled and EoHS.macros.GUI__FONT_COLOR_ENABLED__TITLE or EoHS.macros.GUI__FONT_COLOR_DISABLED__TITLE,
                  text = "(text)",}}}, id.."desclabel")
    end)
  end
  local update_sidetails_option = function()
    if (unit.type == "lich") or (options.hair == "bald") or (options.hair == "scruffy") or (options.hair == "hooded") or (options.hair == "serpent") then
      options.sidetails = false
      wesnoth.set_dialog_value (false, "dress_up_dialog_grid_sidetails_toggle")
      wesnoth.set_dialog_active(false, "dress_up_dialog_grid_sidetails_toggle")
    else
      wesnoth.set_dialog_active(true, "dress_up_dialog_grid_sidetails_toggle")
    end
  end
  local make_toggle = function(toggle_type, enabled, option, name, desc)
    if EoHS.get_variable("debug_mode") then enabled = true end
    local id = "dress_up_dialog_grid_"..option.."_toggle"
    if toggle_type == "hair" then table.insert(hair_toggle_ids, id) end
    dialog_context.preshow(function()
      if toggle_type == "hair" then
        wesnoth.set_dialog_value(options.hair == option, id)
      elseif toggle_type == "option" then
        wesnoth.set_dialog_value(options[option], id)
      end
      wesnoth.set_dialog_active(enabled, id)
      wesnoth.set_dialog_callback(function()
        if toggle_type == "hair" then
          options.hair = option
          for i,toggle_id in ipairs(hair_toggle_ids) do
            wesnoth.set_dialog_value(toggle_id == id, toggle_id)
          end
          update_sidetails_option()
        elseif toggle_type == "option" then
          options[option] = wesnoth.get_dialog_value(id)
        end
        update()
      end, id)
    end)
    table.insert(toggle_rows, rc{ horizontal_alignment="left", border="top", border_size= (toggle_type == "hair") and 0 or 6, EoHS.toggle_button(dialog_context, {id=id,label=name}) })
    if desc then
      make_toggle_desc(id, enabled, desc)
    end
    return id
  end
  local is_supporter = EoHS.get_side_variable(unit.side, "is_supporter")
  
  table.insert(toggle_rows, rc{ horizontal_alignment="left", title(_"Hair style") })
  make_toggle("hair", true, "hooded", _"Hooded")
  make_toggle("hair", true, "ponytail", _"Ponytail")
  make_toggle("hair", true, "loose", _"Loose")
  make_toggle("hair", true, "spiky", _"Spiky")
  make_toggle("hair", true, "short", _"Short")
  make_toggle("hair", true, "scruffy", _"Scruffy")
  make_toggle("hair", true, "wild", _"Wild")
  make_toggle("hair", true, "bald", _"Bald")
  
  --table.insert(toggle_rows, rc{ horizontal_alignment="left", border="top", border_size=15, title(_"Other") })
  table.insert(toggle_rows, rc{ horizontal_alignment="left", border="top", border_size=15, {"spacer",{}} })
  make_toggle("option", true, "sidetails", _"Sidetails")
  make_toggle("option", true, "expose_one_leg", _"Expose one leg", _"No effect until level 3")
  
  table.insert(toggle_rows, rc{ horizontal_alignment="left", border="top", border_size=15, title(_"Hats") })
  -- TODO un-duplicate this line with menu.cfg
  table.insert(toggle_rows, rc{ horizontal_alignment="left", {"label",{definition="default_small", label=_"(Hat rewards only count complete,\nnetworked games, ignoring AI sides\nand sides that changed\ncontroller mid-game.)"}} })
  
  local make_numerical_category = function(option, num_unlocked, firstname, latername, firstdesc, nextdesc)
    local category_toggle_ids = {}
    local toggle_row_cols = {}
    local update_category_toggles
    for i=1,math.max(1,num_unlocked) do
      local id
      if num_unlocked<=1 then
        id = make_toggle("category", num_unlocked>0, option.."_"..i, firstname, (num_unlocked==0) and firstdesc or nextdesc)
      else
        id = "dress_up_dialog_grid_"..option.."_"..i.."_toggle"
        table.insert(toggle_row_cols, c{ EoHS.toggle_button(dialog_context, {id=id,label=(i==num_unlocked) and latername or nil}) })
      end
      
      local anchored_i = i
      dialog_context.preshow(function()
        wesnoth.set_dialog_callback(function()
          options[option] = anchored_i - (wesnoth.get_dialog_value(id) and 0 or 1)
          update_category_toggles()
          update()
        end, id)
      end)
      
      table.insert(category_toggle_ids, id)
    end
    update_category_toggles = function()
      for i=1,num_unlocked do
        local id = category_toggle_ids[i]
        wesnoth.set_dialog_value(i<=(options[option] or 0), id)
      end
    end
    
    if num_unlocked > 1 then
      table.insert(toggle_rows, rc{ horizontal_alignment="left", border="top", border_size=6, g{r(toggle_row_cols)} })
      make_toggle_desc("dress_up_dialog_grid_"..option.."_second_line", true, firstdesc)
      make_toggle_desc("dress_up_dialog_grid_"..option.."_third_line", false, nextdesc)
    end
    dialog_context.preshow(update_category_toggles)
  end
  
  
  local victories = EoHS.num_players_defeated(unit.side)
  local crown_number = 1
  local required_victories
  while true do
    required_victories = crown_number*crown_number*5
    if required_victories > victories then break end
    crown_number = crown_number + 1
  end
  make_numerical_category("crowns", crown_number-1, _"Golden crown", _"Golden crowns",
    _"Win networked games against 5 players", EoHS.substitute(_"Next crown at $1| players defeated", {required_victories}))
  
  local newbies = EoHS.num_newbies_introduced(unit.side)
  local crest_number = 1
  local required_newbies
  while true do
    required_newbies = crest_number*crest_number*5
    if required_newbies > newbies then break end
    crest_number = crest_number + 1
  end
  make_numerical_category("crests", crest_number-1, _"Helm with crest", _"Helm with crest(s)",
    _"Finish games with 5 EoHS newbies", EoHS.substitute(_"Next crest at $1| newbies played", {required_newbies}))
  
  local days_played = EoHS.get_potentially_out_of_date_persistent_variable(unit.side, "total_days_played") or 0
  local killed_wiza_staff = EoHS.get_potentially_out_of_date_persistent_variable(unit.side, "killed_wizard_with_staff")
  make_toggle("option", days_played >= 30, "chocobone_helm"  , _"Chocobone helmet", _"Play on 30 separate days")
  make_toggle("option", killed_wiza_staff, "horned_helm"     , _"Horned helmet"   , _"Kill a wizard with your staff")
  make_toggle("option", is_supporter     , "wide_brimmed_hat", _"Wide-brimmed hat", _"Donate at elidupree.com/EoHS")
  make_toggle("option", is_supporter     , "spectre_helm"    , _"Spectre mask"    , _"Donate at elidupree.com/EoHS")
  make_toggle("hair"  , is_supporter     , "serpent"         , _"Serpent head"    , _"Donate at elidupree.com/EoHS")
  
  local debug_rows = {}
  if EoHS.get_variable("debug_mode") then
    local make_debug_setimage_toggle = function(image)
      local id = "dress_up_dialog_grid_setimage_"..image
      table.insert(debug_rows, rc{ horizontal_alignment="left", {"toggle_button",{id=id,label=image}} })
      dialog_context.preshow(function()
        wesnoth.set_dialog_callback(function()
          unit_image = image
          update()
        end, id)
      end)
    end
    for k,v in pairs(eye_coords_table) do
      if not string.match(k, "mage%+female") then
        make_debug_setimage_toggle(k)
        local female_image_base = string.gsub(k, "mage", "mage+female")
        if female_image_base ~= k then make_debug_setimage_toggle(female_image_base) end
      end
    end
    table.sort(debug_rows, function(a,b) return a[2][1][2][1][2].id < b[2][1][2][1][2].id end)
  end
  
  dialog_context.preshow(function()
    update_sidetails_option()
    update(true)
    wesnoth.set_dialog_callback(function()
      anim_index = anim_index + 1
      if not dialog_grid_anims[unit.type][anim_index] then anim_index = 1 end
      unit_image = dialog_grid_anims[unit.type][anim_index]
      if unit.gender == "female" then unit_image = string.gsub(unit_image, "[/%-]mage", function(m) return m.."+female" end) end
      update()
    end, "dress_up_dialog_grid_update_button")
  end)
  return g{
    --[[rc{g{]]r{
      c{g(toggle_rows)},
      c{g{
        rc{ border="all", border_size=15, {"image",{label = large_image, id="dress_up_dialog_grid_preview_image"}} },
        rc{ g{r{
          c{l(_"Click/hold to redraw/animate: ")},
          c{{"repeating_button",{label = _"Update", definition="up_arrow", id="dress_up_dialog_grid_update_button"}}}
        }} },
        rc{ vertical_alignment="bottom", border="top", border_size=35, g{r{
          c{ {"button",{label = _"Cancel", id="cancel"}} },
          c{ {"button",{label = _"OK", id="ok"}} }
        }}},
      }},
      c{g{
        rc{ color_picker_grid("recolor_hair", _"Hair color", 0xcf,0xa8,0x7a) },
        rc{ color_picker_grid("recolor_robes", _"Robe color", 0xde,0x8b,0x6d) },
        rc{ color_picker_grid("recolor_coat", _"Coat color", 0xa0,0xa0,0xa0) },
        rc{ color_picker_grid("recolor_staff", _"Staff color", 0xa8,0xa0,0x98) },
        rc{ color_picker_grid("recolor_boots_and_frills", _"Boot and frill color", 0xfa,0xb7,0x32) },
        rc{ color_picker_grid("recolor_pants", _"Pants color", 0x8a,0x9f,0x75) },
      }},
      EoHS.get_variable("debug_mode") and c{g(debug_rows)},
    --[[}}]]},
  }
end

EoHS.show_dress_up_dialog = function(unit)
  local old_options = EoHS.copy_dress_up_options(EoHS.get_unit_dress_up_options(unit))
  local finished = false
  local okd = false
  while not finished do
    local d = EoHS.make_dialog_context(function()
      finished = true
      okd = true
    end, function()
      EoHS.copy_dress_up_options(old_options, EoHS.get_unit_dress_up_options(unit))
      finished = true
    end)
    d.show(EoHS.dress_up_dialog_grid(d, unit))
  end
  return okd
end

-- TODO make beard optional
EoHS.dressed_up_unit_image_aggregate = function(unit_image_layer, options)
  local unit_image_base = EoHS.get_image_base(unit_image_layer)
  
  -- Hack - give elvish ladies a sword
  if unit_image_base == "units/elves-wood/lady.png" then
    return EoHS.image_aggregates_combined(unit_image_layer, {image_modded="units/elves-wood/high-lord.png~CROP(9,14,13,31)~FL(horiz)", offset=EoHS.offset_relative_to_base_image({x=50,y=31}, unit_image_layer)})
  end

  local is_male = not string.match(unit_image_base, "%+female")
  local other_gender_image_layer = EoHS.with_image_modded(unit_image_layer, string.gsub(EoHS.get_image_modded(unit_image_layer),
    is_male and "[/%-]mage" or "%+female",
    is_male and (function(m) return m.."+female" end) or ""))
  local other_gender_image_base = EoHS.get_image_base(other_gender_image_layer)
  if not (eye_coords_table[unit_image_base] or eye_coords_table[other_gender_image_base]) then
    -- If it's not a known image, we can't dress it up.
    return unit_image_layer
  end
  
  local tc_mod = string.match(EoHS.get_image_modded(unit_image_layer), "~TC%b()") or ""
  local skin_color = (options.hair == "serpent") and "86,146,74" or options.recolor_skin
  local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")
  
  
  local specify_palette = function(palette_specifier)
    if palette_specifier == "robes" then
          if string.match(unit_image_base, "^units/undead%-necromancers/lich") then palette_specifier = "lich_robes"
      elseif string.match(unit_image_base, "^units/human%-magi/mage"         ) then palette_specifier = "mage_robes"
      elseif string.match(unit_image_base, "^units/human%-magi/red%-mage"    ) then palette_specifier = "redmage_robes"
      else                                                                          palette_specifier = "archplus_robes" end
    elseif palette_specifier == "pants" then
          if string.match(unit_image_base, "^units/human%-magi/red%-mage"    ) then palette_specifier = "redmage_pants"
      else                                                                          palette_specifier = nil end
    elseif palette_specifier == "hair" then
          if string.match(unit_image_base, "^units/undead%-necromancers/lich") then palette_specifier = nil
      else palette_specifier = is_male and "male_wizard_hair" or "female_wizard_hair" end
    elseif palette_specifier == "coat" then
          if string.match(unit_image_base, "^units/undead%-necromancers/lich") then palette_specifier = nil
      elseif string.match(unit_image_base, "^units/human%-magi/mage"         ) then palette_specifier = nil
      else                                                                          palette_specifier = "redplus_coat" end
    elseif palette_specifier == "boots_and_frills" then
          if string.match(unit_image_base, "^units/undead%-necromancers/lich") then palette_specifier = nil
      elseif string.match(unit_image_base, "^units/human%-magi/mage"         ) then palette_specifier = "mage_shoes"
      else                                                                          palette_specifier = "boots_and_frills" end
    elseif palette_specifier == "staff" then
          if string.match(unit_image_base, "^units/undead%-necromancers/lich") then palette_specifier = "lich_staff"
      elseif string.match(unit_image_base, "^units/human%-magi/mage"         ) then palette_specifier = "mage_staff"
      else                                                                          palette_specifier = "staves_greatmageorb" end
    end
    return palette_specifier
  end
  
  local RCd = function(image_aggregate, ...)
    local result = image_aggregate
    for i,RC_pair in EoHS.vararg(...) do
      local src_palette_specifier = specify_palette(RC_pair[1])
      if src_palette_specifier then
        local dst_range_info = RC_pair[2]
        if dst_range_info then
          local src_palette_id = "EoHS_color_palette_"..src_palette_specifier
          local dst_range_id = "EoHS_color_range_"..string.gsub(dst_range_info,",","_")
          result = EoHS.image_aggregate_modded(result, "~RC("..src_palette_id..">"..dst_range_id..")")
        end
      end
    end
    return result
  end
  
  local eye = EoHS.offset_relative_to_base_image(eye_coords_table[unit_image_base] or eye_coords_table[other_gender_image_base], unit_image_layer)
  
  local RCd_unit_image_layer = RCd(unit_image_layer,
    { "human_skin", skin_color  },
    { "hair"      , options.recolor_hair  },
    { "robes"     , options.recolor_robes },
    { "coat"      , options.recolor_coat  },
    { "staff"     , options.recolor_staff },
    { "pants"     , options.recolor_pants },
    { "boots_and_frills", options.recolor_boots_and_frills })
  local image_aggregate = RCd_unit_image_layer
  
  if is_male then
    image_aggregate = EoHS.image_aggregate_destructive_combine(image_aggregate, EoHS.image_aggregate_cropped(RCd(unit_image_layer,
      { "hair", options.recolor_hair  }), {x1=eye.x,x2=eye.x+3,y1=eye.y+3,y2=eye.y+7,}))
  end
    
  local add_head = function(image_base_usually, skin_palette, hair_palette, eye_x, eye_y, ...)
    local head_aggregate = RCd(image_base_usually, { skin_palette, skin_color }, { hair_palette, options.recolor_hair })
    if not (hair_palette and string.match(hair_palette, "wizard_hair")) then -- HACK
      for i,crop_params in EoHS.vararg(...) do crop_params.relative_to_base_image = image_base_usually end
    end
    head_aggregate = EoHS.image_aggregate_sampled(head_aggregate, ...)
    head_aggregate = EoHS.image_aggregate_translated(head_aggregate, EoHS.offset_translated(
      eye, EoHS.offset_negated(EoHS.offset_relative_to_base_image({x=eye_x, y=eye_y}, image_base_usually))))
    --EoHS.err(EoHS.inspect(head_aggregate))
    image_aggregate = EoHS.image_aggregate_destructive_combine(image_aggregate, head_aggregate)
  end
  
  local l = function(c)
    c.relative_to_base_image = unit_image_layer
    return c
  end
  if string.match(unit_image_base, "units/human%-magi/arch%-mage%+female") and (not options.expose_one_leg)
    and (not string.match(unit_image_base, "attack%-staff")) then
    image_aggregate = EoHS.image_aggregates_combined(EoHS.image_aggregates_reassembled(image_aggregate, RCd(other_gender_image_layer,
      { "robes", options.recolor_robes },{ "boots_and_frills", options.recolor_boots_and_frills } ),
      l{y1=41,x1=28,x2=35}, l{y1=50,x1=20,x2=27}))
  end
  if string.match(unit_image_base, "units/human%-magi/great%-mage%+female") and (not options.expose_one_leg)
    and (not string.match(unit_image_base, "attack%-staff")) then
    image_aggregate = EoHS.image_aggregates_combined(EoHS.image_aggregates_reassembled(image_aggregate, RCd(other_gender_image_layer,
      { "robes", options.recolor_robes },{ "boots_and_frills", options.recolor_boots_and_frills } ),
      l{y1=39,x1=25,x2=35}, l{y1=49,x2=24}))
  end
  if string.match(unit_image_base, "units/human%-magi/arch%-mage") and is_male and (options.expose_one_leg)
    and (not string.match(unit_image_base, "attack%-staff")) then
    image_aggregate = EoHS.image_aggregates_combined(
      EoHS.image_aggregate_sampled(image_aggregate, l{y1=47,y2=48,x1=23,x2=27}, l{y2=46,x2=27}, l{y2=40,x1=28}, l{y1=41,x1=36}),
      EoHS.image_aggregate_sampled(RCd(other_gender_image_layer,
        { "human_skin", skin_color  },{ "robes", options.recolor_robes },{ "boots_and_frills", options.recolor_boots_and_frills }),
        l{y1=41,x1=26,x2=35}, l{y1=53,x2=25}))
  end
  if string.match(unit_image_base, "units/human%-magi/great%-mage") and is_male and (options.expose_one_leg)
    and (not string.match(unit_image_base, "attack%-staff")) then
    local mirror_offset = {y=-1, x=0}
    local defend = string.match(unit_image_base, "defend")
    if string.match(unit_image_base, "attack%-magic") then mirror_offset = {y=0, x=1} end
    if defend then mirror_offset = {y=-2, x=1} end
    image_aggregate = EoHS.image_aggregates_combined(
      EoHS.image_aggregate_sampled(image_aggregate, l{y2=40}, l{y1=41,x1=36}),
      EoHS.image_aggregate_translated(EoHS.image_aggregate_sampled(
        RCd(other_gender_image_layer, { "staff", options.recolor_staff },{ "boots_and_frills", options.recolor_boots_and_frills }),
        l{y1=41-mirror_offset.y,y2=52-mirror_offset.y,x1=14-mirror_offset.x,x2=24-mirror_offset.x}), mirror_offset),
      EoHS.image_aggregate_sampled(RCd(other_gender_image_layer,
        { "human_skin", skin_color  },{ "robes", options.recolor_robes },{ "boots_and_frills", options.recolor_boots_and_frills }),
        l{y1=41,x1=25,x2=35}, l{y1=defend and 53 or 49,x2=24}))
  end
  
  local crown_bonus = 0
  if string.match(unit_image_base, "^units/undead%-necromancers/lich") then
    eye.x = eye.x + 1
    crown_bonus = 1
  else
    if ((is_male and (options.hair ~= "hooded")) or ((not is_male) and (options.hair ~= "ponytail"))) then
      local mage_head_cut = function(eye_offs, sense)
        if sense then return { y2=eye_offs.y+2,x2=eye_offs.x+8,x1=eye_offs.x-15 } end
        return { y1=eye_offs.y+3,x2=eye_offs.x+8 }, { x1=eye_offs.x+9 }
      end
      image_aggregate = EoHS.image_aggregate_sampled(image_aggregate, mage_head_cut(eye))
      local nonhair_recovery_samples = EoHS.deep_copy(nonhair_recovery_table[unit_image_base] or nonhair_recovery_table[other_gender_image_base])
      if nonhair_recovery_samples then
        for i,crop_params in ipairs(nonhair_recovery_samples) do crop_params.relative_to_base_image = unit_image_layer end
        image_aggregate = EoHS.image_aggregate_destructive_combine(image_aggregate, EoHS.image_aggregate_sampled(RCd_unit_image_layer, unpack(nonhair_recovery_samples)))
      end
      
      if (options.hair == "ponytail") or (options.hair == "hooded") then
        local other_eye_coords = eye_coords_table[other_gender_image_base] or eye_coords_table[unit_image_base]
        add_head(RCd(other_gender_image_layer, { "staff", options.recolor_staff }, { "robes", options.recolor_robes }, { "coat", options.recolor_coat }),
          "human_skin", is_male and "female_wizard_hair" or "male_wizard_hair",
          other_eye_coords.x,other_eye_coords.y, mage_head_cut(EoHS.offset_relative_to_base_image(other_eye_coords, other_gender_image_layer), true))
      elseif options.hair == "short" then
        add_head("icons/icon-hotseat.png", "konrad_skin", "konrad_hair", 55,13, { min={x=47,y=3}, max={x=61,y=15} })
      elseif options.hair == "scruffy" then
        add_head("units/human-peasants/ruffian.png", "ruffian_skin", "ruffian_hair", 35,28, { min={x=27,y=19}, max={x=41,y=29} }, {y=30,x1=31,x2=39})
      elseif options.hair == "wild" then
        add_head("units/elves-wood/druid.png"..tc_mod, "elf_skin", "elf_hair", 37,29,
          { min={x=22,y=18}, max={x=44,y=31} },
          { min={x=22,y=32}, max={x=35,y=33} },
          { min={x=22,y=34}, max={x=34,y=35} },
          { min={x=22,y=36}, max={x=33,y=37} },
          { y=38,x1=22,x2=32 },
          { y=39,x1=22,x2=31 },
          { y=40,x1=22,x2=30 })
      elseif options.hair == "bald" then
        add_head("units/human-magi/elder-mage.png", "elder_mage_skin", "elder_mage_hair", 34,24, { min={x=28,y=17}, max={x=40,y=24} }, { min={x=29,y=25}, max={x=39,y=26} })
      elseif options.hair == "spiky" then
        add_head("units/human-outlaws/rogue.png", "human_skin", "rogue_hair", 34,26, { min={x=26,y=16}, max={x=41,y=28} })
      elseif options.hair == "loose" then
        add_head("units/human-outlaws/rogue+female.png", "human_skin", "rogue_hair", 34,26, { min={x=25,y=16}, max={x=42,y=27} }, {y=28,x1=27,x2=38}, {x=31,y1=29,y2=30})
      elseif options.hair == "serpent" then
        add_head("units/monsters/water-serpent.png", nil, nil, 47,28, { min={x=38,y=10}, max={x=65,y=32} })
        eye.x = eye.x + 4
        eye.y = eye.y - 7
      end
    end
    if (options.hair == "scruffy") or (options.hair == "hooded") or (options.hair == "wild") or (options.hair == "bald") then
      eye.x = eye.x + 1
    else
      if w111 then crown_bonus = 1 end
    end
    if options.sidetails then
      add_head("units/elves-wood/hero.png", "elf_skin", "elf_hair", 35,24, { min={x=30,y=24}, max={x=33,y=29} }, { min={x=31,y=30}, max={x=33,y=33} }, { min={x=39,y=22}, max={x=41,y=27} })
    end
  end
  if options.spectre_helm then
    if w111 then
      add_head("units/undead/spectre-se-attack-2.png"..tc_mod, nil, nil, 85,72, { min={x=69,y=52}, max={x=96,y=82} })
    else
      add_head("units/undead/spectre.png"..tc_mod, nil, nil, 38,23, { min={x=26,y=7}, max={x=50,y=27} },
        { min={x=28,y=28}, max={x=50,y=30} }, { min={x=32,y=31}, max={x=48,y=35} })
      eye.y = eye.y - 4
      eye.x = eye.x + 1
    end
    crown_bonus = 1
  end
  if options.horned_helm then
    add_head(w111 and "units/dwarves/lord-se-ranged1.png" or "units/dwarves/lord-ranged.png", nil, nil, 34,36, { min={x=25,y=24}, max={x=41,y=32} },
      { y=33,x1=27,x2=40 }, { y=34,x1=28,x2=39 }, { y=35,x1=29,x2=35 }, { y1=35,y2=38,x1=29,x2=32 })
    eye.y = eye.y - 2
    crown_bonus = 1
  end
  if options.chocobone_helm then
    add_head("units/undead-skeletal/chocobone.png", nil, nil, 35,17, { min={x=26,y=4}, max={x=43,y=14} },
      { min={x=30,y=15}, max={x=40,y=16} })
    eye.y = eye.y - 2
    crown_bonus = 1
  end
  if options.wide_brimmed_hat then
    add_head("units/human-loyalists/duelist.png"..tc_mod, nil, nil, 33,29, { min={x=20,y=14}, max={x=42,y=24} },
      { y=25,x1=26,x2=43 }, { y=26,x1=27,x2=42 }, { y=27,x1=30,x2=39 })
    eye.y = eye.y - 2
    crown_bonus = 1
  end
  if options.crowns then
    eye.x = eye.x + crown_bonus
    for i=1,options.crowns do
      add_head("misc/leader-crown.png", nil, nil, 21,14, { min={x=17,y=5}, max={x=23,y=11} })
      add_head("misc/leader-crown.png", nil, nil, 21,15, { min={x=13,y=6}, max={x=16,y=11} }, { min={x=24,y=6}, max={x=27,y=11} })
      eye.y = eye.y - 3
    end
  end
  if options.crests then
    for i=1,options.crests do
      if i==1 then add_head("units/human-loyalists/marshal.png"..tc_mod, nil, nil, 37,22, { min={x=28,y=7}, max={x=42,y=18} })
      else add_head("units/human-loyalists/marshal-die-10.png"..tc_mod, nil, nil, 42,43, { min={x=31,y=28}, max={x=42,y=34} }, { min={x=43,y=28}, max={x=45,y=32} })
      end
      eye.y = eye.y - 5
    end
  end
    
  return image_aggregate
end

-->>)}
