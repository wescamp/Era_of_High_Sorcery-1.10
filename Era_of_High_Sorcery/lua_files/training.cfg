this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- training.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

--[[
summon_



TODO: put back the "you didn't pick an alliance" warning
TODO: spell stats on the training screen
TODO: tweak the "spells per lower level" vs "spells at each lower level" thing

volcano

summon_chimera

unused units, unintentional:
  Elder Mage,Royal Warrior,Troll Hero,Ancient Lich
  Boat,Galleon
  Cuttle Fish,Giant Rat,Tentacle of the Deep
unused units, intentional:
  Giant Spider (not worth triggering people's arachnophobia),
  drakes(burner+Armageddon,clasher,glider) (I don't like 'em)]]

local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")
  

EoHS.skills = {
  realms = {
    {
      id = "evocation",
      names = {
        realm = _"Evocation",
        skill = _"Evocation skill",
        --practitioner = _"Evoker",
      },
      spells = {
        { "energy_blast", "wizard_sword", "mage_shield", "summon_fire_guardian", },
        { "corridor_of_frost", "summon_arctic_drake", "dispelling_touch", },
        { "fireball", "group_teleport", "summon_sea_serpent", },
        { "ogre_fury", "circle_of_protection", "haste", },
        { "obliterate", "disenchant_area", "guardian_aegis" },
        { "call_dragon", "create_portal", "meteor_storm", },
      },
    },
    {
      id = "nature_magic",
      names = {
        realm = _"Nature magic",
        skill = _"Nature magic skill",
      },
      spells = {
        { "change_terrain", "summon_wolf", "mud_touch", "summon_giant_scorpion" },
        { "mount_dismount", "regeneration", "summon_wose", },
        { "summon_water_serpent", "lightning_bolt", "dehydration", },
        { "summon_gryphon", "rampage", "repelling_gust" },
        { "summon_yeti", "unknown_spell_1", "restoration", },
        { "swarm_nest", "hurricane", "fissure", },
      },
    },
    {
      id = "necromancy",
      names = {
        realm = _"Necromancy",
        skill = _"Necromancy skill",
      },
      spells = {
        { "curse_of_anxiety", "summon_vampire_bat", "pall_of_fatigue", },
        { "summon_skeleton", "summon_ghost", "siphon_strength" },
        { "dark_pact", "poison_ground", "summon_chocobone", "spiritform", },
        { "zombie_swarm", "reanimating_touch", "soul_bind", }, -- TODO: make r.touch R3, make a new necro-4 spell
        { "unknown_spell_2", "renounce_life", "vex_dragon_bones", },
        { "zombie_apocalypse", "unknown_spell_3", "invincible_soldiers" },
      },
    },
  },
  options = {
    { unusual=true, id="focused_study", name=_"Focused Study", description=_"You only need one spell to pass each rank, but you pay one extra point for each rank where you have at least one spell in any realm." },
  },
  talents = {
    { id="efficiency", name=_"Efficient", description=_"Your spells cost 20% less mana/gold." },
    { id="summoner", name=_"Summoner", description=_"You cast summoning spells faster by 2 AP, and summoning rituals faster by 1 turn." },
    { id="enchanter", name=_"Enchanter", description=_"You cast enchantment spells faster by 2 AP." },
    { id="farseer", name=_"Farseer", description=_"The range of your spells is doubled." },
    { unusual=true, id="mentor", name=_"Mentor", description=_"You can train apprentices.\nYou get +40% fire/cold/arcane resistance." },
  },
  alliances = {
    { id="military_commander", name=_"Human military"    , description=_"You can recruit from the Loyalist faction, except Mages, plus Sergeants.\nYou gain Leadership and become Lawful." },
    { id="rascally_friends"  , name=_"Motley crew"       , description=_"You can recruit outlaws, including Ruffians and Pirate Galleons.\nYou gain Skirmisher." },
    { id="elvish_alliance"   , name=_"Elf-friend"        , description=_"You can recruit Elves and merfolk Hunters and Initiates.\nYou get 70% defense/1 move in forest.\nYou gain heals +4, increasing at level 3 to cures,heals +8." },
    { id="dwarvish_alliance" , name=_"Dwarvish alliance" , description=_"You can recruit Dwarves, and if you can summon Gryphons, Gryphon Riders.\nYou get +20% physical resistances" },
    { id="orcish_mercenaries", name=_"Orcish mercenaries", description=_"You can recruit from the Northerners faction.\nYou get +2 melee damage." },
    { id="traveler"          , name=_"Traveler"          , description=_"You can recruit Saurians, Peasants, Woodsmen, and Transport Galleons.\nYou get +1 move and improved terrain movement and defenses." },
    { id="petty_necromancer" , name=_"Petty necromancy"  , description=_"You can recruit from the Undead faction, except for Ghosts.\nYou become Chaotic and you gain plague on your staff." },
    w111 and { id="khalifate", name=_"Khalifate"         , description=_"You can recruit from the Khalifate faction.\nYou get 50% defense/1 move in desert.\nYou become Liminal, but get +20% damage on your attacks." } or nil,
  },
  perks = {},
  skill_ids = {},
}
local forbidden_to_liches = {}
local forbidden_to_apprentices = {}
EoHS.soon(function()
  if EoHS.replace_alliances_with_era then
    EoHS.skills.alliances = {}
    for faction in helper.child_range(wesnoth.game_config.era, "multiplayer_side") do
      if faction.recruit and (faction.recruit ~= "") and not faction.random_faction then
        table.insert(EoHS.skills.alliances, {
          id = "faction_"..faction.id,
          name = faction.name,
          description = EoHS.substitute(_"You can recruit from the $1| faction from $2|.", {faction.name, wesnoth.game_config.era.name}),
          recruit = faction.recruit,
        })
      end
    end
  end

  for i,option in ipairs(EoHS.skills.options) do
    table.insert(EoHS.skills.perks, option)
    table.insert(EoHS.skills.skill_ids, option.id)
    forbidden_to_apprentices[option.id] = true
  end
  for i,talent in ipairs(EoHS.skills.talents) do
    table.insert(EoHS.skills.perks, talent)
    table.insert(EoHS.skills.skill_ids, talent.id)
    forbidden_to_apprentices[talent.id] = true
  end
  for i,alliance in ipairs(EoHS.skills.alliances) do
    table.insert(EoHS.skills.perks, alliance)
    table.insert(EoHS.skills.skill_ids, alliance.id)
    forbidden_to_apprentices[alliance.id] = true
    if (not EoHS.replace_alliances_with_era) and (alliance.id ~= "petty_necromancer") then forbidden_to_liches[alliance.id] = true end
  end
  for dummy,realm in ipairs(EoHS.skills.realms) do
    for i,rank in ipairs(realm.spells) do
      for j,spell_id in ipairs(rank) do
        table.insert(EoHS.skills.skill_ids, spell_id)
      end
    end
  end
end)

EoHS.unit_can_train = function(unit)
  return EoHS.get_unit_variable(unit, "is_wizard")
end
EoHS.soon(function() EoHS.unit_can_train_filter = EoHS.has_unit_variable("is_wizard") end)

EoHS.init_skillset = function(skillset)
  EoHS.copy_skillset({}, skillset)
end

EoHS.skillset_realm_rank = function(skillset, realm_id)
  local max_rank = 0
  local found_realm
  for dummy,realm in ipairs(EoHS.skills.realms) do
    if realm.id == realm_id then
      found_realm = true
      for i,rank in ipairs(realm.spells) do
        for j,spell_id in ipairs(rank) do
          if skillset[spell_id] then max_rank = i end
        end
      end
    end
  end
  EoHS.assert(found_realm, "EoHS.skillset_realm_rank called with no realm")
  return max_rank
end

EoHS.spells_known_from_skillset = function(skillset)
  local result = {}
  for dummy,realm in ipairs(EoHS.skills.realms) do
    for i,rank in ipairs(realm.spells) do
      for j,spell_id in ipairs(rank) do
        if skillset[spell_id] and EoHS.actions[spell_id] then table.insert(result,spell_id) end
      end
    end
  end
  return result
end

EoHS.spells_needed_per_rank = function(skillset) return skillset.focused_study and 1 or 3 end

EoHS.skillset_points_spent = function(skillset)
  local result = 0
  local spells_needed_per_rank = EoHS.spells_needed_per_rank(skillset)
  local max_rank_in_any_realm = 0
  for dummy,realm in ipairs(EoHS.skills.realms) do
    local earlier_rank_payment_deficiencies = 0
    for i,rank in ipairs(realm.spells) do
      local rank_spells = 0
      for j,spell_id in ipairs(rank) do
        if skillset[spell_id] then
          result = result + earlier_rank_payment_deficiencies; earlier_rank_payment_deficiencies = 0
          result = result + 1
          rank_spells = rank_spells + 1
          if i > max_rank_in_any_realm then max_rank_in_any_realm = i end
        end
      end
      if rank_spells < spells_needed_per_rank then
        earlier_rank_payment_deficiencies = earlier_rank_payment_deficiencies + (spells_needed_per_rank - rank_spells)
      end
    end
  end
  if skillset.focused_study then result = result + max_rank_in_any_realm end
  local talents = 0
  for i,talent in ipairs(EoHS.skills.talents) do
    if skillset[talent.id] then
      talents = talents + 1
      result = result + talents
    end
  end
  local alliances = 0
  for i,alliance in ipairs(EoHS.skills.alliances) do
    if skillset[alliance.id] then
      result = result + alliances
      alliances = alliances + 1
    end
  end
  if not EoHS.replace_alliances_with_era then
    local living_alliances = alliances
    local has_necro_spell = (EoHS.skillset_realm_rank(skillset, "necromancy") >= 1)
    if skillset.petty_necromancer then
      living_alliances = living_alliances - 1
      if not has_necro_spell then result = result + 1 end
    end
    if living_alliances > 0 then
      if has_necro_spell then result = result + 1 end
    end
  end
  
  return result
end

EoHS.get_unit_skillset = function(unit)
  return EoHS.get_fake_subtag(EoHS.force_unit_variables(unit), "skillset")
end
EoHS.get_unit_skill = function(unit, name)
  return EoHS.get_unit_skillset(unit)[name]
end

EoHS.copy_skillset = function(src, dst)
  if not dst then dst = {} end
  for i,skill_id in ipairs(EoHS.skills.skill_ids) do
    dst[skill_id] = src[skill_id] or false
  end
  dst.show_unusual = src.show_unusual or false
  return dst
end
EoHS.skillsets_are_identical = function(s1,s2)
  for i,skill_id in ipairs(EoHS.skills.skill_ids) do
    if s1[skill_id] ~= s2[skill_id] then return false end
  end
  return true
end
EoHS.set_unit_skillset = function(unit, skillset)
  EoHS.copy_skillset(skillset, EoHS.get_unit_skillset(unit))
end
EoHS.train_unit_to_skillset = function(unit, skillset)
  EoHS.set_unit_skillset(unit, skillset)
  EoHS.prepare_max_moves_change(unit)
  EoHS.update_all_type_adjustments(unit)
  EoHS.finish_max_moves_change(unit)
  EoHS.update_wizard_trait_desc(unit)
end

EoHS.unit_total_skill_points = function(unit)
  return EoHS.get_wizard_setting(unit, "skill_points_at_level_0") + EoHS.get_wizard_setting(unit, "skill_points_per_level") * unit.level
end
EoHS.unit_skill_points_left = function(unit)
  return EoHS.unit_total_skill_points(unit) - EoHS.skillset_points_spent(EoHS.get_unit_skillset(unit))
end

EoHS.choose_alliance_for_ai = function(unit)
  local skillset = EoHS.get_unit_skillset(unit)
  for i,alliance in ipairs(EoHS.skills.alliances) do
    if skillset[alliance.id] then
      return false
    end
  end
  if not EoHS.replace_alliances_with_era then
    -- with replacing alliances, we could
    -- skillset[EoHS.skills.alliances[EoHS.random("1.."..#EoHS.skills.alliances)].id] = true
    -- but everyone starts with an alliance in that mode anyway.
    skillset[EoHS.random("military_commander,rascally_friends,elvish_alliance,dwarvish_alliance,orcish_mercenaries,petty_necromancer")] = true
  end
  EoHS.update_all_type_adjustments(unit)
  return true
end

local amount_descriptions = {_"half",_"third",_"quarter"}
EoHS.update_wizard_trait_desc = function(unit)
  local trait = helper.get_child(helper.get_child(unit, "modifications"), "trait", "EoHS_wizard")
  local amount_description = amount_descriptions[math.min(unit.level+1, 3)]
  EoHS.if_has_total_knowledge_of_side(unit.side, function()
    local skill_names = ""
    local add_name = function(name) skill_names = ((skill_names == "") and "" or skill_names..", ")..name end
    local skillset = EoHS.get_unit_skillset(unit)
    for i,option   in ipairs(EoHS.skills.options  ) do if skillset[  option.id] then add_name(  option.name) end end
    for i,talent   in ipairs(EoHS.skills.talents  ) do if skillset[  talent.id] then add_name(  talent.name) end end
    for i,alliance in ipairs(EoHS.skills.alliances) do if skillset[alliance.id] then add_name(alliance.name) end end
    for dummy,realm in ipairs(EoHS.skills.realms) do
      for i,rank in ipairs(realm.spells) do
        for j,spell_id in ipairs(rank) do
          if skillset[spell_id] and EoHS.actions[spell_id] then add_name(EoHS.actions[spell_id].name) end
        end
      end
    end
    trait.description = EoHS.substitute(_"This unit is immune to direct damage from spells, and it can only lose a $1| of its max hitpoints each time it's attacked. Beyond that, combat stops immediately.\n \nKnown skills: $2|", {amount_description, skill_names})
  end, function()
    trait.description = EoHS.substitute(_"This unit is immune to direct damage from spells, and it can only lose a $1| of its max hitpoints each time it's attacked. Beyond that, combat stops immediately.", {amount_description})
  end)
end

local fill_prerequisites = function(skillset)
  local spells_needed_per_rank = EoHS.spells_needed_per_rank(skillset)
  for dummy,realm in ipairs(EoHS.skills.realms) do
    local max_rank = EoHS.skillset_realm_rank(skillset, realm.id)
    for i=1,math.min(max_rank-1, #realm.spells) do
      local rank = realm.spells[i]
      local rank_spells = 0
      for j,spell_id in ipairs(rank) do
        if skillset[spell_id] then
          rank_spells = rank_spells + 1
        end
      end
      for j,spell_id in ipairs(rank) do
        if rank_spells >= spells_needed_per_rank then
          break
        end
        if not skillset[spell_id] then
          skillset[spell_id] = true
          rank_spells = rank_spells + 1
        end
      end
    end
  end
end
local clear_postrequisites = function(skillset,old_skillset)
  local spells_needed_per_rank = EoHS.spells_needed_per_rank(skillset)
  for dummy,realm in ipairs(EoHS.skills.realms) do
    local max_rank = EoHS.skillset_realm_rank(skillset, realm.id)
    local gap_found = false
    for i,rank in ipairs(realm.spells) do
      local rank_spells = 0
      for j,spell_id in ipairs(rank) do
        if gap_found and not old_skillset[spell_id] then
          skillset[spell_id] = false
        end
        if skillset[spell_id] then
          rank_spells = rank_spells + 1
        end
      end
      if rank_spells < spells_needed_per_rank then
        gap_found = true
      end
    end
  end
  -- If there were things we were prevented from clearing, make sure their prerequisites weren't removed.
  fill_prerequisites(skillset)
end

local choose_one_random_skill = function(skillset, skill_points_limit, is_apprentice, is_lich)
  local choices = {}
  local has_spells = {}
  local spells_needed_per_rank = EoHS.spells_needed_per_rank(skillset)
  for z,realm in ipairs(EoHS.skills.realms) do
    for j,spell_id in ipairs(realm.spells[1]) do
      if skillset[spell_id] then
        has_spells[realm.id] = true
        has_spells.at_all = true
      end
    end
  end
  for z,realm in ipairs(EoHS.skills.realms) do
    for i,rank in ipairs(realm.spells) do
      local rank_spells = 0
      local unbought_spells = 0
      for j,spell_id in ipairs(rank) do
        if skillset[spell_id] then
          rank_spells = rank_spells + 1
        else
          unbought_spells = unbought_spells + 1
        end
      end
      local weight
      if not has_spells.at_all then weight = 10000000/unbought_spells -- Pick a spell already! But have equal chances of picking each realm.
      elseif not has_spells[realm.id] then weight = 250 -- not likely to branch into another realm
      elseif rank_spells >= spells_needed_per_rank then weight = 100 -- even less likely to take spells that no longer contribute towards higher ranks
      else weight = math.ceil(100000/unbought_spells) end -- A new spell at the forefront of a realm we already have: Good.
                                                          -- And have the same probability of taking one regardless of how many there are.
      for j,spell_id in ipairs(rank) do if not skillset[spell_id] then
        table.insert(choices, { skill = spell_id, weight = weight, realm = realm.id })
      end end
      if rank_spells < spells_needed_per_rank then
        -- We can't buy spells above this rank
        break
      end
    end
  end
  
  local talents = 0
  for i,talent in ipairs(EoHS.skills.talents) do if skillset[talent.id] then
    talents = talents + 1
  end  end
  for i,talent in ipairs(EoHS.skills.talents) do if not skillset[talent.id] then
    if skillset.show_unusual or not talent.unusual then table.insert(choices, { skill = talent.id, weight = math.ceil(4000 / math.max(1,talents*2)) }) end
  end end
  local alliances = 0
  for i,alliance in ipairs(EoHS.skills.alliances) do if skillset[alliance.id] then
    alliances = alliances + 1
  end end
  for i,alliance in ipairs(EoHS.skills.alliances) do if not skillset[alliance.id] then
    if skillset.show_unusual or not alliance.unusual then table.insert(choices, { skill = alliance.id, weight = math.ceil(4000 / (1+(alliances*alliances*20))), living_alliance = (alliance.id ~= "petty_necromancer") }) end
  end end
  local living_alliances = alliances
  if skillset.petty_necromancer then
    living_alliances = living_alliances - 1
  end
  
  local filtered_choices = {}
  local weight_total = 0
  for i,choice in ipairs(choices) do
    local can_pick = true
    if is_apprentice and forbidden_to_apprentices[choice.skill] then can_pick = false end
    if is_lich and forbidden_to_liches[choice.skill] then can_pick = false end
    if skill_points_limit then
      local next_skillset = EoHS.copy_skillset(skillset)
      next_skillset[choice.skill] = true
      if EoHS.skillset_points_spent(next_skillset) > skill_points_limit then
        can_pick = false
      end
    end
    if can_pick then
      if not EoHS.replace_alliances_with_era then
        if has_spells.necromancy and choice.living_alliance then choice.weight = math.ceil(choice.weight / 20) end
        if (choice.realm == "necromancy") and (not has_spells.necromancy) and (living_alliances > 0) then choice.weight = math.ceil(choice.weight / 10) end
        if (not has_spells.necromancy) and (choice.skill == "petty_necromancer") then choice.weight = math.ceil(choice.weight / 5) end
      end
      table.insert(filtered_choices, choice)
      weight_total = weight_total + choice.weight
    end
  end
  
  if not filtered_choices[1] then return false end
  local pick = math.random(1,weight_total)
  for i,choice in ipairs(filtered_choices) do
    pick = pick - choice.weight
    if pick <= 0 then
      skillset[choice.skill] = true
      return true
    end
  end
  return false
end

EoHS.training_dialog_grid = function(dialog_context, unit, old_skillset, variant)
  --local num_realm_entries = math.max(0, total_points - EoHS.skillset_points_spent(old_skillset)) + 1
  local total_points = EoHS.unit_total_skill_points(unit)
  local skillset = EoHS.get_unit_skillset(unit)
  local is_apprentice = EoHS.get_unit_variable(unit, "is_apprentice")
  local is_lich = EoHS.get_unit_variable(unit, "is_lich")
  local g = function(contents) return { "grid", contents } end
  local r = function(contents) return { "row", contents } end
  local c = function(contents) return { "column", contents } end
  local l = function(text) return { "label", { definition = "default_small", label = text } } end
  local title = function(text) return { "label", { label = text, definition = "title" } } end
  local t = function(id) return { "text_box", { id = id } } end
  
  local can_possibly_afford = function(skill)
    local next_skillset = EoHS.copy_skillset(old_skillset)
    -- Hack - use your current options, except for if skill is an option
    for i,option in ipairs(EoHS.skills.options) do
      next_skillset[option.id] = skillset[option.id]
    end
    next_skillset[skill] = not skillset[skill]
    if EoHS.skillset_points_spent(next_skillset) > total_points then
      return false
    end
    return true
  end
  
  local skill_points_remaining_string = _"Skill points remaining:"
  local update_total_points = function()
    local remaining_points = total_points - EoHS.skillset_points_spent(skillset)
    wesnoth.set_dialog_value(""..(total_points - EoHS.skillset_points_spent(old_skillset)), "total_points_box")
    --wesnoth.set_dialog_active(remaining_points >= 0, "ok")
    wesnoth.set_dialog_value(""..remaining_points, "points_remaining_box")
    -- I don't at all understand this dance of resetting and concatenating values,
    -- but if I remove any part of it, the result is visible incorrect behavior...
    wesnoth.set_dialog_value(skill_points_remaining_string..remaining_points, "points_remaining_label")
    wesnoth.set_dialog_value(skill_points_remaining_string, "points_remaining_label")
    wesnoth.set_dialog_canvas(1, { {"text",{
      x = "0", y = "0", w = "(text_width)", h = "(text_height)",
      font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__LARGE,
      color = EoHS.validity_color((remaining_points >= 0) and "valid" or "impossible"),
      text = skill_points_remaining_string.."",
    }} }, "points_remaining_label")
    wesnoth.set_dialog_canvas(1, { {"text",{
      x = "0", y = "0", w = "(text_width)", h = "(text_height)",
      font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__LARGE,
      color = EoHS.validity_color((remaining_points >= 0) and "valid" or "impossible"),
      text = ""..remaining_points,
    }} }, "points_remaining_box")
  end
  
  local is_stuck_on = function(skill_id) return old_skillset[skill_id] and (skill_id ~= "focused_study") end
  local should_be_enabled = function(skill_id)
    if is_apprentice and forbidden_to_apprentices[skill_id] then return false end
    if is_lich and forbidden_to_liches[skill_id] then return false end
    if is_stuck_on(skill_id) then return false end
    return can_possibly_afford(skill_id)
  end
  
  local update_all
  local perk_update = function(perk)
    return function()
      local id = perk.id.."_toggle"
      if not should_be_enabled(perk.id) then wesnoth.set_dialog_value(skillset[perk.id], id); return end
      skillset[perk.id] = wesnoth.get_dialog_value(id)
      if (perk.id == "focused_study") then
        if skillset.focused_study then
          fill_prerequisites(skillset)
        else
          clear_postrequisites(skillset,old_skillset)
        end
      end
      update_all()
    end
  end
  update_all = function()
    local unusual_skills = false
    for i,perk in ipairs(EoHS.skills.perks) do
      if skillset.show_unusual or not perk.unusual then
        if skillset[perk.id] and perk.unusual then unusual_skills = true end
        wesnoth.set_dialog_callback(perk_update(perk), perk.id.."_toggle")
        wesnoth.set_dialog_value(skillset[perk.id], perk.id.."_toggle")
        -- Focused Study can be unlearned, but nothing else can
        local stuck_on = old_skillset[perk.id] and (perk.id ~= "focused_study")
        EoHS.fake_set_toggle_button_active(should_be_enabled(perk.id), perk.id.."_toggle")
      end
    end
    for dummy,realm in ipairs(EoHS.skills.realms) do
      for i,rank in ipairs(realm.spells) do
        for j,spell_id in ipairs(rank) do
          wesnoth.set_dialog_value(skillset[spell_id], spell_id.."_toggle")
          EoHS.fake_set_toggle_button_active(should_be_enabled(spell_id), spell_id.."_toggle")
        end
      end
    end
    wesnoth.set_dialog_active(not unusual_skills, "show_unusual_toggle")
    update_total_points()
  end

  local summary_grid = g{
    r{
      c{ horizontal_alignment="right", { "label", { definition = "default_large", label = _"Skill points to spend:"}}},
      c{ horizontal_grow=true, border="left", border_size=8, grow_factor=2, { "label", { definition = "default_large", id = "total_points_box" } }}
    },
    r{
      c{ horizontal_alignment="right", { "label", { definition = "default_large", id = "points_remaining_label", label = skill_points_remaining_string}}},
      c{ horizontal_grow=true, border="left", border_size=8, { "label", { definition = "default_large", id = "points_remaining_box" } }}}
  }
  
  local realms_rows = {r{c{border="left,right", border_size=15, g{r{c{horizontal_alignment="left", title(_"Spells")}},r{c{border="all", border_size=5,
    l(_"Each spell costs one skill point.\nTo learn a spell, you must know three spells of each lower rank in the same realm.\n \nEach realm gives you a ranged attack and a resistance bonus,\nbased on your level or highest spell rank, whichever is less.")}}}}}}
  
  dialog_context.add_top_level({"linked_group",{id = "realm_box", fixed_width = true}})
  local realms_cols = {}
  for dummy,realm in ipairs(EoHS.skills.realms) do
    local realm_rows = {
      linked_group = "realm_box",
      r{c{title(realm.names.realm)}},
    }
    
    for i,rank in ipairs(realm.spells) do
      table.insert(realm_rows, r{c{ border="top", border_size=5, l(EoHS.substitute(_"Rank $1|",{i})) }})
      for j,spell_id in ipairs(rank) do
        local id = spell_id.."_toggle"
        local name = _"(unimplemented)"
        local description = spell_id
        if EoHS.actions[spell_id] then
          name = EoHS.actions[spell_id].name
          description = EoHS.actions[spell_id].description
        end
        table.insert(realm_rows, r{c{ horizontal_alignment="left", EoHS.toggle_button(dialog_context,{id=id,label=name,tooltip=name.."\n\n"..description}) }})
  
        dialog_context.preshow(function()
          wesnoth.set_dialog_callback(function()
            if not should_be_enabled(spell_id) then wesnoth.set_dialog_value(skillset[spell_id], id); return end
            skillset[spell_id] = wesnoth.get_dialog_value(id)
            if skillset[spell_id] then
              fill_prerequisites(skillset)
            else
              clear_postrequisites(skillset,old_skillset)
            end
            update_all()
          end, id)
        end)
      end
    end
    table.insert(realms_cols, c{border="all", border_size=9, vertical_alignment="top", g(realm_rows)})
  end
  table.insert(realms_rows, r{c{g{r(realms_cols)}}})
  local realms_grid = g(realms_rows) --{"scrollbar_panel",{{"definition",realms_rows}}}
  
  
  local perk_toggle = function(perk)
    return EoHS.toggle_button(dialog_context, {id=perk.id.."_toggle",label=perk.name,tooltip=perk.name.."\n\n"..perk.description})
  end
  
  local options_rows = {r{c{horizontal_alignment="left", border="bottom", border_size=5, title(_"Options")}},}
  for i,option in ipairs(EoHS.skills.options) do
    if skillset.show_unusual or not option.unusual then table.insert(options_rows, r{c{horizontal_alignment="left", perk_toggle(option)}}) end
  end
  
  local talents_rows = {r{c{horizontal_alignment="left", title(_"Talents")}},r{c{border="all", border_size=5, l(_"Buying a talent costs one point,\nplus one for each talent you already have.")}}}
  for i,talent in ipairs(EoHS.skills.talents) do
    if skillset.show_unusual or not talent.unusual then table.insert(talents_rows, r{c{horizontal_alignment="left", perk_toggle(talent)}}) end
  end
  
  local alliances_rows = {
    r{c{horizontal_alignment="left", title(_"Recruits")}},
    r{c{border="all", border_size=5, l(_"Your first alliance is free. Later alliances cost\none point for each alliance you already have." .. (EoHS.replace_alliances_with_era and "" or _"\nYou pay one extra if you have a\nNecromancy spell and take a living alliance,\nor if you don't and take Petty Necromancy."))}}}
  for i,alliance in ipairs(EoHS.skills.alliances) do
    if skillset.show_unusual or not alliance.unusual then table.insert(alliances_rows, r{c{horizontal_alignment="left", perk_toggle(alliance)}}) end
  end
  
  local reset = function()
    local show_unusual = skillset.show_unusual
    EoHS.deep_overwrite(skillset, old_skillset)
    skillset.show_unusual = show_unusual
  end
  
  local buttons_rows = {
    r{c{g{
      r{c{ dialog_context.button({label = _"Reset skills"}, reset) },
      c{ dialog_context.button({label = _"Random skills"}, function()
        reset()
        while choose_one_random_skill(skillset, total_points, is_apprentice, is_lich) do end
      end) }},
    }}},
    r{c{ dialog_context.button({id="show_unusual_toggle", label = skillset.show_unusual and _"Hide unusual skills" or _"Show unusual skills"}, function()
      skillset.show_unusual = not skillset.show_unusual
    end) }},
    r{c{ dialog_context.button({label = _"Change appearance"}, function()
      if EoHS.show_dress_up_dialog(unit) then
        EoHS.update_unit_graphics(unit)
      end
    end) }},
    --r{c{ {"button",{label = _"Finish training", id="ok"}} }},
  }
  --[[if variant == "preselect" then
    table.insert(buttons_rows, r{c{
      l(_"Choices will be applied at\nthe beginning of your next turn.")
    }})
  end]]
  local buttons_grid = g(buttons_rows)
  
  local perks_grid = g{
    r{c{
      horizontal_alignment="left", border="all", border_size=7, g(alliances_rows)
    }},
    r{c{
      horizontal_alignment="left", border="all", border_size=7, g(talents_rows)
    }},
    r{c{
      horizontal_grow=true, border="all", border_size=7, summary_grid
    }},
    r{c{
      border="all", border_size=7, buttons_grid
    }},
  }
  -- TODO don't use this hack insert index
  if options_rows[2] then table.insert(perks_grid[2], 3, r{c{horizontal_alignment="left", border="all", border_size=7, g(options_rows)}}) end
  
  dialog_context.preshow(update_all)

  return g{r{c{vertical_alignment="top", perks_grid},c{vertical_alignment="top", border="top,right", border_size=7, realms_grid}}}
end

EoHS.client_local_trainings = {}

local force_unit_trainings = function(unit)
  local side_trainings = EoHS.client_local_trainings[unit.side]
  if not side_trainings then side_trainings = {}; EoHS.client_local_trainings[unit.side] = side_trainings end
  local unit_trainings = side_trainings[EoHS.unit_id(unit)]
  if not unit_trainings then unit_trainings = {}; side_trainings[EoHS.unit_id(unit)] = unit_trainings end
  return unit_trainings
end
EoHS.get_client_local_trainings = function(unit)
  local side_trainings = EoHS.client_local_trainings[unit.side]
  if not side_trainings then return end
  local unit_trainings = side_trainings[EoHS.unit_id(unit)]
  if not unit_trainings then return end
  return unit_trainings
end
EoHS.local_player_can_preselect_skills = function(side, invoked_manually)
  EoHS.disunified(function()
    if EoHS.get_variable("settings_inited") and (wesnoth.sides[wesnoth.current.side].controller == "network") then
      
      if not invoked_manually then EoHS.give_alert() end
      local choice = EoHS.show_menu(true)
      
      for i,instruction in ipairs(choice) do
        if instruction[1] == "training" then
          force_unit_trainings(EoHS.get_unit(instruction[2].trainer_id)).training = instruction[2]
        end
        if instruction[1] == "dress_up" then
          force_unit_trainings(EoHS.get_unit(instruction[2].dresser_id)).dress_up = instruction[2]
        end
      end
    end
  end)
end

-->>)}
