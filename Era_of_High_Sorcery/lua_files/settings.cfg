this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- settings.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.pvp_wizard_settings = {
  can_spend_gold_on_spells = true,
  can_recruit = true,
  starting_level = 2,
  skill_points_per_level = 5,
  skill_points_at_level_0 = 1,
  summon_duration = "infinite",
  summon_cost_multiplier = 100,
  summon_experience_transfer = 25,
  mana_income_per_level = 2,
  mana_income_at_level_0 = 1,
  mana_capacity_per_level = "infinite",
}
EoHS.rpg_wizard_settings = EoHS.deep_copy(EoHS.pvp_wizard_settings)
EoHS.rpg_wizard_settings.can_spend_gold_on_spells = false
EoHS.rpg_wizard_settings.can_recruit = false
EoHS.rpg_wizard_settings.starting_level = 1
EoHS.rpg_wizard_settings.summon_duration = 3
EoHS.rpg_wizard_settings.summon_cost_multiplier = 50
EoHS.rpg_wizard_settings.summon_experience_transfer = 100
EoHS.rpg_wizard_settings.mana_income_per_level = 2
EoHS.rpg_wizard_settings.mana_income_at_level_0 = 4
EoHS.rpg_wizard_settings.mana_capacity_per_level = 15

EoHS.pvp_settings = {
  eliminate_upkeep = true,
  { "wizard_default", EoHS.pvp_wizard_settings }
}
EoHS.survival_settings = {
  eliminate_upkeep = false,
  { "wizard_default", EoHS.pvp_wizard_settings }
}
EoHS.rpg_settings = {
  eliminate_upkeep = true,
  { "wizard_default", EoHS.rpg_wizard_settings }
}

EoHS.map_specific_default_settings = function()
  local wizards = EoHS.get_units({ EoHS.has_unit_variable("is_starting_wizard") })
  local leaders = EoHS.get_units({ canrecruit=true })
  local recruiting_wizard = false
  local walled_leader = false
  local sides_with_wizards = {}
  for i,unit in ipairs(wizards) do
    sides_with_wizards[unit.side] = true
    if wesnoth.get_terrain_info(wesnoth.get_terrain(unit.x, unit.y)).keep then
      for x,y in helper.adjacent_tiles(unit.x, unit.y) do
        local info = wesnoth.get_terrain_info(wesnoth.get_terrain(x, y))
        if info.castle and (not info.keep) and (not wesnoth.get_unit(x, y)) then
          -- Leader in a keep next to an empty non-keep castle? Almost certainly intended to recruit
          recruiting_wizard = true
          break
        end
      end
    end
  end
  for i,unit in ipairs(leaders) do
    local walls = true
    for x,y in helper.adjacent_tiles(unit.x, unit.y) do
      if EoHS.location_is_passable(x, y) or wesnoth.get_terrain_info(wesnoth.get_terrain(x, y)).castle then walls = false end
    end
    if walls then walled_leader = true end
  end
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  local all_wizards_are_allied = true
  local rogue_opposes_wizard = false
  local connected_enemy_wizards = false
  for i,unit in ipairs(units) do
    local has_wizard_enemy = false
    for side in pairs(sides_with_wizards) do
      if wesnoth.is_enemy(side, unit.side) then
        has_wizard_enemy = true
      end
    end
    if has_wizard_enemy and not sides_with_wizards[unit.side] then
      -- Enemy of a wizard and not a minion of another? Probably an RPG adversary
      -- (note - this includes Creep War guards, which is correct behavior)
      rogue_opposes_wizard = true
    end
    if has_wizard_enemy and sides_with_wizards[unit.side] then
      all_wizards_are_allied = false
    end
  end
  for i,unit in ipairs(wizards) do
    for i,unit2 in ipairs(wizards) do
      if wesnoth.is_enemy(unit.side, unit2.side) and EoHS.find_path(unit.x, unit.y, unit2.x, unit2.y, EoHS.passable_only())[1] then
        connected_enemy_wizards = true
      end
    end
  end
  if (all_wizards_are_allied or walled_leader or rogue_opposes_wizard) and not connected_enemy_wizards then
    return (recruiting_wizard and EoHS.survival_settings or EoHS.rpg_settings), false
  else
    return EoHS.pvp_settings, false
  end
end

EoHS.create_settings_picking_event = function()
  wesnoth.fire("event", { name = "side_turn",
    { "lua", { code = 'EoHS.settings_picking_event()' }}
  })
end

EoHS.settings_dialog_grid = function(dialog_context, settings, mutable)
  local wizard_default
  local widget_update_funcs = {}
  local g = function(contents) return { "grid", contents } end
  local r = function(contents) return { "row", contents } end
  local c = function(contents) return { "column", contents } end
  local gr = function(contents) return g{r(contents)} end
  local cg = function(contents) return c{g(contents)} end
  local rc = function(contents) return r{c(contents)} end
  local rcg = function(contents) return r{c{g(contents)}} end
  local rcgr = function(contents) return rc{horizontal_alignment = "left", gr(contents)} end
  local l = function(label) return {"label",{label=label}} end
  local t = function(setting_id, label, also_number)
    local widget_id = "settings_dialog_grid_toggle_"..setting_id
    widget_update_funcs[widget_id] = function(custom)
      if also_number then
        wesnoth.set_dialog_value(wizard_default[setting_id]~="infinite", widget_id)
        wesnoth.set_dialog_active(wesnoth.get_dialog_value(widget_id) and mutable and custom, "settings_dialog_grid_text_"..setting_id)
      else
        wesnoth.set_dialog_value(wizard_default[setting_id], widget_id)
      end
    end
    dialog_context.preshow(function()
      wesnoth.set_dialog_callback(function()
        if also_number then
          wizard_default[setting_id] = wesnoth.get_dialog_value(widget_id) and 0 or "infinite"
          wesnoth.set_dialog_active(wesnoth.get_dialog_value(widget_id) and mutable, "settings_dialog_grid_text_"..setting_id)
        else
          wizard_default[setting_id] = wesnoth.get_dialog_value(widget_id)
        end
      end, widget_id)
    end)
    return {"toggle_button",{id=widget_id,label=label}}
  end
  local x = function(setting_id, optional)
    local widget_id = "settings_dialog_grid_text_"..setting_id
    widget_update_funcs[widget_id] = function()
      if not (optional and wizard_default[setting_id] == "infinite") then
        wesnoth.set_dialog_value(""..wizard_default[setting_id], widget_id)
      end
    end
    dialog_context.postshow(function()
      if not (optional and wizard_default[setting_id] == "infinite") then
        local choice = wesnoth.get_dialog_value(widget_id)
        local num = tonumber(choice)
        if num then
          num = math.floor(num)
          if ""..num == choice then
            wizard_default[setting_id] = num
            return
          end
        end
      end
    end)
    return { "text_box", { id = widget_id } }
  end
  local t2 = function(setting_id, label)
    local widget_id = "settings_dialog_grid_toggle_"..setting_id
    widget_update_funcs[widget_id] = function()
      wesnoth.set_dialog_value(settings[setting_id], widget_id)
    end
    dialog_context.preshow(function()
      wesnoth.set_dialog_callback(function()
        settings[setting_id] = wesnoth.get_dialog_value(widget_id)
      end, widget_id)
    end)
    return {"toggle_button",{id=widget_id,label=label}}
  end
  local presets = {
    {
      image = "attacks/fireball.png",
      name = _"PvP settings",
      settings = EoHS.pvp_settings,
    },
    {
      image = "attacks/fire-breath-drake.png",
      name = _"Survival settings",
      settings = EoHS.survival_settings,
    },
    {
      image = "attacks/longsword.png",
      name = _"RPG settings",
      settings = EoHS.rpg_settings,
    },
    {
      image = "attacks/fist-human.png",
      name = _"Custom settings",
      settings = "custom",
    },
  }
  local custom_idx
  local chosen_idx
  --local preset_rows = {}
  local p = function(image, name)
    return rc{horizontal_grow = true, {"toggle_panel",{id="the_panel",gr{
      c{horizontal_alignment = "left", {"image",{id="the_image",label=image}}},
      c{horizontal_alignment = "left", border="left,right", border_size=8, {"label",{id="the_label",label=name }}},
    }}}}
  end
  for i,preset in ipairs(presets) do
    --table.insert(preset_rows, p(preset.image, preset.name))
    if preset.settings == "custom" then
      custom_idx = i
    elseif EoHS.tags_are_identical(settings, preset.settings) then
      chosen_idx = i
    end
  end
  if not chosen_idx then
    chosen_idx = custom_idx
  end
  
  local choose_preset = function(index)
    wesnoth.set_dialog_value(mutable and index or 1, "settings_listbox")
    local preset = presets[index].settings
    if preset == "custom" then
      wizard_default = EoHS.get_subtag(settings, "wizard_default")
      for widget_id,update_func in pairs(widget_update_funcs) do
        wesnoth.set_dialog_active(mutable, widget_id)
        update_func(true)
      end
    else
      EoHS.deep_overwrite(settings, preset)
      wizard_default = EoHS.get_subtag(settings, "wizard_default")
      for widget_id,update_func in pairs(widget_update_funcs) do
        wesnoth.set_dialog_active(false, widget_id)
        update_func(false)
      end
    end
  end
  
  dialog_context.preshow(function()
    if mutable then
      for i,preset in ipairs(presets) do
        wesnoth.set_dialog_value(preset.name, "settings_listbox", i, "the_label")
        wesnoth.set_dialog_value(preset.image, "settings_listbox", i, "the_image")
        --wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_panel")
        --wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_label")
        --wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_image")
      end
    else
      wesnoth.set_dialog_value(presets[chosen_idx].name, "settings_listbox", 1, "the_label")
      wesnoth.set_dialog_value(presets[chosen_idx].image, "settings_listbox", 1, "the_image")
    end
    --wesnoth.set_dialog_active(mutable, "settings_listbox")
    wesnoth.set_dialog_callback(function()
      if mutable then
        choose_preset(wesnoth.get_dialog_value("settings_listbox"))
      --[[else
        wesnoth.set_dialog_value(chosen_idx, "settings_listbox")
        wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_panel")
        --wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_label")
        --wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_image")]]
      end
    end, "settings_listbox")
    choose_preset(chosen_idx)
  end)
  
  local result = g{
    rc{ gr{
      c{ {"horizontal_listbox",{
        id = "settings_listbox",
        {"list_definition",{
          p()
        }},
        --{"list_data",preset_rows},
      }} },
      mutable and c{ border="left", border_size=30, {"button",{id="ok",label=_" \nDone\n "}} } or nil,
    }},
    rc{ border="top,bottom", border_size=15, g{
      rc{ horizontal_alignment = "left", t("can_spend_gold_on_spells",_"Wizards can spend gold on spells") },
      rc{ horizontal_alignment = "left", t("can_recruit",_"Wizards can recruit") },
      rc{ horizontal_alignment = "left", t2("eliminate_upkeep",_"Eliminate upkeep") },
      rcgr{ c{l(_"Wizards start at level ")},c{x("starting_level")} },
      rcgr{ c{l(_"Wizards have ")},c{x("skill_points_per_level")},c{l(_" skill points per level, plus ")},c{x("skill_points_at_level_0")} },
      rcgr{ c{l(_"Each turn, wizards earn ")},c{x("mana_income_per_level")},c{l(_" mana per level, plus ")},c{x("mana_income_at_level_0")} },
      rcgr{ c{t("mana_capacity_per_level",_"Wizards have a maximum of ", true)},c{x("mana_capacity_per_level", true)},c{l(_" mana per level")} },
      rcgr{ c{l(_"Summoned creatures transfer ")},c{x("summon_experience_transfer")},c{l(_" percent of their experience to their summoners")} },
      rcgr{ c{t("summon_duration",_"Summoned creatures disappear ", true)},c{x("summon_duration", true)},c{l(_" turns after they are summoned")} },
      rcgr{ c{l(_"Summoning spells cost ")},c{x("summon_cost_multiplier")},c{l(_" percent of their normal cost")} },
    }},
  }
  --EoHS.err(EoHS.inspect(result))
  return result
end

--[[
  local customize_skillset_func = function(side)
  
  local customize_buttons_rows = {}
  local customize_skillset_button_name
  if mutable then
    local customize_skillset_button = dialog_context.button({label=_"Customize starting skills"}, customize_skillset_func("default"))
    local decustomize_skillset_button = {"spacer",{}}
    if EoHS.get_subtag(settings, "side_default.starting_skillset") then decustomize_skillset_button = dialog_context.button({label=_"Customize starting skills"}, customize_skillset_func("default")) end
    table.insert(customize_buttons_rows, r{c{customize_skillset_button}, r{c{decustomize_skillset_button}}}
  else
    if EoHS.get_subtag(settings, "side_default.starting_skillset") then
      table.insert(customize_buttons_rows, r{c{dialog_context.button({label=_"View starting skills"}, customize_skillset_func("default"))}})
    end
  end
  local ]]

EoHS.current_player_picks_settings = function()
  local map_default_settings, separate_map_default = EoHS.map_specific_default_settings()
  
  local choice = EoHS.synchronize_choice(function()
    local current_settings = EoHS.deep_copy(map_default_settings)
    local function show_dialog()
      local d = EoHS.make_dialog_context(function() end, show_dialog)
      d.show(EoHS.settings_dialog_grid(d, current_settings, true))
    end
    show_dialog()
    return current_settings
  end)
  
  EoHS.set_variable("settings", choice)
end
--[[
EoHS.settings_picking_event = function()
  local choice = EoHS.synchronize_choice(EoHS.current_player_picks_settings, function() return { ai_chose=true } end)
  
  if choice.ai_chose then
    EoHS.create_settings_picking_event()
  else
    choice.inited = true
    EoHS.set_variable("settings", choice)
    EoHS.init_campaign_with_settings()
  end
end]]

EoHS.get_wizard_settings = function(unit)
  return EoHS.get_fake_subtag(EoHS.force_unit_variables(unit), "wizard_settings")
end
EoHS.get_wizard_setting = function(unit, name)
  return EoHS.get_wizard_settings(unit)[name]
end
EoHS.init_wizard_settings = function(wizard_settings)
  local defaults = EoHS.get_variable("settings.wizard_default")
  for k,v in pairs(defaults) do
    if wizard_settings[k] == nil then wizard_settings[k] = v end
  end
end
--[[
EoHS.get_settings_for_side = function(side)
  local settings = EoHS.get_variable("settings")
  if not settings then EoHS.err("EoHS.get_settings_for_side called, no settings found") end
  if not settings.inited then EoHS.err("EoHS.get_settings_for_side called, settings not inited") end
  local side_specific = EoHS.get_subtag(settings, "side_"..side)
  if side_specific then return side_specific else return EoHS.get_subtag(settings, "side_default") end
end]]

-->>)}
