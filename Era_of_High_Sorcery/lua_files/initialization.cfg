this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- initialization.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.init_campaign = function(options)
  EoHS.begin_event(true, true) -- Most of the time we put these outside the function, directly in the [lua] code=,
  -- but here we want the campaign-initing command - the only thing called directly from WML -
  -- to be as short as possible.
  
  EoHS.set_variable("first_player_picks_settings", options and options.first_player_picks_settings)
  EoHS.set_variable("settings_inited", false)
  EoHS.set_variable("next_unit_id", 1001) -- high number to avoid masking ID-misuse bugs by being equal to underlying_ids
  EoHS.set_variable("show_menu_item", false)
  wesnoth.fire("set_menu_item", {
    id = "EoHS_menu_item",
    image = "icons/scroll_red.png~SCALE(20,20)",
    description = _"EoHS dialog",
    { "show_if", {
      { "variable", {
        name="EoHS.show_menu_item",
        boolean_equals="true",
      }}
    }},
    { "command", {
      { "lua", {
        code = [[--EoHS.menu_item_invoked
EoHS.begin_event(true, true)
EoHS.menu_item_invoked()
EoHS.end_event()]]
      }},
    }},
  })
  -- TODO: is there any automatic way to make this show up only in my tests?
  --[[wesnoth.fire("set_menu_item", {
    id = "EoHS_zdebug_menu_item",
    image = "icons/scroll_red.png~SCALE(20,20)~GS()~CS(-50,0,0)",
    description = _"EoHS debug mode",
    { "show_if", {
      { "variable", {
        name="EoHS.debug_mode",
        boolean_equals="false",
      }}
    }},
    { "command", {
      { "set_variable", {
        name = "EoHS.debug_mode", value = true
      }},
    }},
  })]]
  
  for side in ipairs(wesnoth.sides) do
    EoHS.init_side_variables(side)
    EoHS.set_side_variable(side, "persistent_variables", {})
  end
  
  local leaders = EoHS.get_units({ canrecruit=true, type=(not EoHS.replace_alliances_with_era) and "Red Mage" or nil })
  for i,unit in ipairs(leaders) do
    EoHS.set_unit_variable(unit, "is_starting_wizard", true)
    local modifications = EoHS.force_subtag(unit, "modifications")
    local variables = EoHS.force_unit_variables(unit)
    local skillset = EoHS.get_unit_skillset(unit)
    variables.is_wizard = true
    table.insert(modifications, 1, {"trait",{
      id = "EoHS_wizard",
      name = _"wizard",
      --description = _"This unit is immune to direct damage from spells, and it can only lose a quarter of its max hitpoints each time it's attacked. Beyond that, combat stops immediately.",
    }})
    if (type(unit.name) == "string") and string.match(unit.name, "^Elvish_Pillage") then
      unit.name = "Elvish_Pillager"
      table.insert(modifications, { "trait", {
        id="author",
        name=(_"author"),
        description=(_"Elvish_Pillager is the author of Era of High Sorcery. Feel free to report bugs to them!"),
      }})
    end
    if EoHS.side_is_angerpersonified(unit.side) then unit.gender = "female" end
    EoHS.set_side_variable(unit.side, "original_nick", unit.name)
    EoHS.set_unit_dress_up_options(unit, EoHS.random_dress_up_options(unit))
    EoHS.update_all_type_adjustments(unit)
    unit.hitpoints = nil
    EoHS.put_unit(unit)
  end
  EoHS.init_scenario()
  
  EoHS.end_event()
end

-- Mega hack (could probably be housed in a different file if we want to shorten this one)
do
  local unit1_moused_over_x, unit1_moused_over_y
  local unit2_moused_over_x, unit2_moused_over_y
  local last_mouse_over_time
  local mouseover_counter = 0
  local update_off_turn_menu_invocation_hack = EoHS.filter_func(function()
    if wesnoth.sides[wesnoth.current.side].controller == "network" then
      local time = EoHS.timestamp()
      if last_mouse_over_time and ((time - last_mouse_over_time) > 800) then
        mouseover_counter = 0
        unit1_moused_over_x = nil; unit1_moused_over_y = nil
        unit2_moused_over_x = nil; unit2_moused_over_y = nil
      end
      last_mouse_over_time = time
      local du = wesnoth.get_displayed_unit()
      if du then
        if (du.x == unit2_moused_over_x) and (du.y == unit2_moused_over_y) then
          -- Same as last time - do nothing.
        else
          if unit2_moused_over_x and unit1_moused_over_x and not ((du.x == unit1_moused_over_x) and (du.y == unit1_moused_over_y)) then
            -- Mousing to a third, different unit - reset
            mouseover_counter = 0
          end
          -- Otherwise, it's initial mousing or mousing back to the same unit, so we continue incrementing
          mouseover_counter = mouseover_counter + 1
          
          -- unit2 is the latest, unit1 is the previous one
          unit1_moused_over_x = unit2_moused_over_x
          unit1_moused_over_y = unit2_moused_over_y
          unit2_moused_over_x = du.x
          unit2_moused_over_y = du.y
          
          if mouseover_counter > 8 then
            mouseover_counter = 0
            -- Hack - if one of the units you were mousing over was a trainer, start out with that one in the menu
            local unit2 = EoHS.get_unit(unit2_moused_over_x,unit2_moused_over_y)
            if unit2 and EoHS.unit_can_train(unit2) then EoHS.last_selected_id = EoHS.unit_id(unit2)
            else
              local unit1 = EoHS.get_unit(unit1_moused_over_x,unit1_moused_over_y)
              if unit1 and EoHS.unit_can_train(unit1) then EoHS.last_selected_id = EoHS.unit_id(unit1) end
            end
            EoHS.local_player_can_preselect_skills(true)
          end
        end
      end
    end
  end)
  -- Not simply make_filter_func because we need to check the old context for the hack.
  _G.EoHS_update_off_turn_menu_invocation_hack = function(wunit)
    if --[[EoHS.comfortably_during_turn and]] (not EoHS.context) and (not EoHS.event_stack) then
      update_off_turn_menu_invocation_hack()
      -- Also use this hack to update Siphon Strength:
      -- whoops... exposed too many segfaults
      -- EoHS.fast_update_siphon_strength_graphics(wunit)
    end
    return false
  end
  EoHS.update_off_turn_menu_invocation_hack_ability = {"dummy",{ id="EoHS_update_off_turn_menu_invocation_hack", {"filter",{lua_function="EoHS_update_off_turn_menu_invocation_hack"}} }}
end

-- Also keep track of what unit was selected last on your own turn.
-- We can't use proper select events because that would invalidate undo, so use on_event instead.
local old_on_event = wesnoth.game_events.on_event
wesnoth.game_events.on_event = EoHS.filter_func(function()
  if wesnoth.current.event_context.name == "select" then
    local wunit = wesnoth.get_unit(wesnoth.current.event_context.x1,wesnoth.current.event_context.y1)
    if wunit then EoHS.last_selected_id = EoHS.unit_id(wunit) end
  end
  local siphoned_wunits = wesnoth.get_units({ EoHS.is_on_the_map, EoHS.has_unit_variable("siphon_strength") })
  for i,siphoned_wunit in ipairs(siphoned_wunits) do EoHS.fast_update_siphon_strength_graphics(siphoned_wunit) end
  if old_on_event then old_on_event() end
end)

EoHS.at_init_scenario_funcs = {}
EoHS.at_init_scenario = function(func) table.insert(EoHS.at_init_scenario_funcs, func) end
EoHS.init_scenario = function()
  EoHS.standardize_units()
  for i,event in pairs(EoHS.events) do wesnoth.fire("event", event) end
  EoHS.set_variable("scenario_inited", true)
  EoHS.set_variable("scenario_vars", {})
  for i,func in ipairs(EoHS.at_init_scenario_funcs) do func() end
  if EoHS.get_variable("settings_inited") then EoHS.set_variable("show_menu_item", true) end
end

EoHS.init_settings = function()
  if EoHS.get_variable("first_player_picks_settings") then
    EoHS.current_player_picks_settings()
  else
    EoHS.set_variable("settings", EoHS.map_specific_default_settings())
  end
  EoHS.set_variable("settings_inited", true)
  
  EoHS.set_variable("show_menu_item", true)
  
  -- TODO: refine preselect rules (reference: 3p survival with the host in the last slot)
  local local_player_has_something_to_preselect = false
  local leaders = EoHS.get_units({ EoHS.has_unit_variable("is_starting_wizard") })
  for i,unit in ipairs(leaders) do
    local settings = EoHS.get_wizard_settings(unit)
    local skillset = EoHS.get_unit_skillset(unit)
    EoHS.init_wizard_settings(settings)
    EoHS.init_skillset(skillset)
    if EoHS.replace_alliances_with_era then
      local recruits = {}
      for i,recruit in ipairs(wesnoth.sides[unit.side].recruit) do recruits[recruit] = true end
      for i,alliance in ipairs(EoHS.skills.alliances) do
        local alliance_recruits = {}
        for recruit in EoHS.comma_separated_values(alliance.recruit) do alliance_recruits[recruit] = true end
        local is_same_faction = true
        for k,v in pairs(recruits) do if not alliance_recruits[k] then is_same_faction = false end end
        for k,v in pairs(alliance_recruits) do if not recruits[k] then is_same_faction = false end end
        if is_same_faction then
          skillset[alliance.id] = true
          wesnoth.fire("set_recruit", {side=unit.side, recruit=""})
          break
        end
      end
    end
    local level = EoHS.get_wizard_setting(unit, "starting_level")
    EoHS.set_unit_variable(unit, "wizard_level", level)
    EoHS.set_unit_variable(unit, "original_type", EoHS.appropriate_wizard_unit_type("Mage", level))
    EoHS.update_all_type_adjustments(unit)
    unit.hitpoints = nil
    EoHS.set_unit_variable(unit, "mana", EoHS.unit_mana_cap(unit) or 0)
    EoHS.update_wizard_trait_desc(unit)
    EoHS.put_unit(unit)
    
    EoHS.do_only_on_client_controlling_human_side(unit.side, function()
      local_player_has_something_to_preselect = true
    end)
  end
  if local_player_has_something_to_preselect then
    EoHS.local_player_can_preselect_skills()
  end
end

table.insert(EoHS.events, {
  name = "preload",
  first_time_only = "no",
  { "insert_tag", {
    name = "command",
    variable = "EoHS.preload"
  }},
})

EoHS.next_scenario_initing_event_names = {
  "prestart", "start", "side_turn", "turn_refresh", "prerecruit", "recruit", "moveto"
  -- deliberately omitted: attack (because the combat events rely on the fact that they all exist before the combat),
  -- preload (because it could create different behavior after a load),
  -- side turn end (I don't know if the init relies on synchronization but I won't risk it)
}
EoHS.next_scenario_initing_event = function(name)
  return { "event", {
    name = name,
    id = "EoHS_next_scenario_initing_event_"..name,
    first_time_only = "no",
    { "filter_condition", {
      { "variable", {
        name = "EoHS.scenario_inited",
        boolean_equals = false
      }},
    }},
    { "insert_tag", {
      name = "command",
      variable = "EoHS.preload"
    }},
    { "lua", {
      code = [[--EoHS.next_scenario_initing_event("]]..name..[[")
EoHS.begin_event(true, true)
EoHS.init_scenario()
EoHS.end_event()]]
    }},
  }}
end

-- These events can normally be undone, so we don't want to trigger events on them unless we have to.
-- But we do want units to be standardized ASAP if the scenario does something!
-- We could standardize units in non-synchronized events too - or in moveto events and allow undoing -
--   but that doesn't seem worth the risk.
EoHS.selective_unit_standardization_event_names = {
  "moveto"
}
EoHS.selective_unit_standardization_event = function(name)
  return {
    name = name,
    first_time_only = "no",
    { "filter_condition", {
      { "have_unit", {
        EoHS.is_on_the_map,
        lua_function = "EoHS_standardize_wunit"
      }},
    }},
    { "lua", {
      code = [[--EoHS.selective_unit_standardization_event
EoHS.begin_event(true, true)
EoHS.standardize_units()
EoHS.end_event()]]
    }},
  }
end
for i,name in ipairs(EoHS.selective_unit_standardization_event_names) do
  table.insert(EoHS.events, EoHS.selective_unit_standardization_event(name))
end

EoHS.standardize_units = function()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
  end
end

--[[local opposite_filters = {
  self = "opponent",
  opponent = "self",
  attacker = "defender",
  defender = "attacker",
}]]
        --[[ Comment pulled out of standardize_unit so that standardize_unit is more readable:
          Mage Shield issues:
           Later comment:
             Whoops - (1) is simply incorrect, and for (2), there was an easier way to do it, which is that multiply=0 always zeroes the CTH.
             However, I'm leaving this code here in case I need it for something later.
           
            1) After an attack event, if another attack event invalidates the combat, then the attack_end event DOES NOT occur.
              So we'd prefer not to set any temporaries in the attack event that can't be fixed before they cause problems.
            2) If a slowing attack hits, we in fact CANNOT stop the slow effect or remove it before it reduces the next swing's damage.
              Therefore, we must make the attacks all miss. There's no way to override (for instance) magical, so we have to disable it.
              Due to (1), we don't want to remove it outright, only to modify it so that it fails to apply in attacks against Mage Shield.
              Thus, the filter:
              {"not",{ EoHS.has_unit_variable("unhittable") }}
              must be applied to all [chance_to_hit] specials, except for the special one that makes shielded units unhittable.
              But it's worse than that! The filter needed depends on the special's apply_to=. For any of the four normal values,
              I have to filter the opposite one, and for apply_to=both, I have to *split the special in two* so that I can
              stop them from hitting mage shields without changing the shielded unit's own chance to hit (or vice versa).
        ]]
        --[[if (special[1] == "chance_to_hit") and not (special[2].id = "EoHS_cant_hit_unhittable_units") then
          local required_filter = {"not",{ EoHS.has_unit_variable("unhittable") }}
          local add_to_filter = function(filter)
            -- The [not] has to be last - otherwise there could be an [or] after it
            local last = filter[1] and filter[#filter]
            if not (last and (last[1] == "not") and (EoHS.get_subtag_attribute(last[2], "filter_wml.variables.EoHS.unhittable") == true)) then
              table.insert(filter, required_filter)
              did_anything = true
            end
          end
          local apply_to = special[2].apply_to or "self"
          local opposite = opposite_filters[apply_to]
          if opposite then
            add_to_filter(EoHS.force_subtag(special[2], "filter_"..opposite))
          else
            EoHS.assert(apply_to=="both", "Found bad weapon special apply_to value")
            -- Interestingly, it doesn't matter which of the two axes we split it along. I find self/opponent more elegant though.
            local other_special = EoHS.deep_copy(special)
                  special[2].apply_to = "self"    ; table.insert(EoHS.force_subtag(      special[2], "filter_opponent"), required_filter)
            other_special[2].apply_to = "opponent"; table.insert(EoHS.force_subtag(other_special[2], "filter_self"    ), required_filter)
            table.insert(specials, other_special)
            did_anything = true
          end
        end]]

EoHS.make_filter_func("EoHS_standardize_wunit", function(wunit) EoHS.standardize_unit(wunit.__cfg) end)
EoHS.standardize_unit = function(unit, options)
  local subtag_ids = {}
  local did_anything = false
  -- TODO: don't have to put_unit everything standardize_unit does.
  local variables = EoHS.force_unit_variables(unit)
  if EoHS.context.unison and not variables.id then
    variables.id = EoHS.make_new_unit_id()
    did_anything = true
  end
  
  -- We set a bunch of unit attributes as variables
  -- so that the caching system can notice when they change.
  local unit_attribute_memory = EoHS.get_fake_subtag(variables, "unit_attribute_memory")
  if unit_attribute_memory.type ~= unit.type then
    variables.original_type = unit.type
    if unit_attribute_memory.type then
      EoHS.update_all_type_adjustments(unit) -- which calls standardize_unit again
      return true
    else
      unit_attribute_memory.type = unit.type
      did_anything = true
    end
  end
  local remember = function(varname)
    if unit_attribute_memory[varname] ~= unit[varname] then
      unit_attribute_memory[varname] = unit[varname]
      did_anything = true
    end
  end
  remember("gender"); remember("variation"); remember("image"); remember("side")
  remember("x"); remember("y")
  local status_memory = EoHS.get_fake_subtag(unit_attribute_memory, "status")
  local status = EoHS.get_subtag(unit, "status")
  for i,k in ipairs({"poisoned","slowed"}) do
    if status_memory[k] ~= status[k] then
      status_memory[k] = status[k]
      did_anything = true
    end
  end
  local resistance_memory = EoHS.get_fake_subtag(unit_attribute_memory, "resistance")
  local resistance = EoHS.get_subtag(unit, "resistance")
  local resistance_changed = false
  for k,v in pairs(resistance) do
    if resistance_memory[k] ~= v then
      resistance_memory[k] = v
      resistance_changed = true
      did_anything = true
    end
  end
  if resistance_changed then
    EoHS.update_circle_of_protection_ability(unit)
    --[[local abilities = EoHS.force_subtag(unit, "abilities")
    EoHS.remove_subtags(abilities, "resistance", "EoHS_circle_of_protection")
    for k,v in pairs(resistance) do
      table.insert(abilities, {"resistance",{
        id = "EoHS_circle_of_protection",
        apply_to = k,
        affect_self = true,
        active_on = "defense",
            value = 100-math.ceil(v/2),
        max_value = 100-math.ceil(v/2),
        {"filter",{
          lua_function="wunit_is_in_any_circle_of_protection"
        }}
      }})
    end]]
  end
  
  if EoHS.get_variable("settings_inited") and EoHS.get_variable("settings.eliminate_upkeep") and (unit.upkeep ~= 0) then
    unit.upkeep = 0
    did_anything = true
  end
  
  if not variables.original_name then
    variables.original_name = unit.name
    did_anything = true
  end
  local ability_ids = {}
  for i,subtag in ipairs(unit) do
    if subtag[2].id then subtag_ids[subtag[2].id] = true end
    if subtag[1] == "attack" then
      local special_ids = {}
      local specials = EoHS.force_subtag(subtag[2], "specials")
      for i,special in ipairs(specials) do
        if special[2].id then special_ids[special[2].id] = true end
      end
      for i,special in ipairs(EoHS.universal_attack_specials) do
        if not special_ids[special[2].id] then
          table.insert(specials, special)
          did_anything = true
        end
      end
    end
    if subtag[1] == "abilities" then for i,ability in ipairs(subtag[2]) do if ability[2].id then ability_ids[ability[2].id] = true end end end
  end
  for i,name in ipairs(EoHS.next_scenario_initing_event_names) do
    if not subtag_ids["EoHS_next_scenario_initing_event_"..name] then
      table.insert(unit, EoHS.next_scenario_initing_event(name))
      did_anything = true
    end
  end
  if not ability_ids[EoHS.update_off_turn_menu_invocation_hack_ability[2].id] then
    table.insert(EoHS.force_subtag(unit, "abilities"), EoHS.update_off_turn_menu_invocation_hack_ability)
    did_anything = true
  end
  if not ability_ids[EoHS.despair_receiver_ability[2].id] then
    table.insert(EoHS.force_subtag(unit, "abilities"), EoHS.despair_receiver_ability)
    did_anything = true
  end
  if EoHS.update_mount_hitpoints(unit) then did_anything = true end
  if (not (options and options.dont_update_graphics)) and EoHS.update_unit_graphics(unit) then did_anything = true end -- too slow? TODO evaluate speed of standardize_unit, decide whether to rely on it regenerating stuff...
  return did_anything
end


local scenario_over_event = function()
  EoHS.standardize_units()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  --[[for i,unit in ipairs(units) do
    -- Temporarily remove the hack ability because it won't be valid before preload in the next scenario,
    -- which will cause error messages.
    -- (commented out because it didn't work -the "attempt to call a nil value" might come from elsewhere?)
    EoHS.remove_subtags(unit, "abilities.*", "EoHS_update_off_turn_menu_invocation_hack")
    EoHS.put_unit(unit)
  end]]
  EoHS.set_variable("show_menu_item", false)
  EoHS.set_variable("scenario_inited", false)
  EoHS.set_variable("on_a_side_turn", false)
  --EoHS.set_variable("scenario_vars")
  for side in ipairs(wesnoth.sides) do
    EoHS.score_for_side_completing_game(side)
  end
  EoHS.score_for_game_ending()
end
EoHS.set_simple_event("victory", true, true, false, scenario_over_event)
EoHS.set_simple_event("defeat", true, true, false, scenario_over_event)

local units_func_context = function()
  local funcs = {}
  return function(variable, func) table.insert(funcs, {func=func or variable,variable=func and variable}) end, function(units)
    units.with_variable = {}
    for i,unit in ipairs(units) do
      local variables = EoHS.get_unit_variables(unit)
      for i,func in ipairs(funcs) do if func.variable and variables[func.variable] then
        if units.with_variable[func.variable] then table.insert(units.with_variable[func.variable], unit)
        else units.with_variable[func.variable] = {unit} end
      end end
    end
    for i,func in pairs(funcs) do func.func(units) end
  end
end
local do_side_turn_funcs; EoHS.at_side_turn, do_side_turn_funcs = units_func_context()
EoHS.set_simple_event("side_turn", true, true, true, function()
  EoHS.set_variable("on_a_side_turn", true)
  if not EoHS.get_variable("settings_inited") then EoHS.init_settings() end
  EoHS.update_and_share_persistent_variables_of_current_side()
  
  local swarms_to_move_side = EoHS.get_variable("swarms_to_move_side")
  if swarms_to_move_side then
    EoHS.move_swarms(swarms_to_move_side)
    EoHS.set_variable("swarms_to_move_side")
  end
  
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
    if EoHS.get_unit_variable(unit, "best_max_moves_this_turn") then
      EoHS.set_unit_variable(unit, "best_max_moves_this_turn")
      EoHS.put_unit(unit)
    end
  end
  do_side_turn_funcs(units)
end)
EoHS.soon(function()
  if wesnoth.compare_versions(wesnoth.game_config.version, "<", "1.10.7") then
    EoHS.message(EoHS.substitute(_"Warning: You are running Wesnoth $1|, but EoHS is developed for versions 1.10.7 and later. This may cause bugs.", {wesnoth.game_config.version}))
  end
end)
local do_turn_refresh_funcs; EoHS.at_turn_refresh, do_turn_refresh_funcs = units_func_context()
EoHS.set_simple_event("turn_refresh", true, true, true, function()
  if EoHS.get_variable("client_local_preselect_side_turn") == wesnoth.current.side then
    EoHS.set_variable("client_local_preselect_side_turn")
    EoHS.local_player_can_preselect_skills()
  end
  
  if wesnoth.current.turn == 1 then
    local version = EoHS.synchronize_choice(function() return {v=wesnoth.game_config.version} end).v
    if wesnoth.compare_versions(version, "<", "1.10.7") then
      if wesnoth.sides[wesnoth.current.side].controller == "network" then
        EoHS.message(EoHS.substitute(_"Warning: $1| is running Wesnoth $2|, but EoHS is developed for versions 1.10.7 and later. This may cause bugs.", {EoHS.get_side_variable(wesnoth.current.side, "original_nick"), version}))
      end
    end
  end
  
  EoHS.handle_non_EoHS_terrain_changes("absolute")
  EoHS.update_terrain_changes()
  EoHS.flatten_swarms(wesnoth.current.side)
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  local rituals_finishing = {}
  for i,unit in ipairs(units) do
    if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
    if unit.side == wesnoth.current.side then
      if EoHS.get_unit_variable(unit, "ritual") then
        EoHS.set_unit_action_points_immediate(unit, 0)
        EoHS.set_unit_attribute_immediate(unit, "moves", 0)
        local runes_lit = EoHS.get_unit_variable(unit, "ritual_runes_lit") + 1
        EoHS.set_unit_variable(unit, "ritual_runes_lit", runes_lit)
        EoHS.update_unit_graphics(unit)
        EoHS.put_unit(unit)
        if runes_lit >= EoHS.get_unit_variable(unit, "ritual_runes") then
          table.insert(rituals_finishing, unit)
        end
      else
        EoHS.set_unit_action_points_immediate(unit, 11)
        EoHS.earn_mana_income(unit)
      end
    else
      EoHS.update_orb(unit)
    end
    --EoHS.verify_sync(unit)
  end
  
  do_turn_refresh_funcs(units)
  
  for i,unit in ipairs(rituals_finishing) do
    -- If two rituals happen at the same time, one of them might invoke events. So reload the untis if necessary.
    unit = EoHS.get_unit(EoHS.unit_id(unit))
    if unit then
      local ritual = EoHS.get_unit_variable(unit, "ritual")
      if ritual then
        -- TODO some of this should be in the same file with the other ritual code
        EoHS.set_unit_variable(unit, "ritual")
        EoHS.update_unit_graphics(unit)
        EoHS.put_unit(unit) -- TODO better animations for starting and ending rituals
        local ritual_parameters = EoHS.get_fake_subtag(EoHS.get_unit_variables(unit), "ritual_parameters")
        EoHS.action_message(ritual_parameters, _"$actor_name| ($actor.x|,$actor.y|) finishes casting $ritual|.", {ritual=EoHS.actions[ritual].name})
        EoHS.actions[ritual].conclude(ritual_parameters)
      end
    end
  end
  
  local prepared_trainings = EoHS.synchronize_choice(function()
    local result = {}
    local side_trainings = EoHS.client_local_trainings[wesnoth.current.side]
    if side_trainings then for k,v in pairs(side_trainings) do
      if v.training then table.insert(result, {"training", v.training}) end
      if v.dress_up then table.insert(result, {"dress_up", v.dress_up}) end
    end end
    EoHS.client_local_trainings[wesnoth.current.side] = nil
    return result
  end, function() return {ai=true} end)
  if prepared_trainings.ai then
    EoHS.set_side_variable(wesnoth.current.side, "was_ever_ai", true)
    for i,unit in ipairs(units) do
      if (unit.side == wesnoth.current.side) and unit.canrecruit and EoHS.get_unit_variable(unit, "is_wizard") and not EoHS.get_unit_variable(unit, "is_apprentice") then
        if EoHS.choose_alliance_for_ai(unit) then EoHS.put_unit(unit) end
      end
    end
  else
    -- TODO: un-duplicate code with menu.cfg
    for i,instruction in ipairs(prepared_trainings) do
      if instruction[1] == "training" then
        local unit = EoHS.get_unit(instruction[2].trainer_id)
        EoHS.train_unit_to_skillset(unit, instruction[2])
        EoHS.put_unit(unit)
      end
      if instruction[1] == "dress_up" then
        local unit = EoHS.get_unit(instruction[2].dresser_id)
        EoHS.set_unit_dress_up_options(unit, instruction[2])
        EoHS.update_unit_graphics(unit)
        EoHS.put_unit(unit)
      end
    end
  end
  
  EoHS.comfortably_during_turn = true
end)
local do_side_turn_end_funcs; EoHS.at_side_turn_end, do_side_turn_end_funcs = units_func_context()
EoHS.set_simple_event("side_turn_end", true, false, true, function()
  EoHS.comfortably_during_turn = false
  
  -- can't, side turn end events aren't synced
  --EoHS.update_and_share_persistent_variables_of_current_side()
  EoHS.handle_non_EoHS_terrain_changes("relative")
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    local put = false
    local kill = false
    if EoHS.standardize_unit(unit) then put = true end
    if unit.side == wesnoth.current.side then
      local disappears_after_turns = EoHS.get_unit_variable(unit, "disappears_after_turns")
      if disappears_after_turns then
        if disappears_after_turns <= 0 then
          kill = true
        else
          EoHS.set_unit_variable(unit, "disappears_after_turns", disappears_after_turns - 1)
          EoHS.update_summon_trability_info(unit, true)
          if disappears_after_turns < EoHS.max_summon_duration_overlays then
            EoHS.remove_a_summon_duration_overlay(unit)
          end
          put = true
        end
      end
    end
    if kill then wesnoth.fire("kill", {x=unit.x,y=unit.y,animate=false,fire_event=false})
    else
      if put then EoHS.put_unit(unit) end
    end
  end
  do_side_turn_end_funcs(units)
  EoHS.set_variable("swarms_to_move_side", wesnoth.current.side) -- TODO just put the swarm movement here if the sync issue is fixed
end)
local die_funcs = {}
EoHS.at_die = function(func) table.insert(die_funcs, func) end
EoHS.set_simple_event("die", true, false, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if unit then
    if unit.canrecruit and not wesnoth.eval_conditional({
      {"have_unit",{ side=unit.side, canrecruit=true, {"not",{x=unit.x, y=unit.y}} }}
    }) then
      EoHS.score_for_side_completing_game(unit.side)
    end
    for i,func in ipairs(die_funcs) do func(unit) end
  end
end)
EoHS.set_simple_event("advance", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if EoHS.do_special_advancement_next(unit) then
    EoHS.set_unit_variable(unit, "do_special_advancement_next", true)
    EoHS.put_unit(unit)
  end
end)
EoHS.set_simple_event("post_advance", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  local do_special_advancement = EoHS.get_unit_variable(unit, "do_special_advancement_next")
  if do_special_advancement then
    EoHS.set_unit_variable(unit, "do_special_advancement_next")
    if EoHS.get_unit_variable(unit, "is_summon") then
      EoHS.set_unit_variable(unit, "advanced_as_summon", unit.type)
    end
    if EoHS.get_unit_variable(unit, "is_wizard") then
      EoHS.set_unit_variable(unit, "wizard_level", (EoHS.get_unit_variable(unit, "wizard_level") or unit.level) + 1)
    end
  end
  if not EoHS.get_unit_variable(unit, "spiritform") then EoHS.set_unit_variable(unit, "original_type", unit.type) end
  EoHS.update_all_type_adjustments(unit) -- This calls standardize_unit
  if do_special_advancement then
    -- It seems that when a unit levels up into its own type, it doesn't get fully healed.
    -- This behavior is undesirable.
    unit.hitpoints = unit.max_hitpoints
  end
  EoHS.put_unit(unit)
  -- Gently remind the user to train this unit
  if EoHS.unit_can_train(unit) then
    EoHS.remembered_dialog_mode = "training"
    EoHS.remembered_trainer_id = EoHS.unit_id(unit)
  end
end)
EoHS.set_simple_event("prerecruit", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if EoHS.side_is_angerpersonified(unit.side) then unit.gender = "female" end
  EoHS.standardize_unit(unit)
  
  if EoHS.get_unit_variable(unit, "is_wizard") then
    EoHS.set_unit_dress_up_options(unit, EoHS.random_dress_up_options(unit))
    local modifications = EoHS.force_subtag(unit, "modifications")
    table.insert(modifications, 1, {"trait",{
      id = "EoHS_wizard",
      name = _"apprentice",
    }})
    local skillset = EoHS.get_unit_skillset(unit)
    EoHS.init_skillset(skillset)
    EoHS.set_unit_variable(unit, "extra_action_points", 0)
    EoHS.set_unit_variable(unit, "mana", 0)
    EoHS.update_unit_graphics(unit)
    EoHS.update_wizard_trait_desc(unit)
    EoHS.update_orb(unit)
    EoHS.put_unit(unit)
    -- Gently remind the user to train this unit
    EoHS.remembered_dialog_mode = "training"
    EoHS.remembered_trainer_id = EoHS.unit_id(unit)
  end
  
  if (unit.type == "Pirate Galleon") or (unit.type == "Transport Galleon") then
    local modifications = EoHS.force_subtag(unit, "modifications")
    table.insert(modifications, {"trait",{
      id="EoHS_portable",
      name=_"portable",
      description=_"EoHS ships can be ported slowly across land, so that it's not so arbitrary whether your castle is connected to water.",
      {"effect",{
        apply_to="movement_costs",
        replace=true,
        {"movement_costs",{
          -- omitting only impassable, chasms, and mountains, which many units can't cross anyway.
          flat=unit.max_moves, fungus=unit.max_moves, hills  =unit.max_moves,
          sand=unit.max_moves, forest=unit.max_moves, village= 2,
          cave=unit.max_moves, frozen=unit.max_moves, castle = 2,
        }}
      }},
      {"effect",{
        apply_to="defense",
        replace=true,
        {"defense",{
          village= 60,
          castle = 60,
        }}
      }},
    }})
  end
  
  if not EoHS.get_unit_variable(unit, "is_summon") then
    EoHS.set_unit_variable(unit, "gold_paid", unit.cost)
  end
  
  if unit.race == "undead" then EoHS.set_unit_variable(unit, "is_reanimated", true) end

  EoHS.put_unit(unit)
end)

EoHS.set_simple_event("recall", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  EoHS.replace_lich_with_recall_crypt(unit)
  EoHS.place_recall_lich_near_crypt(unit)
end)

-->>)}
