#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("enchantments.cfg")

EoHS_explicit_enchantments = {} -- the spells/ directory will add to this
EoHS_transmogrifications = {} -- the spells/ directory will add to this

function eohs_preprocess_enchantment_data()
  for i,enchantment_pair in ipairs(EoHS_explicit_enchantments) do
    local enchantment_info = enchantment_pair[2]

    enchantment_info.id = enchantment_pair[1]
  end
  for i,transmogrification_pair in ipairs(EoHS_transmogrifications) do
    local transmogrification_info = transmogrification_pair[2]

    transmogrification_info.id = transmogrification_pair[1]
  end
end

function note_attributes_whose_regeneration_is_required_by_effect(attributes_to_regenerate, effect_contents)
  if effect_contents.apply_to == "new_attack"     then attributes_to_regenerate.attack         = true
  elseif effect_contents.apply_to == "remove_attacks" then attributes_to_regenerate.attack         = true
  elseif effect_contents.apply_to == "attack" then eohs_error("An enchantment used an attack-modifying [effect] when it should have used [weapon_modifications].")
  elseif effect_contents.apply_to == "hitpoints"      then attributes_to_regenerate.max_hitpoints  = true
  elseif effect_contents.apply_to == "movement"       then attributes_to_regenerate.max_moves      = true
  elseif effect_contents.apply_to == "max_experience" then attributes_to_regenerate.max_experience = true
  elseif effect_contents.apply_to == "movement_costs" then attributes_to_regenerate.movement_costs = true
  elseif effect_contents.apply_to == "defense"        then attributes_to_regenerate.defense        = true
  elseif effect_contents.apply_to == "resistance"     then attributes_to_regenerate.resistance     = true
  elseif effect_contents.apply_to == "variation"      then eohs_error("Changing variation in an enchantment effect is not supported.")
  elseif effect_contents.apply_to == "type"           then eohs_error("Changing unit type in an enchantment effect is not supported.")
  elseif effect_contents.apply_to == "status"         then eohs_error("Changing statuses in an enchantment effect is not supported.")
  elseif effect_contents.apply_to == "zoc"            then attributes_to_regenerate.zoc            = true
  elseif effect_contents.apply_to == "profile"        then eohs_error("Changing profile in an enchantment effect is not supported.")
  elseif effect_contents.apply_to == "new_ability"    then attributes_to_regenerate.abilities      = true
  elseif effect_contents.apply_to == "remove_ability" then attributes_to_regenerate.abilities      = true
  elseif effect_contents.apply_to == "loyal" or effect_contents.apply_to == "new_animation" or effect_contents.apply_to == "image_mod" or effect_contents.apply_to == "ellipse" then
    -- "loyal", "new_animation", "image_mod", and "ellipse" are also supported, but (AFAICT) require no regeneration.
  else
    eohs_error("Unrecognized apply_to in an enchantment effect.")
  end
end

function grant_explicit_enchantment(unit, enchantment_id)
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")
  local enchantments = ensure_presence_of_and_get_subtag(variables, "EoHS_enchantments")
  if not enchantments[enchantment_id] then
    enchantments[enchantment_id] = "true"
    local enchantment_info = helper.get_child(EoHS_explicit_enchantments, enchantment_id)
    local enchantment_effects_object_contents = { id="EoHS_explicit_enchantment_object_for_"..enchantment_id } -- the implementation of the regeneration spell currently relies on this id
    local attributes_to_regenerate = {}
    --local regenerate_graphics = false
    for i,enchantment_effect in ipairs(enchantment_info) do
      --if enchantment_effect[1] == "fancy_overlay" then
      --  regenerate_graphics = true
      --end

      if enchantment_effect[1] == "weapon_modifications" then
        -- The attribute regeneration code handles this
        attributes_to_regenerate.attack = true
      end

      if enchantment_effect[1] == "effect" then
        note_attributes_whose_regeneration_is_required_by_effect(attributes_to_regenerate, enchantment_effect[2])
        table.insert(enchantment_effects_object_contents, enchantment_effect)
      end
    end
    
    if enchantment_effects_object_contents[1] then
      local modifications = ensure_presence_of_and_get_subtag(unit, "modifications")
      table.insert(modifications, { "object", enchantment_effects_object_contents })
    end

    regenerate_unit_attributes(unit, attributes_to_regenerate)
    regenerate_unit_graphics(unit)
    if enchantment_info.application_effects then enchantment_info.application_effects(unit) end
  end
end


function remove_explicit_enchantment(unit, enchantment_id)
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")
  local enchantments = ensure_presence_of_and_get_subtag(variables, "EoHS_enchantments")
  if enchantments[enchantment_id] then
    enchantments[enchantment_id] = nil
    local enchantment_info = helper.get_child(EoHS_explicit_enchantments, enchantment_id)
    local attributes_to_regenerate = {}
    --local regenerate_graphics = false

    for i,enchantment_effect in ipairs(enchantment_info) do
      --if enchantment_effect[1] == "fancy_overlay" then
      --  regenerate_graphics = true
      --end

      if enchantment_effect[1] == "weapon_modifications" then
        attributes_to_regenerate.attack = true
      end

      if enchantment_effect[1] == "effect" then
        note_attributes_whose_regeneration_is_required_by_effect(attributes_to_regenerate, enchantment_effect[2])
      end
    end

    local modifications = helper.get_child(unit, "modifications")
    if modifications then
      local our_object_contents,our_object_index = helper.get_child(modifications, "object", "EoHS_explicit_enchantment_object_for_"..enchantment_id)
      if our_object_contents then table.remove(modifications, our_object_index) end
    end

    regenerate_unit_attributes(unit, attributes_to_regenerate)
    regenerate_unit_graphics(unit)

    if enchantment_info.removal_effects then enchantment_info.removal_effects(unit) end
  end
end

-- not to be used for actual spell effects. mainly useful to strip a unit to its core attributes in order to measure things about it.
function remove_all_enchantments(unit)
  for i,enchantment_pair in ipairs(EoHS_explicit_enchantments) do
    remove_explicit_enchantment(unit, enchantment_pair[1])
  end
end

function transmogrify_and_put_and_display_unit(unit, transmogrification_id)
  transmogrify_unit(unit, transmogrification_id)
  wesnoth.put_unit(unit)

  local transmogrification_info = helper.get_child(EoHS_transmogrifications, transmogrification_id)
  wesnoth.float_label(unit.x, unit.y, "<span color='#"..transmogrification_info.color.."'>"..transmogrification_info.displayed_string.."</span>")
  wesnoth.fire("redraw")

  potential_death_by_terrain(unit.x, unit.y)
end

function reverse_outermost_transmogrification_and_put_and_display_unit(unit)
  reverse_outermost_transmogrification(unit)
  wesnoth.put_unit(unit)

  wesnoth.fire("redraw")

  potential_death_by_terrain(unit.x, unit.y)
end

function transmogrify_unit(unit, transmogrification_id)
  local less_transmogrified_form = naive_deep_copy(unit)
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")
  table.insert(variables, { "less_transmogrified_form", less_transmogrified_form })

  local transmogrification_info = helper.get_child(EoHS_transmogrifications, transmogrification_id)

  set_unit_eohs_special(unit, "has_been_transmogrified")
  variables.transmogrification_id = transmogrification_id
  unit.type = transmogrification_info.type
  unit_type_was_just_replaced(unit)

  transmogrified_in_either_direction(unit)
  
  unit.hitpoints = math.max(1, math.floor(less_transmogrified_form.hitpoints * (unit.max_hitpoints / less_transmogrified_form.max_hitpoints)))
  unit.moves = math.floor(less_transmogrified_form.moves * (unit.max_moves / less_transmogrified_form.max_moves))
end

function reverse_outermost_transmogrification(unit)
  local variables = helper.get_child(unit, "variables")
  local more_transmogrified_form = naive_deep_copy(unit)
  local less_transmogrified_form,less_transmogrified_form_variable_index = helper.get_child(variables, "less_transmogrified_form")
  local less_transmogrified_form_variables = helper.get_child(less_transmogrified_form, "variables")
  
  local transmogrification_info = helper.get_child(EoHS_transmogrifications, transmogrification_id)

  if not unit_has_eohs_special(less_transmogrified_form, "has_been_transmogrified") then clear_unit_eohs_special(unit, "has_been_transmogrified") end
  variables.transmogrification_id = less_transmogrified_form_variables.transmogrification_id
  unit.type = less_transmogrified_form.type
  unit_type_was_just_replaced(unit)

  if less_transmogrified_form_variables then
    local doubly_less_transmogrified_form = helper.get_child(less_transmogrified_form_variables, "less_transmogrified_form")
    if doubly_less_transmogrified_form then
      table.insert(variables, { "less_transmogrified_form", doubly_less_transmogrified_form })
    end
  end
  table.remove(variables, less_transmogrified_form_variable_index)

  transmogrified_in_either_direction(unit)

  unit.hitpoints = math.max(1, math.floor(more_transmogrified_form.hitpoints * (unit.max_hitpoints / more_transmogrified_form.max_hitpoints)))
  unit.moves = math.floor(more_transmogrified_form.moves * (unit.max_moves / more_transmogrified_form.max_moves))
end


function transmogrified_in_either_direction(unit)
  local modifications = ensure_presence_of_and_get_subtag(unit, "modifications")
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")

  -- remove the old objects
  local i = 1
  while modifications[i] do
    if modifications[i][1] == "object" and modifications[i][2].id == "transmogrification_object" then
      table.remove(modifications, i)
    else
      i = i + 1
    end
  end

  -- remove all old after-regenerating functions
  local i = 1
  while variables[i] do
    if string.match(variables[i][1], "after_regenerating") and variables[i][2].id == "transmogrification_func" then
      table.remove(variables, i)
    else
      i = i + 1
    end
  end

  -- add the new ones
  local transmogrification_info = helper.get_child(EoHS_transmogrifications, get_unit_variable(unit, "transmogrification_id"))
  if transmogrification_info then
    for object in helper.child_range(transmogrification_info, "object") do
      object.id = "transmogrification_object"
      table.insert(modifications, { "object", object })
    end

    if transmogrification_info.xp_is_for_natural_form_only then
      table.insert(variables, { "after_regenerating_max_experience", { id = "transmogrification_func", lua_function = "set_to_9999_xp" }})
    end
    if transmogrification_info.preserve_maxhp then
      table.insert(variables, { "after_regenerating_max_hitpoints", { id = "transmogrification_func", lua_function = "set_to_natural_form_max_hp" }})
    end
    if transmogrification_info.preserve_level then
      table.insert(variables, { "after_regenerating_level", { id = "transmogrification_func", lua_function = "set_to_natural_form_level" }})
    end
  end

  -- all kinds of stuff can change: don't risk bugs by missing any regenerable values.
  -- note that nothing after this should modify regenerable values.
  regenerate_unit_attributes(unit, all_regenerable_unit_attributes)

  local undead_trait, undead_trait_index = helper.get_child(modifications, "trait", "undead")
  if undead_trait and unit.race ~= "undead" then
    table.remove(modifications, undead_trait_index)
    set_unit_subtag_value(unit, "status", "not_living")
  end
  if (not undead_trait) and unit.race == "undead" then
    table.insert(modifications, wesnoth.get_variable("undead_trait")[1])
    set_unit_subtag_value(unit, "status", "not_living", true)
  end

  if get_unit_subtag_value(unit, "status", "not_living") then
    set_unit_subtag_value(unit, "status", "poisoned")
  end

  -- the (un)transmogrification may very well have reduced max XP
  set_unit_eohs_special(unit, "might_level_up_soon")
end

function set_to_9999_xp(unit)
  unit.max_experience = 9999
end

function set_to_natural_form_value(unit, attribute)
  local proxy_unit = naive_deep_copy(unit)
  reverse_outermost_transmogrification(proxy_unit)
  unit[attribute] = proxy_unit[attribute]
end

function set_to_natural_form_max_hp(unit)
  set_to_natural_form_value(unit, "max_hitpoints")
end
function set_to_natural_form_level(unit)
  set_to_natural_form_value(unit, "level")
end

  >>
[/lua]

