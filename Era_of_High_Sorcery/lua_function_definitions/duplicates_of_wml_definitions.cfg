#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("duplicates_of_wml_definitions.cfg")

function unit_has_eohs_special(unit, special)
  return boolean_equals_true(get_unit_variable(unit, "EoHS_special_"..special))
end
function set_unit_eohs_special(unit, special)
  set_unit_variable(unit, "EoHS_special_"..special, "true")
end
function get_unit_eohs_skills(unit)
  local variables = helper.get_child(unit, "variables")
  if not variables then return nil end
  return helper.get_child(variables, "EoHS_skills")
end
function set_unit_eohs_skill(unit, skill, value)
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")
  local EoHS_skills = ensure_presence_of_and_get_subtag(variables, "EoHS_skills")
  EoHS_skills[skill] = value
end
function skills_include_realm_skill(skills, realm, level)
  local skill = skills[realm.."_skill"]
  return skill and skill >= level
end
function clear_unit_eohs_special(unit, special)
  set_unit_variable(unit, "EoHS_special_"..special)
end
function get_unit_variable(unit, varname, default_value)
  return get_unit_subtag_value(unit, "variables", varname, default_value)
end
function set_unit_variable(unit, varname, value)
  set_unit_subtag_value(unit, "variables", varname, value)
end

function get_unit_subtag_value(unit, subtag_name, varname, default_value)
  local subtag = helper.get_child(unit, subtag_name)
  if subtag and subtag[varname] then
    return subtag[varname]
  else
    return default_value
  end
end
function set_unit_subtag_value(unit, subtag_name, varname, value)
  local subtag = helper.get_child(unit, subtag_name)
  if not subtag then
    table.insert(unit, { subtag_name, {} })
    subtag = helper.get_child(unit, subtag_name)
  end
  subtag[varname] = value
end

function ensure_presence_of_and_get_subtag(table_, subtag_name)
  local subtag,index = helper.get_child(table_, subtag_name)
  if subtag == nil then
    table.insert(table_, { subtag_name, {} })
    subtag,index = helper.get_child(table_, subtag_name)
  end
  return subtag,index
end


obstructing_terrains="Mm^Xm,Md^Xm,Xu,Xv,Xos,*^Xo,_off^_usr,_s,_f"
-- duplicate definition:
function terraintype_is_obstructing_terrain(terrain)
  return string.match(terrain, "^[_X]") or string.match(terrain, "%^X")
end
is_petrified = { "filter_wml", { { "status", {  petrified="true" }} }}
is_on_the_map = { "and", {
  x="1-$map_size.width",
  y="1-$map_size.height",
}}
-- note: is_reasonable_location is different: you can write { "filter_radius", is_reasonable_location }
-- or { "and", is_reasonable_location }
-- but you can't put is_reasonable_location directly as an element of a location filter.
is_reasonable_location = {
  x="1-$map_size.width",
  y="1-$map_size.height",
  { "not", {
    terrain=obstructing_terrains
  }}
}

function is_same_unit_as(unit)
  return { "filter_wml", { underlying_id = unit.underlying_id }}
end

function has_explicit_enchantment(enchantment_id)
  local result =
    { "filter_wml", {
      { "variables", {
        { "EoHS_enchantments", {
        }}
      }}
    }}
  result[2][1][2][1][2][enchantment_id]=true
  return result
end
function outermost_transmogrification_is(transmogrification_id)
  return { "filter_wml", {
    { "variables", {
      transmogrification_id = transmogrification_id
    }}
  }}
end
function has_eohs_special(special)
  local result =
    { "filter_wml", {
      { "variables", {
        
      }}
    }}
  result[2][1][2]["EoHS_special_"..special]=true
  return result
end

function unit_has_explicit_enchantment(unit, enchantment)
  local variables = helper.get_child(unit, "variables")
  if variables == nil then return false end
  local enchantments = helper.get_child(variables, "EoHS_enchantments")
  if enchantments == nil then return false end

  return boolean_equals_true(enchantments[enchantment])
end

function unit_is_living(unit) return not boolean_equals_true(get_unit_subtag_value(unit, "status", "not_living")) end
function unit_is_living_or_undead(unit) return unit_is_living(unit) or unit.race == "undead" end

function location_is_reasonable(x, y)
  return location_is_on_the_map(x, y) and not location_is_obstructing_terrain(x, y)
end
function location_is_on_the_map(x, y)
  w,h,b = wesnoth.get_map_size()
  return x >= 1 and x <= w and y >= 1 and y <= h
end
function location_is_obstructing_terrain(x, y)
  return terraintype_is_obstructing_terrain(wesnoth.get_terrain(x, y))
end

  >>
[/lua]

