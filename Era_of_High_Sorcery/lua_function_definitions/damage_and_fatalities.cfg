#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("damage_and_fatalities.cfg")

function damage_modified_for_resistance_of_hex_inhabitant(x, y, damage, damage_type)
  local unit = get_unit_table({x=x,y=y})

  if damage_type == "generic" then return damage end
  
  if unit == nil then
    return damage
  else
    -- "0.5 rounds to nearest but towards original value"
    local resistance = helper.get_child(unit, "resistance")[damage_type]
    damage = damage * resistance
    if resistance > 100 then
      -- damage is increased - 0.5 rounds down
      damage = damage + 49
    else
      -- damage is increased - 0.5 rounds up
      damage = damage + 50
    end
    damage = math.floor(damage / 100)
    if damage > 1 then return damage else return 1 end
  end
end

function damage_hex_no_killing(x, y, damage, damage_type, bypasses_immunity, perpetrator)
  damage = damage_modified_for_resistance_of_hex_inhabitant(x, y, damage, damage_type)

  local victim = get_unit_table({x=x,y=y})
  if victim == nil then
    wesnoth.float_label(x, y, "<span color='#ff0000'>"..damage.."</span>")
  elseif location_has_a_circle_of_protection(x, y) or boolean_equals_true(helper.get_child(victim, "status").petrified) then
    wesnoth.float_label(x, y, "<span color='#8080ff'>"..damage..(_" (blocked)").."</span>")
  else
    victim.resting = false -- this'll be put, since both the "then" and "else" below do put_unit

    if unit_has_eohs_special(victim, "immune_to_direct_damage") and not bypasses_immunity then
      wesnoth.put_unit(victim)
      wesnoth.float_label(x, y, "<span color='#8080ff'>"..damage..(_" (blocked)").."</span>")
    else
      victim.hitpoints = victim.hitpoints - damage
      set_unit_eohs_special(victim, "took_damage_recently")
      wesnoth.put_unit(victim)
      wesnoth.float_label(x, y, "<span color='#ff0000'>"..damage.."</span>")

      unit_got_hit(victim, damage, perpetrator)
      killer = updated_unit_table(victim)
      if victim ~= nil and victim.hitpoints < 0 then
        victim.hitpoints = 0
        wesnoth.put_unit(victim)
      end
    end
  end
end

function apply_delayed_kills(killer)
  full_kill(killer, { has_eohs_special("took_damage_recently"), { "filter_wml", { hitpoints = 0 }}}, true, true)
  units = get_unit_array({ has_eohs_special("took_damage_recently") })
  for i,unit in ipairs(units) do
    clear_unit_eohs_special(unit, "took_damage_recently")
    wesnoth.put_unit(unit)
  end
end

function potential_death_by_terrain(x, y, perpetrator)
  local terrain = wesnoth.get_terrain(x, y)
  local can_be_chasmed_here = false
  local can_be_drowned_here = false
  if terrain == "Ql" or terrain == "Qlf" or terrain == "Qxu" or terrain == "Ql^li" or terrain == "Qlf^li" or terrain == "Qxu^li" then can_be_chasmed_here = true end
  if terrain == "Wo" or terrain == "Wo^li" then can_be_drowned_here = true end

  if can_be_chasmed_here or can_be_drowned_here then
    local victim = get_unit_table({x=x,y=y})
    if victim ~= nil then
      function do_terrain_kill() 
        if can_be_chasmed_here then wesnoth.fire("sound", { name="gryphon-shriek-1.ogg" }) end
        if can_be_drowned_here then wesnoth.float_label(x, y, "<span color='#0000ff'>".. _"drowned" .."</span>") end
        full_kill(perpetrator, { x=x, y=y }, not can_be_chasmed_here, true)
      end
      if unit_has_eohs_special(victim, "is_mounted") then
        local rider, mount = rider_and_mount_when_combination_splits(victim)
        -- hack: assume that the rider never dies
        if not unit_can_move_on_hex(mount, x, y) then
          wesnoth.put_unit(x,y)
          wesnoth.put_unit(mount)
          do_terrain_kill()
          wesnoth.put_unit(x,y)
          wesnoth.put_unit(rider)
        end
      elseif not unit_can_move_on_hex(victim, x, y) then
        do_terrain_kill()
      end
    end
  end
end

-- assumes killer is on the map, unstores
function full_kill(killer, victim_filter, animates, gains_experience)
  -- set global variable...
  wesnoth.set_variable("a_full_kill_is_executing", true)
  local auto_stored_vars = save_auto_stored_vars()

  -- Get the initial set of victims - it can never be expanded beyond this, but it can be reduced if the filter no longer matches.
  local victims = get_unit_array(victim_filter)
  killer = updated_unit_table(killer)

  local experience_gained = 0

  -- Even units that don't get past "last breath" give experience. Total up the experience.
  if gains_experience and killer ~= nil then
    for i,victim in ipairs(victims) do
      experience_gained = experience_gained + xp_for_kill(victim)
    end
    -- Because the unit is normally displayed with the XP while the events trigger:
    if killer.experience == nil then killer.experience = 0 end
    killer.experience = killer.experience + experience_gained
    wesnoth.put_unit(killer)
  end

  for i,original_victim in ipairs(victims) do
    killer = updated_unit_table(killer)
    local victim = get_unit_table({ is_same_unit_as(original_victim), { "and", victim_filter } })
    if victim ~= nil then
      if killer ~= nil then
        wesnoth.fire_event("last breath", victim.x, victim.y, killer.x, killer.y)
      else
        wesnoth.fire_event("last breath", victim.x, victim.y, victim.x, victim.y)
      end
    end
  end

  cull_unit_array(victims, victim_filter)
  
  if animates then
    local animation_hack = nil

    for i,victim in ipairs(victims) do
      if animation_hack then
        animation_hack = {
          flag = "death",
          { "filter", { is_same_unit_as(victim) }},
          { "animate", animation_hack }
        }
      else
        animation_hack = {
          flag = "death",
          { "filter", { is_same_unit_as(victim) }}
        }
      end
    end

    if animation_hack ~= nil then
      --I don't know if redrawing before animating does anything, but it might avoid some graphical error.
      -- (We can't redraw after animating until the units are thoroughly gone.)
      wesnoth.fire("redraw", {})
      eohs_animate_unit(animation_hack)
    end
  end

  for i,original_victim in ipairs(victims) do
    killer = updated_unit_table(killer)
    local victim = get_unit_table({ is_same_unit_as(original_victim), { "and", victim_filter } })
    if victim ~= nil then
      if killer ~= nil then
        wesnoth.fire_event("die", victim.x, victim.y, killer.x, killer.y)
      else
        wesnoth.fire_event("die", victim.x, victim.y, victim.x, victim.y)
      end
    end
  end

  cull_unit_array(victims, victim_filter)

  for i,victim in ipairs(victims) do
    -- remove the unit from the map
    wesnoth.put_unit(victim.x, victim.y)
  end
  -- do not cull after this (it would only clear the list)

  -- If we're told not to animate, don't animate anything - not even redrawing to clean stuff up.
  if animates then
    for i,victim in ipairs(victims) do
      -- Fog covers the bodies...
      wesnoth.fire("redraw", { side=victim.side })
    end
  end

  if gains_experience and experience_gained > 0 then
    killer = updated_unit_table(killer) -- necessary because we didn't necessarily update after the last "die" event
    if killer ~= nil then
      unit_just_recieved_experience(killer, experience_gained, true, true)
    end
  end

  -- reset global variable...
  wesnoth.set_variable("a_full_kill_is_executing")
  load_auto_stored_vars(auto_stored_vars)
end

  >>
[/lua]

