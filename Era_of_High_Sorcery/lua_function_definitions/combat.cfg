#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("combat.cfg")

function create_eohs_combat_events()
  wesnoth.fire("event", {
    name = "attack",
    first_time_only = "no",
    { "lua", {
      code = "eohs_begin_combat()",
    }},
  })
  wesnoth.fire("event", {
    name = "attacker hits",
    first_time_only = "no",
    { "lua", {
      code = 'eohs_unit_hits_in_combat("", "second_")',
    }},
  })
  wesnoth.fire("event", {
    name = "defender hits",
    first_time_only = "no",
    { "lua", {
      code = 'eohs_unit_hits_in_combat("second_", "")',
    }},
  })
  wesnoth.fire("event", {
    name = "attack end",
    first_time_only = "no",
    { "lua", {
      code = "eohs_finish_combat()",
    }},
  })
end

function eohs_begin_combat()
  local attacker = wesnoth.get_variable("unit")
  local defender = wesnoth.get_variable("second_unit")

  -- Make sure these units have the necessary attack specials.
  recognize_unit(attacker)
  recognize_unit(defender)

  -- Temporarily increase experience required, so that the attack calculations don't have to deal with the possibility of advancement
  local attacker_real_max_experience = attacker.max_experience
  attacker.max_experience = math.max(attacker.max_experience, attacker.experience + defender.level + 1)
  wesnoth.put_unit(attacker)
  local defender_real_max_experience = defender.max_experience
  defender.max_experience = math.max(defender.max_experience, defender.experience + attacker.level + 1)
  wesnoth.put_unit(defender)

  local attacker_lua_unit = wesnoth.get_units({ x=wesnoth.current.event_context.x1, y=wesnoth.current.event_context.y1 })[1]
  local defender_lua_unit = wesnoth.get_units({ x=wesnoth.current.event_context.x2, y=wesnoth.current.event_context.y2 })[1]

  local attack_index = 0
  for attack in helper.child_range(attacker, "attack") do
    attack_index = attack_index + 1
    -- If this attack matches the one used in the combat, then this is the one we want:
    -- (If the unit has multiple identical attacks, then the combat results would be the same for them anyway.)
    if tags_are_identical(attack, helper.get_child(wesnoth.current.event_context, "weapon")) then break end
  end

  local attacker_stats, defender_stats = wesnoth.simulate_combat(attacker_lua_unit, attack_index, defender_lua_unit)

  -- We've calculated the stats: put the experience values back how they should be before we screw anything up.
  attacker.max_experience = attacker_real_max_experience
  wesnoth.put_unit(attacker)
  defender.max_experience = defender_real_max_experience
  wesnoth.put_unit(defender)

  if attacker_stats.hp_chance[attacker.hitpoints] == 1 and defender_stats.hp_chance[defender.hitpoints] == 1 then
    -- Both combatants will have nothing happen to them! This is not a real combat!

    -- Cancel the unfairly gained experience:
    attacker.experience = attacker.experience - defender.level
    defender.experience = defender.experience - attacker.level

    -- Give the attacker its attack back, to prevent players from pointlessly wasting (for instance) caster's attacks
    -- (We did do this, but it sometimes makes the AI stall...)
    -- attacker.attacks_left = attacker.attacks_left + 1

    wesnoth.put_unit(attacker)
    wesnoth.put_unit(defender)

    -- Note that the attack is bogus, for the benefit of any further events that may trigger.
    wesnoth.set_variable("most_recent_attack_is_bogus", "true")
  else
    -- This is a real attack. Clear the "attack is bogus" variable.
    wesnoth.set_variable("most_recent_attack_is_bogus")

    -- A pox on your rules, Wesnoth. I, not you, will decide how much experience my units receive for the combat.
    set_unit_variable(attacker, "experience_given_by_wesnoth", defender.level)
    set_unit_variable(defender, "experience_given_by_wesnoth", attacker.level)
    set_unit_variable(attacker, "experience_before_combat", attacker.experience)
    set_unit_variable(defender, "experience_before_combat", defender.experience)

    set_unit_variable(attacker, "role_in_this_attack", "attacker")
    set_unit_variable(defender, "role_in_this_attack", "defender")

    set_unit_variable(attacker, "damage_taken_in_this_attack", 0)
    set_unit_variable(defender, "damage_taken_in_this_attack", 0)

    attack_involving_unit_started(attacker)
    attack_involving_unit_started(defender)

    wesnoth.put_unit(attacker)
    wesnoth.put_unit(defender)
  end
end

function attack_involving_unit_started(unit)
  -- If Wesnoth sees a unit hit another unit and reduce it to 0 hitpoints, it terminates the combat, even if we raise the hitpoints back above 0 afterwards. So, for shielded units, we artificially increase their hitpoints FIRST.
  if unit_has_explicit_enchantment(unit, "mage_shield") then
    set_mage_shield_extra_hitpoints(unit, (unit.max_hitpoints + 100) - unit.hitpoints)
  end
end

function eohs_unit_hits_in_combat(hitter_prefix, victim_prefix)
  if not wesnoth.get_variable("most_recent_attack_is_bogus") then
    local hitter = wesnoth.get_variable(hitter_prefix.."unit")
    local victim = wesnoth.get_variable(victim_prefix.."unit")

    if victim.hitpoints <= 0 then
      -- A pox on your rules, Wesnoth. I, not you, will decide how much experience my units receive for the combat.
      set_unit_variable(hitter, "experience_given_by_wesnoth", xp_for_kill(victim))
      set_unit_variable(victim, "experience_given_by_wesnoth", 0)
      wesnoth.put_unit(hitter)
      wesnoth.put_unit(victim)
    end
    
    -- Hack - give a range, even when the defending unit didn't have an attack
    local weapon = wesnoth.get_variable(victim_prefix.."weapon")
    if weapon.range == nil then
      weapon.range = wesnoth.get_variable(hitter_prefix.."weapon").range
    end
    unit_got_hit(victim, wesnoth.get_variable("damage_inflicted"), hitter, weapon, wesnoth.get_variable(hitter_prefix.."weapon"), true)
  end
end

function remove_all_attacks_until_end_of_combat(unit, enemy)
  local unit_modifications = ensure_presence_of_and_get_subtag(unit, "modifications")
  table.insert(unit_modifications, { "object", {
    id = "temporary_attack_removal_object",
    { "effect", {
      apply_to = "remove_attacks"
    }},
  }})
  regenerate_unit_attributes(unit, { attack=true })
  wesnoth.put_unit(unit)

  local enemy_modifications = ensure_presence_of_and_get_subtag(enemy, "modifications")
  table.insert(enemy_modifications, { "object", {
    id = "temporary_attack_removal_object",
    { "effect", {
      apply_to = "new_animation",
      { "defend", {
        -- high priority
        {"filter",{}},{"filter",{}},{"filter",{}},{"filter",{}},{"filter",{}},
        -- no duration (this doesn't actually force combat to take no time even if both sides have it, and I think it might default to this much anyway...)
        start_time = 0,
        { "frame", { duration = 0 }}
      }},
    }},
  }})
  wesnoth.put_unit(enemy)
end

function eohs_finish_combat()
  if not wesnoth.get_variable("most_recent_attack_is_bogus") then
    local escaper = get_unit_table({ has_eohs_special("get_out_of_combat_free_card") })
    if escaper then
      clear_unit_eohs_special(escaper, "get_out_of_combat_free_card")
      escaper.underlying_id = get_unit_variable(escaper, "real_underlying_id")
      wesnoth.put_unit(escaper)
    end

    local attacker = get_unit_table({ x=wesnoth.current.event_context.x1, y=wesnoth.current.event_context.y1 })
    local defender = get_unit_table({ x=wesnoth.current.event_context.x2, y=wesnoth.current.event_context.y2 })
    attack_involving_unit_ended(attacker, "attacker", defender)
    attack_involving_unit_ended(defender, "defender", attacker)

    wesnoth.put_unit(attacker)
    wesnoth.put_unit(defender)

    replace_plague(attacker, defender, wesnoth.get_variable("weapon"))
    replace_plague(defender, attacker, wesnoth.get_variable("second_weapon"))
    
    event_is_over_its_okay_to_advance_now()
  end
end

function attack_involving_unit_ended(unit, role, enemy)
  if unit then
    remove_mage_shield_extra_hitpoints(unit)

    local modifications = helper.get_child(unit, "modifications")
    if modifications then
      local i = 1
      while modifications[i] do
        if modifications[i][1] == "object" and modifications[i][2].id == "temporary_attack_removal_object" then
          table.remove(modifications, i)
          regenerate_unit_attributes(unit, { attack=true })
        else
          i = i + 1
        end
      end
    end
    
    -- A pox on your rules, Wesnoth. I, not you, will decide how much experience my units receive for the combat.
    if boolean_equals_true(get_unit_variable(unit, "was_just_reanimated_in_combat")) or
       boolean_equals_true(get_unit_variable(enemy, "was_just_reanimated_in_combat")) then
      -- We usually don't use experience_before_combat, but here we just want a hard reset: no XP for reanimating or being reanimated
      unit.experience = get_unit_variable(unit, "experience_before_combat") - enemy.level
    else
      unit.experience = unit.experience - get_unit_variable(unit, "experience_given_by_wesnoth")
      if unit.hitpoints > 0 and enemy then -- if the enemy is entirely gone, it was killed by WML and experience was already handled separately
        if enemy.hitpoints <= 0 then
          unit.experience = unit.experience + xp_for_kill(enemy)
          unit_just_recieved_experience(unit, xp_for_kill(enemy), false, true)
        else
          unit.experience = unit.experience + enemy.level
          unit_just_recieved_experience(unit, enemy.level, false)
        end
      end
    end
    -- clear the temporary variable
    set_unit_variable(unit, "was_just_reanimated_in_combat")
  end
end

function replace_plague(killer, victim, weapon)
  if killer and victim and victim.hitpoints <= 0 and unit_is_living(victim) and victim.undead_variation ~= "null" and not wesnoth.get_terrain_info(wesnoth.get_terrain(victim.x, victim.y)).village then
    local specials = helper.get_child(weapon, "specials")
    if specials then
      -- assume only one plague ability...
      local plague = helper.get_child(specials, "plague")
      if plague then
        local new_corpse = {
          side = killer.side,
          type = plague.type,
          variation = victim.undead_variation,
          attacks_left = 0,
          moves = 0,
        }
        new_corpse = wesnoth.create_unit(new_corpse).__cfg
        if unit_has_eohs_special(killer, "is_summoned_unit") then
          set_unit_eohs_special(new_corpse, "is_summoned_unit")
          set_unit_variable(new_corpse, "EoHS_owning_unit", get_unit_variable(killer, "EoHS_owning_unit"))
          set_unit_variable(new_corpse, "price_original_summoned_for", new_corpse.cost)
          new_corpse.overlays = "misc/loyal-icon.png"
          modifications = ensure_presence_of_and_get_subtag(new_corpse, "modifications")
          table.insert(modifications, wesnoth.get_variable("loyal_trait")[1])
        end
        full_kill(killer, { is_same_unit_as(victim) }, true, false)
        wesnoth.put_unit(victim.x, victim.y, new_corpse)
        wesnoth.fire("redraw", { side = new_corpse.side })
      end
    end
  end
end

  >>
[/lua]

