#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("graphics.cfg")

--[[

Standard "image" format:
{
  image = (string, including mods)
  offsx = number
  offsy = number
  wizard_offsx = number (cumulative with offsx)
  wizard_offsy = number (cumulative with offsx)
  staffhead_offsx = number (cumulative with offsx)
  staffhead_offsy = number (cumulative with offsx)
}

]]

function image_dimensions(image_name)
  local width, height = wesnoth.get_image_size(string.match(image_name, "[^~]*"))

  for mod in string.gmatch(image_name, "~%a*%b()") do
    local crop_width, crop_height = string.match(mod, "^~CROP%(%d*,%d*,(%d*),(%d*)%)")
    if crop_width then
      width = crop_width
      height = crop_height
    end
    local scale_width, scale_height = string.match(mod, "^~SCALE%((%d*),(%d*)%)")
    if scale_width then
      width = scale_width
      height = scale_height
    end
  end
  return width, height
end

function crop_without_moving(image, crop_params)
  local image_width, image_height = image_dimensions(image.image)
  if crop_params.absolute_coordinates then
    crop_params.x = math.max(crop_params.x or 0, 0)
    crop_params.y = math.max(crop_params.y or 0, 0)
    crop_params.width = math.min(crop_params.width or (image_width - crop_params.x), (image_width - crop_params.x))
    crop_params.height = math.min(crop_params.height or (image_height - crop_params.y), (image_height - crop_params.y))
  else
    crop_params.x1 = math.max(crop_params.x1 or -(image_width / 2),  -(image_width / 2))
    crop_params.x2 = math.min(crop_params.x2 or  (image_width / 2),   (image_width / 2))
    crop_params.y1 = math.max(crop_params.y1 or -(image_height / 2), -(image_height / 2))
    crop_params.y2 = math.min(crop_params.y2 or  (image_height / 2),  (image_height / 2))
    crop_params.x = crop_params.x1 + (image_width / 2)
    crop_params.y = crop_params.y1 + (image_height / 2)
    crop_params.width = crop_params.x2 - crop_params.x1
    crop_params.height = crop_params.y2 - crop_params.y1
  end

  return {
    image = image.image.."~CROP("..crop_params.x..","..crop_params.y..","..crop_params.width..","..crop_params.height..")",
    offsx = (image.offsx or 0) - (image_width / 2) + crop_params.x + (crop_params.width / 2),
    offsy = (image.offsy or 0) - (image_height / 2) + crop_params.y + (crop_params.height / 2),
  }
end

function blit_together(images)
  local result = {}
  local min_x = 0
  local min_y = 0
  local max_x = 0
  local max_y = 0
  for i,image in ipairs(images) do
    local image_width, image_height = image_dimensions(image.image)
    min_x = math.min(min_x, (image.offsx or 0) - (image_width / 2))
    max_x = math.max(max_x, (image.offsx or 0) + (image_width / 2))
    min_y = math.min(min_y, (image.offsy or 0) - (image_height / 2))
    max_y = math.max(max_y, (image.offsy or 0) + (image_height / 2))
  end
  min_x = math.min(min_x, -max_x)
  max_x = math.max(max_x, -min_x)
  min_y = math.min(min_y, -max_y)
  max_y = math.max(max_y, -min_y)
  result.width = (max_x - min_x)
  result.height = (max_y - min_y)
  result.image = "misc/blank-hex.png~SCALE("..result.width..","..result.height..")"
  for i,image in ipairs(images) do
    local image_width, image_height = image_dimensions(image.image)
    result.image = result.image .. "~BLIT("..image.image..","..(-min_x + (image.offsx or 0) - (image_width / 2))..","..(-min_y + (image.offsy or 0) - (image_height / 2))..")"
    -- hack - assume there is always either zero or one images with a staffhead or wizard offset noted
    if image.wizard_offsx then result.wizard_offsx = image.wizard_offsx + (image.offsx or 0) end
    if image.wizard_offsy then result.wizard_offsy = image.wizard_offsy + (image.offsy or 0) end
    if image.staffhead_offsx then result.staffhead_offsx = image.staffhead_offsx + (image.offsx or 0) end
    if image.staffhead_offsy then result.staffhead_offsy = image.staffhead_offsy + (image.offsy or 0) end
  end
  return result
end

  >>
[/lua]

