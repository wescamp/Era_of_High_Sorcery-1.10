#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("graphics.cfg")

--[[

Standard "image" format:
{
  image = (string, including mods)
  offsx = number
  offsy = number
  wizard_offsx = number (cumulative with offsx)
  wizard_offsy = number (cumulative with offsx)
  staffhead_offsx = number (cumulative with offsx)
  staffhead_offsy = number (cumulative with offsx)
}

]]

function strip_image_mods(image_name)
  -- Hack to appease the macro TEAM_COLOR_OVERRIDE, which currently (1.10.6) uses "RC()" when it should use "~RC()"
  if string.match(image_name, "pngRC") then return string.match(image_name, "^(.-)RC") end
  return string.match(image_name, "[^~]*")
end

function image_dimensions(image_name)
  local width, height = wesnoth.get_image_size(strip_image_mods(image_name))

  for mod in string.gmatch(image_name, "~%a*%b()") do
    local crop_width, crop_height = string.match(mod, "^~CROP%(%d*,%d*,(%d*),(%d*)%)")
    if crop_width then
      width = crop_width
      height = crop_height
    end
    local scale_width, scale_height = string.match(mod, "^~SCALE%((%d*),(%d*)%)")
    if scale_width then
      width = scale_width
      height = scale_height
    end
  end
  return width, height
end

function translate_image(image_info, x, y)
  if x and x ~= 0 then
    image_info.offsx = (image_info.offsx or 0) + x
    if image_info.wizard_offsx then image_info.wizard_offsx = image_info.wizard_offsx + x end
    if image_info.staffhead_offsx then image_info.staffhead_offsx = image_info.staffhead_offsx + x end
  end
  if y and y ~= 0 then
    image_info.offsy = (image_info.offsy or 0) + y
    if image_info.wizard_offsy then image_info.wizard_offsy = image_info.wizard_offsy + y end
    if image_info.staffhead_offsy then image_info.staffhead_offsy = image_info.staffhead_offsy + y end
  end
end

function crop_without_moving(image_info, crop_params)
  local image_width, image_height = image_dimensions(image_info.image_name)
  local x1 = -math.floor(image_width  / 2)
  local x2 =  math. ceil(image_width  / 2)
  local y1 = -math.floor(image_height / 2)
  local y2 =  math. ceil(image_height / 2)
  if crop_params.x1 then x1 = math.max(x1, crop_params.x1 - (image_info.offsx or 0)) end
  if crop_params.x2 then x2 = math.min(x2, crop_params.x2 - (image_info.offsx or 0)) end
  if crop_params.y1 then y1 = math.max(y1, crop_params.y1 - (image_info.offsy or 0)) end
  if crop_params.y2 then y2 = math.min(y2, crop_params.y2 - (image_info.offsy or 0)) end
  
  local x = x1 + math.floor(image_width / 2)
  local y = y1 + math.floor(image_height / 2)
  local width  = x2 - x1
  local height = y2 - y1

  local correcting_offsx = x1 + math.floor(width  / 2)
  local correcting_offsy = y1 + math.floor(height / 2)
  local result = {
    image_name = image_info.image_name.."~CROP("..x..","..y..","..width..","..height..")",
    offsx = (image_info.offsx or 0) + correcting_offsx,
    offsy = (image_info.offsy or 0) + correcting_offsy,
    wizard_offsx = image_info.wizard_offsx,
    wizard_offsy = image_info.wizard_offsy,
    staffhead_offsx = image_info.staffhead_offsx,
    staffhead_offsy = image_info.staffhead_offsy,
  }
  return result
end

function blit_together(image_infos)
  local result = {}
  local min_x = 0
  local min_y = 0
  local max_x = 0
  local max_y = 0
  for i,image_info in ipairs(image_infos) do
    local image_width, image_height = image_dimensions(image_info.image_name)
    min_x = math.min(min_x, (image_info.offsx or 0) - math.floor(image_width  / 2))
    max_x = math.max(max_x, (image_info.offsx or 0) + math. ceil(image_width  / 2))
    min_y = math.min(min_y, (image_info.offsy or 0) - math.floor(image_height / 2))
    max_y = math.max(max_y, (image_info.offsy or 0) + math. ceil(image_height / 2))
  end
  result.offsx = math.floor((min_x + max_x) / 2)
  result.offsy = math.floor((min_y + max_y) / 2)
  result.width = (max_x - min_x)
  result.height = (max_y - min_y)
  result.image_name = "misc/blank-hex.png~SCALE("..result.width..","..result.height..")"
  for i,image_info in ipairs(image_infos) do
    local image_width, image_height = image_dimensions(image_info.image_name)
    result.image_name = result.image_name .. "~BLIT("..image_info.image_name..","..(-min_x + (image_info.offsx or 0) - math.floor(image_width / 2))..","..(-min_y + (image_info.offsy or 0) - math.floor(image_height / 2))..")"
    -- hack - assume there is always either zero or one images with a staffhead or wizard offset noted
    if image_info.wizard_offsx then result.wizard_offsx = image_info.wizard_offsx + (image_info.offsx or 0) end
    if image_info.wizard_offsy then result.wizard_offsy = image_info.wizard_offsy + (image_info.offsy or 0) end
    if image_info.staffhead_offsx then result.staffhead_offsx = image_info.staffhead_offsx + (image_info.offsx or 0) end
    if image_info.staffhead_offsy then result.staffhead_offsy = image_info.staffhead_offsy + (image_info.offsy or 0) end
  end
  return result
end

  >>
[/lua]

