#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("experience.cfg")

-- assumes unit is on the map, unstores
function unit_just_recieved_experience(unit, amount_gained, artificially)
  if amount_gained > 0 then
    -- Give the owner half the summons' experience.
    if unit_has_eohs_special(unit, "is_summoned_unit") then
      local owner = get_unit_table({ { "filter_wml", { underlying_id = helper.get_child(unit, "variables").EoHS_owning_unit }} })
      if owner ~= nil then
        -- Do not grant XP to the unit's owner for when the unit KILLS its owner.
        if owner.hitpoints > 0 then
          -- init the variables to 0 if needed, to appease the formulas (which won't take nil to mean 0.)
          if get_unit_variable(unit, "xp_taxed_to_owner")     == nil then set_unit_variable(unit, "xp_taxed_to_owner",     0) end
          if get_unit_variable(unit, "xp_not_taxed_to_owner") == nil then set_unit_variable(unit, "xp_not_taxed_to_owner", 0) end

          set_unit_variable(unit, "xp_not_taxed_to_owner", get_unit_variable(unit, "xp_not_taxed_to_owner") + amount_gained)
          
          local xp_to_give = math.floor((get_unit_variable(unit, "xp_not_taxed_to_owner") - get_unit_variable(unit, "xp_taxed_to_owner")) / 2)
          if xp_to_give > 0 then
            unit.experience =  unit.experience - xp_to_give
            owner.experience = owner.experience + xp_to_give
            set_unit_variable(unit, "xp_not_taxed_to_owner", get_unit_variable(unit, "xp_not_taxed_to_owner") - xp_to_give)
            set_unit_variable(unit, "xp_taxed_to_owner",     get_unit_variable(unit, "xp_taxed_to_owner")     + xp_to_give)
            amount_gained = amount_gained - xp_to_give
            wesnoth.float_label( unit.x,  unit.y, "<span color='#009ddd'>".. "-" .. xp_to_give .. _" xp" .."</span>")
            wesnoth.float_label(owner.x, owner.y, "<span color='#009ddd'>"..        xp_to_give .. _" xp" .."</span>")
  
            wesnoth.put_unit(owner)
            unit_just_recieved_experience(owner, xp_to_give, true)
          end
        end
      end
    end
  
    if get_unit_variable(unit, "experience_gained_since_last_transmogrification") == nil then set_unit_variable(unit, "experience_gained_since_last_transmogrification", 0) end
    set_unit_variable(unit, "experience_gained_since_last_transmogrification", get_unit_variable(unit, "experience_gained_since_last_transmogrification") + amount_gained)
  
    if artificially and amount_gained > 0 then
      set_unit_eohs_special(unit, "might_level_up_soon")
    end

    wesnoth.put_unit(unit)
  end
  return unit
end

function event_is_over_its_okay_to_advance_now()
  local units = get_unit_array({ has_eohs_special("might_level_up_soon") })
  for i,unit in ipairs(units) do
    clear_unit_eohs_special(unit, "might_level_up_soon")
    wesnoth.put_unit(unit)
  end

  for i,unit in ipairs(units) do
    if unit.experience >= unit.max_experience then
      wesnoth.set_variable("EoHS_advancing_unit", unit)
      wesnoth.fire("unstore_unit", { variable="EoHS_advancing_unit", advance="true" })
      wesnoth.set_variable("EoHS_advancing_unit")
    end
  end
end

  >>
[/lua]

