#textdomain wesnoth-Era_of_High_Sorcery

     [set_variables]
        name=old_wizard_anims
        mode=append
        [value]
          [attack_anim]
        [filter_attack]
            name=EoHS_evocation_skill_ranged_attack
        [/filter_attack]
        {MISSILE_FRAME_FIREBALL}

        start_time=-575
        [frame]
            duration=50
            image=base_frame
        [/frame]
        [frame]
            duration=100
            image=attack_frame_1
            sound=fire.wav
        [/frame]
        [frame]
            duration=150
            image=attack_frame_2
        [/frame]
        [frame]
            duration=75
            image=attack_frame_1
        [/frame]
        [frame]
            duration=75
            image=base_frame
        [/frame]
          [/attack_anim]
          [attack_anim]
        [filter_attack]
            name=EoHS_nature_magic_skill_ranged_attack
        [/filter_attack]
        {MISSILE_FRAME_FAERIE_FIRE}
        [frame]
            begin=-450
            end=-375
            image=attack_frame_1
            halo=halo/elven/faerie-fire-halo1.png
            halo_x,halo_y=14,-24
        [/frame]

        [if]
            hits=yes
            [eohs_faeriefire_sound_frame]
                begin=-450
                end=-375
                sound=magic-faeriefire.ogg
            [/eohs_faeriefire_sound_frame]
        [/if]
        [else]
            hits=no
            [eohs_faeriefire_sound_frame]
                begin=-450
                end=-375
                sound=magic-faeriefire-miss.ogg
            [/eohs_faeriefire_sound_frame]
        [/else]

        [frame]
            begin=-375
            end=-300
            image=attack_frame_2
            halo=halo/elven/faerie-fire-halo2.png
            halo_x,halo_y=14,-24
        [/frame]
        [frame]
            begin=-300
            end=-225
            image=attack_frame_2
            halo=halo/elven/faerie-fire-halo3.png
            halo_x,halo_y=14,-24
        [/frame]
        [frame]
            begin=-225
            end=-150
            image=attack_frame_2
            halo=halo/elven/faerie-fire-halo4.png
            halo_x,halo_y=14,-24
        [/frame]
        [frame]
            begin=-150
            end=-75
            image=attack_frame_2
            halo=halo/elven/faerie-fire-halo5.png
            halo_x,halo_y=14,-24
        [/frame]
        [frame]
            begin=-75
            end=0
            image=attack_frame_2
            halo=halo/elven/faerie-fire-halo6.png
            halo_x,halo_y=14,-24
        [/frame]
        [frame]
            begin=-0
            end=75
            image=attack_frame_1
            halo=halo/elven/faerie-fire-halo7.png
            halo_x,halo_y=14,-24
        [/frame]
          [/attack_anim]
          [attack_anim]
        [filter_attack]
            name=EoHS_necromancy_skill_ranged_attack
        [/filter_attack]
        [missile_frame]
            begin=-100
            end=100
            image="projectiles/darkmissile-n.png"
            image_diagonal="projectiles/darkmissile-ne.png"
        [/missile_frame]

        [frame]
            begin=-300
            end=-225
            image=attack_frame_1
        [/frame]
        [frame]
            begin=-225
            end=-150
            image=attack_frame_2
        [/frame]
        [frame]
            begin=-150
            end=-75
            image=attack_frame_2
            halo=halo/undead/black-magic-1.png
        [/frame]
        [frame]
            begin=-75
            end=0
            image=attack_frame_2
            halo=halo/undead/black-magic-2.png
        [/frame]
        [if]
            hits=yes
            [eohs_chillwave_sound_frame]
                begin=-75
                end=0
                sound=magic-dark.ogg
            [/eohs_chillwave_sound_frame]
        [/if]
        [else]
            hits=no
            [eohs_chillwave_sound_frame]
                begin=-75
                end=0
                sound=magic-dark-miss.ogg
            [/eohs_chillwave_sound_frame]
        [/else]
        [frame]
            begin=0
            end=75
            image=attack_frame_2
            halo=halo/undead/black-magic-3.png
        [/frame]
        [frame]
            begin=75
            end=150
            image=attack_frame_2
            halo=halo/undead/black-magic-4.png
        [/frame]

        [frame]
            begin=150
            end=200
            image=attack_frame_2
            halo=halo/undead/black-magic-5.png
        [/frame]
        [frame]
            begin=200
            end=250
            image=attack_frame_2
        [/frame]
        [frame]
            begin=250
            end=300
            image=attack_frame_1
        [/frame]
          [/attack_anim]
        [/value]
      [/set_variables]

[lua]
  code=<< beginning_file("animations.cfg")

--[[

Because each animation actually has to be made of four separate animations, to account for the flipping of xxx_frames,
it's prudent for me to make an animation-prototype type that is only converted into the four animations later -
(it's prudent because it avoids duplicate processing and is, in general, a closer-to-the-concepts-I'm-thinking-about way to do things.)
So I need to specify the format for that.

It approximately replicates the format for animations, but with additional info included.

On the other hand, it doesn't handle progressive properties more complicated than (number)~(number).

{
  start_time,
  offset,
  layer,
  xxx_start_time,
  xxx_offset,
  xxx_layer,
  (other animation properties aren't necessarily completely supported. "direction" is not supported at all.)
  { "frame", {
    (normal frame attributes)
    x_directional = number
  }
  { "xxx_frame", {
    (normal frame attributes)
    x_directional = number
    crop_x = number
    crop_y = number
    crop_width = number
    crop_height = number
    image_width = number
    image_height = number
  }}
}

--]]

function start_and_end_values(potentially_progressive_number)
  if type(potentially_progressive_number) == "number" then return potentially_progressive_number,potentially_progressive_number end
  return tonumber(string.match(potentially_progressive_number,"(.*)~")),tonumber(string.match(potentially_progressive_number,"~(.*)"))
end
function make_progressive_number(first, last)
  if first == last then return first end
  return first.."~"..last
end
function add_progressive_numbers(...)
  local first = 0
  local last = 0
  for i=1,arg.n do
    local f,l = start_and_end_values(arg[i])
    first = first + f
    last = last + l
  end
  return make_progressive_number(first, last)
end
function invert_progressive_number(number)
  if type(number) == "number" then return -number end
  local f,l = start_and_end_values(number)
  return make_progressive_number(-f,-l)
end

function handle_fancy_unit_overlay(unit, animation, overlay)
  if overlay.dont_display_if_transmogrified and unit_has_eohs_special(unit, "has_been_transmogrified") then return end

  add_overlay_relative_to_base_frame(animation, overlay.frame_type, overlay)
end
function add_fancy_unit_overlays(unit, animation)
  local variables = helper.get_child(unit, "variables")
  if variables then
    for overlay in helper.child_range(variables, "fancy_unit_overlay") do
      handle_fancy_unit_overlay(unit, animation, overlay)
    end
    for i,enchantment_pair in ipairs(EoHS_explicit_enchantments) do
      local enchantment_info = enchantment_pair[2]
      if unit_has_explicit_enchantment(unit, enchantment_info.id) then
        for overlay in helper.child_range(enchantment_info, "fancy_overlay") do
          handle_fancy_unit_overlay(unit, animation, overlay)
        end
      end
    end
  end
end

function insert_anims_from_prototype(unit, animation_array, animation_tagname, anim_prototype)
  local variables = helper.get_child(unit, "variables")

  local nne_anim = naive_deep_copy(anim_prototype)
  add_fancy_unit_overlays(unit, nne_anim)
  -- give all our animations a bit of a priority boost
  table.insert(nne_anim, { "filter", {}})
  --[[local sse_anim = naive_deep_copy(nne_anim)
  local  nw_anim = naive_deep_copy(nne_anim)
  local  sw_anim = naive_deep_copy(nne_anim)
  nne_anim.direction = "n,ne"
  sse_anim.direction = "s,se"
   nw_anim.direction = "nw"
   sw_anim.direction = "sw"]]
  local i = 1
  while nne_anim[i] do if nne_anim[i][2].image then
    local info = naive_deep_copy(nne_anim[i][2])
    if info.crop_x or info.crop_y or info.crop_width or info.crop_height then
      info.crop_x = info.crop_x or 0
      info.crop_y = info.crop_y or 0
      info.image_width  = info.image_width  or 72
      info.image_height = info.image_height or 72
      info.crop_width  = math.min(info.image_width  - info.crop_x, info.crop_width  or info.image_width )
      info.crop_height = math.min(info.image_height - info.crop_y, info.crop_height or info.image_height)
      nne_anim[i][2].image = info.image.."~CROP("..info.crop_x..","..info.crop_y..","..info.crop_width..","..info.crop_height..")"
      nne_anim[i][2].directional_x = add_progressive_numbers((info.x_directional or 0), (info.crop_x - (info.image_width / 2)) + (info.crop_width / 2))
      nne_anim[i][2].y = add_progressive_numbers((info.y or 0), (info.crop_y - (info.image_height / 2)) + (info.crop_height / 2))
nne_anim[i][2].auto_vflip = false
nne_anim[i][2].auto_hflip = true
--      if nne_anim[i][1] == "frame" then
--        sse_anim[i][2].image = nne_anim[i][2].image
--      else
--        sse_anim[i][2].image = info.image.."~FL(vert)~CROP("..info.crop_x..","..((info.image_height - info.crop_y) - info.crop_height)..","..info.crop_width..","..info.crop_height..")"
--      end
    else
      nne_anim[i][2].x = (info.x_directional or 0)
      nne_anim[i][2].y = (info.y or 0)
      if nne_anim[i][1] ~= "frame" then sse_anim[i][2].image = info.image.."~FL(vert)" end
    end
--[[    sse_anim[i][2].x = nne_anim[i][2].x
    sse_anim[i][2].y = nne_anim[i][2].y
     nw_anim[i][2].image = nne_anim[i][2].image
     nw_anim[i][2].x = invert_progressive_number(nne_anim[i][2].x)
     nw_anim[i][2].y = nne_anim[i][2].y
     sw_anim[i][2].image = sse_anim[i][2].image
     sw_anim[i][2].x = invert_progressive_number(sse_anim[i][2].x)
     sw_anim[i][2].y = sse_anim[i][2].y
    -- hack: I don't actually know what this does if you have x-crops specified
    if info.dont_flip then
      nw_anim[i][2].image = nw_anim[i][2].image.."~FL(horiz)"
      sw_anim[i][2].image = sw_anim[i][2].image.."~FL(horiz)"
    end

    nne_anim[i][2].x = add_progressive_numbers(nne_anim[i][2].x, (info.x or 0))
    sse_anim[i][2].x = add_progressive_numbers(sse_anim[i][2].x, (info.x or 0))
     nw_anim[i][2].x = add_progressive_numbers( nw_anim[i][2].x, (info.x or 0))
     sw_anim[i][2].x = add_progressive_numbers( sw_anim[i][2].x, (info.x or 0))]]
  end
    i = i + 1
  end
  table.insert(animation_array, { animation_tagname, nne_anim })
--[[  table.insert(animation_array, { animation_tagname, sse_anim })
  table.insert(animation_array, { animation_tagname,  nw_anim })
  table.insert(animation_array, { animation_tagname,  sw_anim })]]
end

-- iterator over the xxx_frames' names, not including "frame"
-- so, it returns values like "" and "missile_"
function frame_types(animation)
  return frame_types_iterator, { animation = animation, frame_index = 1, frame_types_found = {} }
end
function frame_types_iterator(state)
  if not state.animation[state.frame_index] then return end
  while state.frame_types_found[state.animation[state.frame_index][1]] or not string.match(state.animation[state.frame_index][1], "frame") do
    state.frame_index = state.frame_index + 1
    if not state.animation[state.frame_index] then return end
  end
  state.frame_types_found[state.animation[state.frame_index][1]] = true
  local output = string.match(state.animation[state.frame_index][1], "(.*)frame")
  state.frame_index = state.frame_index + 1
  return output
end


function anim_time_range(animation)
  local earliest_time = 0
  local latest_time = 0
  for frame_type in frame_types(animation) do
    local total_duration = 0
    earliest_time = math.min(earliest_time, (animation[frame_type.."start_time"] or 0))
    for frame in helper.child_range(animation, frame_type.."frame") do
      total_duration = total_duration + (frame.duration or 0)
    end
    latest_time = math.max(latest_time, (animation[frame_type.."start_time"] or 0) + total_duration)
  end
  return earliest_time, latest_time - earliest_time
end

--[[
function staff_head_xy_offsets(image_name)
  if not image_name then return 0,0 end
  local relevant_image_name = string.gsub(image_name, "+female", "")
  if relevant_image_name == "units/undead-necromancers/lich.png"             then return -11,-22 end
  if relevant_image_name == "units/undead-necromancers/lich-magic-1.png"     then return -12,-25 end
  if relevant_image_name == "units/undead-necromancers/lich-magic-3.png"     then return -15,-28 end
  if relevant_image_name == "units/human-magi/red-mage.png"                  then return 14,-11 end
  if relevant_image_name == "units/human-magi/red-mage-attack-magic-1.png"   then return 13,-18 end
  if relevant_image_name == "units/human-magi/red-mage-attack-magic-2.png"   then return 11,-23 end
  if relevant_image_name == "units/human-magi/arch-mage.png"                 then return 16,-18 end
  if relevant_image_name == "units/human-magi/arch-mage-attack-magic-1.png"  then return 17,-21 end
  if relevant_image_name == "units/human-magi/arch-mage-attack-magic-2.png"  then return 18,-24 end
  if relevant_image_name == "units/human-magi/great-mage.png"                then return 17,-26 end
  if relevant_image_name == "units/human-magi/great-mage-attack-magic-1.png" then return 17,-28 end
  if relevant_image_name == "units/human-magi/great-mage-attack-magic-2.png" then return 18,-31 end
  return 0,0
end]]

-- takes prototype-type info for both arguments. overlay_frame must contain "layer", which is not a real layer but an offset
function add_overlay_relative_to_base_frame(animation, frame_type_without_underscore, overlay_frame)
  animation[frame_type_without_underscore.."_start_time"] = animation["start_time"]
  animation[frame_type_without_underscore.."_offset"] = animation["offset"]
  animation[frame_type_without_underscore.."_layer"] = animation["layer"]
  local new_frames = {}
  for frame in helper.child_range(animation, "frame") do
    local this_overlay_frame = naive_deep_copy(overlay_frame)
    this_overlay_frame.duration      = frame.duration
    this_overlay_frame.offset        = frame.offset
    this_overlay_frame.layer         = math.max(0, math.min(100, ((frame.layer or animation.layer) or 40) + overlay_frame.layer))
    this_overlay_frame.y             = add_progressive_numbers((frame.y or 0),             (overlay_frame.y or 0))
    this_overlay_frame.x             = add_progressive_numbers((frame.x or 0),             (overlay_frame.x or 0))
    this_overlay_frame.x_directional = add_progressive_numbers((frame.x_directional or 0), (overlay_frame.x_directional or 0))
    if overlay_frame.image then
      local frame_image_replace_string = frame.image
      if not frame.image then frame_image_replace_string = "misc/blank-hex.png" end
      this_overlay_frame.image = string.gsub(this_overlay_frame.image, "FRAME_IMAGE", frame_image_replace_string)
    end
    if overlay_frame.relative_to_staff_head then
      local x,y = staff_head_xy_offsets(frame.image)
      this_overlay_frame.x_directional = this_overlay_frame.x_directional + x
      this_overlay_frame.y             = this_overlay_frame.y             + y
    end
    table.insert(new_frames, { frame_type_without_underscore.."_frame", this_overlay_frame })
  end
  for i,frame in ipairs(new_frames) do table.insert(animation, frame) end
end

function add_overlay_relative_to_hex(animation, frame_type_without_underscore, overlay_frame)
  earliest, duration = anim_time_range(animation)
  animation[frame_type_without_underscore.."_start_time"] = earliest
  local this_overlay_frame = naive_deep_copy(overlay_frame)
  this_overlay_frame.duration = duration
  table.insert(animation, { frame_type_without_underscore.."_frame", this_overlay_frame })
end

-- takes prototype-type info for both arguments.
function animation_over_other_animation_repeating(animation, repeating_anim)
  local earliest, duration = anim_time_range(animation)
  local anim_end_time = earliest + duration
  local repeating_earliest, repeating_duration = anim_time_range(repeating_anim)
  local new_anim = naive_deep_copy(animation)
  for frame_type in frame_types(repeating_anim) do
    new_anim[frame_type.."start_time"] = (repeating_anim[frame_type.."start_time"] or 0) + earliest - repeating_earliest
  end
  -- copy over the things like "xxx_layer" which apply only to the frame types from repeating_anim
  for k,v in pairs(repeating_anim) do
    if type(k) ~= "number" then new_anim[k]=v end
  end

  -- insert all the frames from the repeating animations
  for frame_type in frame_types(repeating_anim) do
    local frame_begin_time = new_anim[frame_type.."start_time"]
    while frame_begin_time < anim_end_time do
      for frame in helper.child_range(repeating_anim, frame_type.."frame") do
        local new_frame = naive_deep_copy(frame)
        local frame_end_time = frame_begin_time + frame.duration
        if frame_end_time >= anim_end_time then
          new_frame.duration = anim_end_time - frame_begin_time
        end
        table.insert(new_anim, { frame_type.."frame", new_frame })
        frame_begin_time = frame_begin_time + frame.duration
        if frame_begin_time >= anim_end_time then break end
      end
    end
  end

  return new_anim
end

function animation_restricted_to_single_frame_of_length(animation, duration)
  local new_anim = naive_deep_copy(animation)
  for frame_type in frame_types(new_anim) do
    local i = 1
    local found_one = false
    while new_anim[i] do
      local remove = false
      if new_anim[i][1] == frame_type.."frame" then
        if found_one then remove = true
        else new_anim[i][2].duration = duration end
      end
      if remove then table.remove(new_anim, i) else i = i + 1 end
    end
  end
  return new_anim
end

-- Returns the first animation of this time normally found in the unit.
-- This may be the default animation constructed from the unit's base image.
function get_default_anim(unit, anim_type)
  local unit_type = wesnoth.get_unit_type(unit.type).__cfg
  local unit_type_anim = helper.get_child(unit_type, anim_type)
  if unit_type_anim then return unit_type_anim end
  -- Don't search the unit's effects: it's just as likely you'd find a very-limited-case standing anim
  --for effect in unit_effects(unit) do
  --  if effect.apply_to == "new_animation" then
  --    for i,animation_pair in ipairs(effect) do
  --      if animation_pair[1] == anim_type then return animation_pair[2] end
  --    end
  --  end
  --end
  -- The unit type doesn't have any, and the unit doesn't have any. Generate one from the base image...
  local default_anim = { { "frame", {
    image = unit.image,
    duration = 150,
  }} }
  if anim_type == "movement_anim" then default_anim.offset = "0~1:150,0~1:150,0~1:150,0~1:150,0~1:150,0~1:150,0~1:150,0~1:150,0~1:150,0~1:150" end
  return default_anim
end

-- We do a lot of processing on animation prototype /tables/, too. This adds the specified animation type to the prototype array, iff it hasn't been generated already.
-- This function does NOT add overlays.
function generate_base_anim(unit, anim_proto_table, anim_type)
  if anim_proto_table[anim_type] then return anim_proto_table[anim_type] end

  if anim_type == "standing_anim" then
    if unit_has_eohs_special(unit, "is_mounted") then
      anim_proto_table[anim_type] = mounted_unit_base_animation(unit)
    else
      anim_proto_table[anim_type] = get_default_anim(unit, "standing_anim")
    end
  elseif anim_type == "movement_anim" then
    if unit_has_eohs_special(unit, "is_mounted") then
      local movement_anim
      if unit_is_type(get_current_mount(unit), "Wolf") then
        movement_anim = mounted_unit_base_animation(unit, {moving_wolf=true})
      else
        generate_base_anim(unit, anim_proto_table, "standing_anim")
        movement_anim = naive_deep_copy(anim_proto_table["standing_anim"])
      end
      for frame_type in frame_types(movement_anim) do
        movement_anim[frame_type.."offset"] = "0~1:150,0~1:150,0~1:150,0~1:150,0~1:150,0~1:150,0~1:150,0~1:150,0~1:150,0~1:150"
      end
      anim_proto_table[anim_type] = movement_anim
    else
      anim_proto_table[anim_type] = get_default_anim(unit, "movement_anim")
    end
  else
    generate_base_anim(unit, anim_proto_table, "standing_anim")
    new_anim = naive_deep_copy(anim_proto_table["standing_anim"])

    if anim_type == "selected" then
      new_anim.apply_to = "selected"
      new_anim = animation_restricted_to_single_frame_of_length(new_anim, 300)
      for frame_type in frame_types(new_anim) do
        new_anim[frame_type.."blend_color"] = "255,255,255"
        new_anim[frame_type.."blend_ratio"] = "0.0~0.3:100,0.3~0.0:200"
      end
    elseif anim_type == "levelin" then
      new_anim.apply_to = "levelin"
      new_anim = animation_restricted_to_single_frame_of_length(new_anim, 600)
      for frame_type in frame_types(new_anim) do
        new_anim[frame_type.."blend_color"] = "255,255,255"
        new_anim[frame_type.."blend_ratio"] = "1~0:600"
      end
    elseif anim_type == "levelout" then
      new_anim.apply_to = "levelout"
      new_anim = animation_restricted_to_single_frame_of_length(new_anim, 600)
      for frame_type in frame_types(new_anim) do
        new_anim[frame_type.."blend_color"] = "255,255,255"
        new_anim[frame_type.."blend_ratio"] = "0~1:600"
      end
    elseif anim_type == "pre_teleport" then
      new_anim.apply_to = "pre_teleport"
      new_anim = animation_restricted_to_single_frame_of_length(new_anim, 150)
      for frame_type in frame_types(new_anim) do
        new_anim[frame_type.."blend_color"] = "255,255,255"
        new_anim[frame_type.."blend_ratio"] = "1~0:150"
      end
    elseif anim_type == "post_teleport" then
      new_anim.apply_to = "post_teleport"
      new_anim = animation_restricted_to_single_frame_of_length(new_anim, 150)
      for frame_type in frame_types(new_anim) do
        new_anim[frame_type.."blend_color"] = "255,255,255"
        new_anim[frame_type.."blend_ratio"] = "0~1:150"
      end
    elseif anim_type == "healed" then
      new_anim.apply_to = "healed"
      new_anim = animation_restricted_to_single_frame_of_length(new_anim, 270)
      for frame_type in frame_types(new_anim) do
        new_anim[frame_type.."blend_color"] = "255,255,255"
        new_anim[frame_type.."blend_ratio"] = "0:30,0.5:30,0:30,0.5:30,0:30,0.5:30,0:30,0.5:30,0:30"
      end
      table.insert(new_anim, { "eohs_healed_sound_frame", { sound = "heal.wav", }})
    elseif anim_type == "poisoned" then
      new_anim.apply_to = "poisoned"
      new_anim = animation_restricted_to_single_frame_of_length(new_anim, 270)
      for frame_type in frame_types(new_anim) do
        new_anim[frame_type.."blend_color"] = "0,255,0"
        new_anim[frame_type.."blend_ratio"] = "0:30,0.5:30,0:30,0.5:30,0:30,0.5:30,0:30,0.5:30,0:30"
      end
      table.insert(new_anim, { "eohs_poisoned_sound_frame", { sound = "poison.ogg", }})
    elseif anim_type == "death" then
      new_anim.apply_to = "death"
      new_anim = animation_restricted_to_single_frame_of_length(new_anim, 600)
      for frame_type in frame_types(new_anim) do
        new_anim[frame_type.."highlight"] = "1~0:600"
      end
      table.insert(new_anim, { "eohs_death_sound_frame", { sound = wesnoth.get_unit_type(unit.type).__cfg.die_sound, }})
    elseif anim_type == "casting" then
      for frame in helper.child_range(new_anim, "frame") do
        frame.image = wizard_casting_frame_2(unit)
      end
      table.insert(new_anim, { "filter", { has_eohs_special("is_casting_a_spell") }})
    elseif anim_type == "start_casting" then
      new_anim.apply_to = "EoHS_start_casting"
      new_anim = animation_restricted_to_single_frame_of_length(new_anim, 200)
      for frame in helper.child_range(new_anim, "frame") do
        frame.image = wizard_casting_frame_1(unit)
      end
    elseif anim_type == "stop_casting" then
      new_anim.apply_to = "EoHS_stop_casting"
      new_anim = animation_restricted_to_single_frame_of_length(new_anim, 200)
      for frame in helper.child_range(new_anim, "frame") do
        frame.image = wizard_casting_frame_1(unit)
      end
    end

    anim_proto_table[anim_type] = new_anim
  end
  return anim_proto_table[anim_type]
end

function regenerate_unit_animations(unit)
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")
  local modifications = ensure_presence_of_and_get_subtag(unit, "modifications")

  -- Clear any existing generated unit animations.
  local i = 1
  while modifications[i] do
    if modifications[i][2].id == "eohs_generated_animations" then table.remove(modifications, i) else i = i + 1 end
  end

  -- Do we need to generate anything?
  local need_to_alter_base_anims = false
  local need_to_generate_casting_anims = false
  local need_to_generate_extra_anims = false
  if unit_has_eohs_special(unit, "is_mounted") then need_to_alter_base_anims = true end
  if unit_has_eohs_special(unit, "can_train_and_cast") then need_to_generate_casting_anims = true end
  for i,var_pair in ipairs(variables) do
    if var_pair[1] == "fancy_unit_overlay" then need_to_alter_base_anims = true end
    if var_pair[1] == "eohs_superimposed_animation" then need_to_generate_extra_anims = true end
  end
  for i,enchantment_pair in ipairs(EoHS_explicit_enchantments) do
    local enchantment_info = enchantment_pair[2]
    if unit_has_explicit_enchantment(unit, enchantment_info.id) then
      if helper.get_child(enchantment_info, "fancy_overlay") then
        need_to_alter_base_anims = true
      end
    end
  end

  -- What? We don't? Never mind then
  if not (need_to_alter_base_anims or need_to_generate_casting_anims or need_to_generate_extra_anims) then return end

  local anim_proto_table = {}

  local animations_added = { apply_to = "new_animation" } -- which will be used as in { "effect", animations_added }: effectively an array of animation pairs such as { "standing_anim", { stuff }}

  if need_to_alter_base_anims then
    insert_anims_from_prototype(unit, animations_added, "standing_anim", generate_base_anim(unit, anim_proto_table, "standing_anim"))
    insert_anims_from_prototype(unit, animations_added, "movement_anim", generate_base_anim(unit, anim_proto_table, "movement_anim"))
    insert_anims_from_prototype(unit, animations_added, "animation", generate_base_anim(unit, anim_proto_table, "selected"))
    insert_anims_from_prototype(unit, animations_added, "animation", generate_base_anim(unit, anim_proto_table, "levelin"))
-- currently not generating some extras to reduce the accross-the-board lag during put_unit
    --insert_anims_from_prototype(unit, animations_added, "animation", generate_base_anim(unit, anim_proto_table, "levelout"))
    --insert_anims_from_prototype(unit, animations_added, "animation", generate_base_anim(unit, anim_proto_table, "pre_teleport"))
    --insert_anims_from_prototype(unit, animations_added, "animation", generate_base_anim(unit, anim_proto_table, "post_teleport"))
    --insert_anims_from_prototype(unit, animations_added, "animation", generate_base_anim(unit, anim_proto_table, "healed"))
    --insert_anims_from_prototype(unit, animations_added, "animation", generate_base_anim(unit, anim_proto_table, "poisoned"))
    insert_anims_from_prototype(unit, animations_added, "animation", generate_base_anim(unit, anim_proto_table, "death"))
  end
  for extra_anim in helper.child_range(variables, "eohs_superimposed_animation") do
    local underlaid_standing_anim
    -- hack...
    if unit_has_eohs_special(unit, "is_casting_a_spell") then
      underlaid_standing_anim = generate_base_anim(unit, anim_proto_table, "casting")
    else
      underlaid_standing_anim = generate_base_anim(unit, anim_proto_table, "standing_anim")
    end
    insert_anims_from_prototype(unit, animations_added, "animation", animation_over_other_animation_repeating(extra_anim, underlaid_standing_anim))
  end
  if unit_has_eohs_special(unit, "can_train_and_cast") then
    insert_anims_from_prototype(unit, animations_added, "animation", generate_base_anim(unit, anim_proto_table, "start_casting"))
    insert_anims_from_prototype(unit, animations_added, "animation", generate_base_anim(unit, anim_proto_table, "stop_casting"))
    insert_anims_from_prototype(unit, animations_added, "standing_anim", generate_base_anim(unit, anim_proto_table, "casting"))

    -- we should be able to construct fancy riding combat animations
    -- but for now, just use the old standard ones
    local wizard_anims = wesnoth.get_variable("old_wizard_anims")
    for i,anim_pair in ipairs(wizard_anims) do
      for frame in helper.child_range(anim_pair[2], "frame") do
        if frame.image == "base_frame" then frame.image = unit.image end
        if frame.image == "attack_frame_1" then frame.image = wizard_casting_frame_1(unit) end
        if frame.image == "attack_frame_2" then frame.image = wizard_casting_frame_2(unit) end
      end
      table.insert(animations_added, anim_pair)
    end
    
    if not unit_has_eohs_special(unit, "is_mounted") then
      local crappy_terrains = "Wo,Qxu"
      if unit_is_type(unit, "Lich") or unit_is_type(unit, "Ancient Lich") then crappy_terrains = "Qxu" end
      table.insert(animations_added, { "standing_anim", {
        start_time = 0,
        terrain_type = crappy_terrains,
        submerge = 0.01,
        -- high priority
        { "filter", {}}, { "filter", {}},
        { "frame", { duration = 100, image = unit.image,                   y = -2 }},
        { "frame", { duration = 100, image = wizard_casting_frame_1(unit), y =  0 }},
        { "frame", { duration = 100, image = wizard_casting_frame_2(unit), y =  2 }},
        { "frame", { duration = 100, image = wizard_casting_frame_1(unit), y =  0 }},
      }})
    end
  end
  if unit_has_eohs_special(unit, "is_mounted") then
    -- bit of a hack - currently just insert the mount's combat animations
    local unit_type = wesnoth.get_unit_type(get_current_mount(unit).type).__cfg
    for i,tag in ipairs(unit_type) do
      if tag[1] == "defend" then
        table.insert(tag[2], { "filter_second_attack", { special = "granted_by_mount" }})
        table.insert(animations_added, tag)
      end
      if tag[1] == "attack_anim" then
        table.insert(tag[2], { "filter_attack", { special = "granted_by_mount" }})
        table.insert(animations_added, tag)
      end
    end
  end

  table.insert(modifications, { "object", {
    id = "eohs_generated_animations",
    { "effect", animations_added },
  }})
end

  >>
[/lua]

