#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("riding_units.cfg")

attributes_altered_by_mount_system = {
  attack=true,
  max_hitpoints=true,
  max_moves=true,
  defense=true,
  resistance=true,
  movement_costs=true,
}

function get_unit_mount_system(unit)
  if unit_has_eohs_special(unit, "is_mounted") then
    local variables = helper.get_child(unit, "variables")
    if variables then
      return helper.get_child(variables, "EoHS_mount_system")
    end
  end
end

function get_current_mount(unit)
  local mount_system = get_unit_mount_system(unit)
  if mount_system then
    return helper.get_child(mount_system, "stored_mount")
  end
end

function correct_one_parts_hitpoint_fraction(corrected, already_correct, combination)
  corrected.hitpoints = (((already_correct.max_hitpoints + corrected.max_hitpoints)*combination.hitpoints / combination.max_hitpoints) - already_correct.hitpoints)
end
function correct_both_parts_hitpoint_fractions(corrected1, corrected2, combination)
  corrected1.hitpoints = (corrected1.max_hitpoints * combination.hitpoints) / combination.max_hitpoints
  corrected2.hitpoints = (corrected2.max_hitpoints * combination.hitpoints) / combination.max_hitpoints
end
function correct_combination_hitpoint_fraction(already_correct1, already_correct2, combination)
  combination.hitpoints = (combination.max_hitpoints * (already_correct1.hitpoints + already_correct2.hitpoints)) / (already_correct1.max_hitpoints + already_correct2.max_hitpoints)
end

function rider_and_mount_when_combination_splits(unit)
  local rider = naive_deep_copy(unit)
  local mount = naive_deep_copy(get_current_mount(unit))
  local old_mount_system = get_unit_mount_system(unit)
  local old_stored_rider = helper.get_child(old_mount_system, "stored_rider")
  local old_stored_mount = helper.get_child(old_mount_system, "stored_mount")

  clear_unit_eohs_special(rider, "is_mounted")
  local variables = helper.get_child(rider, "variables")
  local i = 1
  while variables[i] do
    if variables[i][1] == "EoHS_mount_system" then table.remove(variables, i) else i = i + 1 end
  end
  local modifications = helper.get_child(rider, "modifications")
  local i = 1
  while modifications[i] do
    if modifications[i][2].id == "EoHS_mount_bonuses_object" then table.remove(modifications, i) else i = i + 1 end
  end

  rider.hitpoints = math.max(1, math.floor(old_stored_rider.hitpoints))
  rider.moves = 0
  mount.hitpoints = math.max(1, math.floor(old_stored_mount.hitpoints))
  mount.moves        = unit.moves
  mount.attacks_left = unit.attacks_left
  mount.resting      = unit.resting
  mount.facing       = unit.facing
  -- default to having the rider and mount in the same location
  mount.x            = unit.x
  mount.y            = unit.y

  regenerate_unit_attributes(rider, attributes_altered_by_mount_system)
  regenerate_unit_graphics(rider)
  return rider, mount
end

function combination_when_rider_mounts_mount(rider, mount)
  local combination = naive_deep_copy(rider)
  set_unit_eohs_special(combination, "is_mounted")
  combination.moves = 0
  combination.hitpoints = combination.hitpoints + mount.hitpoints
  combination.x = mount.x
  combination.y = mount.y

  local mount_base = naive_deep_copy(mount)
  remove_all_enchantments(mount_base)

  local variables = ensure_presence_of_and_get_subtag(combination, "variables")
  local modifications = ensure_presence_of_and_get_subtag(combination, "modifications")
  table.insert(variables, { "EoHS_mount_system", {
    { "stored_mount", naive_deep_copy(mount) },
    { "stored_rider", naive_deep_copy(rider) },
  }})
  -- Hack - because non-present values don't overwrite properly
  local rider_movement_costs = helper.get_child(rider, "movement_costs")
  local effect_movement_costs = naive_deep_copy(helper.get_child(mount_base, "movement_costs"))
  local effect_defense = naive_deep_copy(helper.get_child(mount_base, "defense"))
  for k,v in pairs(rider_movement_costs) do
    if not effect_movement_costs[k] then
      effect_movement_costs[k] = 99
      effect_defense[k] = 100
    end
  end
  table.insert(modifications, { "object", {
    id = "EoHS_mount_bonuses_object",
    { "effect", {
      apply_to = "hitpoints",
      increase_total = mount_base.hitpoints,
    }},
    { "effect", {
      apply_to = "movement",
      set = mount_base.max_moves,
    }},
    { "effect", {
      apply_to = "movement_costs",
      replace = true,
      { "movement_costs", effect_movement_costs }
    }},
    { "effect", {
      apply_to = "defense",
      replace = true,
      { "defense", effect_defense }
    }},
  }})
  for attack in helper.child_range(mount_base, "attack") do
    local attack_effect_contents = naive_deep_copy(attack)
    attack_effect_contents.apply_to = "new_attack"
    attack_effect_contents.unit_type = normal_wizard_types
    -- the defaultly-added specials shouldn't be part of the effect:
    strip_static_specials(attack_effect_contents)
    local specials = ensure_presence_of_and_get_subtag(attack_effect_contents, "specials")
    table.insert(specials, { "dummy", { id = "granted_by_mount" }})
    table.insert(modifications, { "object", {
      id = "EoHS_mount_bonuses_object",
      { "effect", attack_effect_contents }
    }})
  end

  regenerate_unit_attributes(combination, attributes_altered_by_mount_system)
  regenerate_unit_graphics(combination)
  correct_combination_hitpoint_fraction(mount, rider, combination)
  remember_current_combination_hitpoints(combination)
  return combination
end

function remember_current_combination_hitpoints(unit)
  local mount_system = get_unit_mount_system(unit)
  mount_system.remembered_combination_max_hitpoints = unit.max_hitpoints
  mount_system.remembered_combination_hitpoints     = unit.hitpoints
end
function mount_combination_hitpoint_update(unit)
  if not unit_has_eohs_special(unit, "is_mounted") then return end

  local something_changed = false
  local mount_system = get_unit_mount_system(unit)
  local stored_mount = helper.get_child(mount_system, "stored_mount")
  local stored_rider = helper.get_child(mount_system, "stored_rider")

  local max_hitpoint_change = unit.max_hitpoints - mount_system.remembered_combination_max_hitpoints
  local     hitpoint_change = unit.hitpoints     - mount_system.remembered_combination_hitpoints
  remember_current_combination_hitpoints(unit)

  if max_hitpoint_change ~= 0 then
    something_changed = true
    -- hack: this is the weak link that will break if we stop making mounting give exactly the same amount of hitpoints
    stored_rider.max_hitpoints = stored_rider.max_hitpoints + max_hitpoint_change
  end

  if hitpoint_change ~= 0 then
    something_changed = true
    local rider_has_more_hitpoints = (stored_rider.hitpoints / stored_rider.max_hitpoints) > (stored_mount.hitpoints / stored_mount.max_hitpoints)
    if (hitpoint_change > 0) == rider_has_more_hitpoints then
      -- the rider has more -> give to the mount
      -- the rider has less -> take from the mount
      correct_one_parts_hitpoint_fraction(stored_mount, stored_rider, unit)
    else
      correct_one_parts_hitpoint_fraction(stored_rider, stored_mount, unit)
    end

    local rider_now_has_more_hitpoints = (stored_rider.hitpoints / stored_rider.max_hitpoints) > (stored_mount.hitpoints / stored_mount.max_hitpoints)
    if rider_now_has_more_hitpoints ~= rider_has_more_hitpoints then
      -- Equalize!
      correct_both_parts_hitpoint_fractions(stored_mount, stored_rider, unit)
    end
  end

  return something_changed
end

-- extra is an optional table which can include "moving_wolf=true" for wolves.
-- however, this function never assigns the offset= values associated with true moving animations.
function mounted_unit_base_animation(unit, extra)
  local output = { }
  local mount = get_current_mount(unit)

  local wizard_offsx -- directional, of course
  local wizard_offsy
      if unit_is_type(unit, "Red Mage") then
    wizard_offsx = 4
    wizard_offsy = -4
  elseif unit_is_type(unit, "Arch Mage") or unit_is_type(unit, "Great Mage") then
    wizard_offsx = 0
    wizard_offsy = -4
  elseif unit_is_type(unit, "Lich")      or unit_is_type(unit, "Ancient Lich") then
    wizard_offsx = -2
    wizard_offsy = -4
  end

  local mount_image_mods = unit_image_mods(mount, true)

      if unit_is_type(mount, "Wolf") then
    if extra and extra.moving_wolf then
      table.insert(output, { "frame", {
        image = unit.image,
        duration = 150,
        x_directional = wizard_offsx    ,
        y             = wizard_offsy - 5,
      }})
      table.insert(output, { "ridden_wolf_first_frame", {
        image = "units/monsters/wolf-moving.png"..mount_image_mods,
        duration = 150, layer = 39,
        crop_height = 31,
      }})
      table.insert(output, { "ridden_wolf_second_frame", {
        image = "units/monsters/wolf-moving.png"..mount_image_mods,
        duration = 150, layer = 39,
        crop_y      = 31, crop_width = 36,
      }})
      table.insert(output, { "ridden_wolf_third_frame", {
        image = "units/monsters/wolf-moving.png"..mount_image_mods,
        duration = 150, layer = 41,
        crop_y      = 31, crop_x     = 36,
      }})
    else
      table.insert(output, { "frame", {
        image = unit.image,
        duration = 150,
        x_directional = wizard_offsx - 1,
        y             = wizard_offsy - 7,
      }})
      table.insert(output, { "ridden_wolf_first_frame", {
        image = mount.image..mount_image_mods,
        duration = 150, layer = 39,
        crop_height = 29,
      }})
      table.insert(output, { "ridden_wolf_second_frame", {
        image = mount.image..mount_image_mods,
        duration = 150, layer = 39,
        crop_y      = 29, crop_width = 35,
      }})
      table.insert(output, { "ridden_wolf_third_frame", {
        image = mount.image..mount_image_mods,
        duration = 150, layer = 41,
        crop_y      = 29, crop_x     = 35,
      }})
    end
  elseif unit_is_type(mount, "Water Serpent") then
    table.insert(output, { "frame", {
      image = unit.image,
      duration = 150,
      x_directional = wizard_offsx - 6,
      y             = wizard_offsy + 8,
    }})
    table.insert(output, { "ridden_serpent_first_frame", {
      image = mount.image..mount_image_mods,
      duration = 150, layer = 39,
      crop_height = 44, crop_width = 38,
    }})
    table.insert(output, { "ridden_serpent_second_frame", {
      image = mount.image..mount_image_mods,
      duration = 150, layer = 41,
      crop_height = 44, crop_x     = 38,
    }})
    table.insert(output, { "ridden_serpent_third_frame", {
      image = mount.image..mount_image_mods,
      duration = 150, layer = 39,
      crop_y      = 44, crop_width = 30,
    }})
    table.insert(output, { "ridden_serpent_fourth_frame", {
      image = mount.image..mount_image_mods,
      duration = 150, layer = 41,
      crop_y      = 44, crop_x     = 30,
    }})
  elseif unit_is_type(mount, "Gryphon") then
    local function insert_gryphon_frames(which, y)
      table.insert(output, { "frame", {
        image = unit.image,
        duration = 150,
        x_directional = wizard_offsx + 5,
        y             = wizard_offsy + y,
      }})
      table.insert(output, { "ridden_gryphon_first_frame", {
        image = "units/monsters/gryphon-flying-"..which..".png"..mount_image_mods, image_width = 120, image_height = 120,
        duration = 150, layer = 39,
        crop_height = 60 + y,
      }})
      table.insert(output, { "ridden_gryphon_second_frame", {
        image = "units/monsters/gryphon-flying-"..which..".png"..mount_image_mods, image_width = 120, image_height = 120,
        duration = 150, layer = 39,
        crop_y      = 60 + y, crop_width = 65,
      }})
      table.insert(output, { "ridden_gryphon_third_frame", {
        image = "units/monsters/gryphon-flying-"..which..".png"..mount_image_mods, image_width = 120, image_height = 120,
        duration = 150, layer = 41,
        crop_y      = 60 + y,     crop_x = 65,
      }})
    end
    insert_gryphon_frames(1, -5)
    insert_gryphon_frames(2, -8)
    insert_gryphon_frames(3, -10)
    insert_gryphon_frames(4, -14)
    insert_gryphon_frames(5, -12)
    insert_gryphon_frames(6, -9)
    insert_gryphon_frames(7, -6)
    insert_gryphon_frames(8, -3)
  elseif unit_is_type(mount, "Fire Dragon") then
    table.insert(output, { "frame", {
      image = unit.image,
      duration = 150,
      x_directional = wizard_offsx + 1,
      y             = wizard_offsy - 24,
    }})
    table.insert(output, { "ridden_dragon_first_frame", {
      image = "units/monsters/fire-dragon-defend-ranged-4.png"..mount_image_mods, image_width = 90, image_height = 84,
      duration = 150, layer = 39,
      crop_width = 46,
    }})
    table.insert(output, { "ridden_dragon_second_frame", {
      image = "units/monsters/fire-dragon-defend-ranged-4.png"..mount_image_mods, image_width = 90, image_height = 84,
      duration = 150, layer = 41,
      crop_x     = 46,
    }})
  elseif unit_is_type(mount, "Giant Mudcrawler") then
    table.insert(output, { "frame", {
      image = unit.image,
      duration = 150,
      x_directional = wizard_offsx - 1,
      y             = wizard_offsy - 7,
    }})
    table.insert(output, { "ridden_mudcrawler_first_frame", {
      image = mount.image..mount_image_mods,
      duration = 150, layer = 39,
      crop_height = 32,
    }})
    table.insert(output, { "ridden_mudcrawler_second_frame", {
      image = mount.image..mount_image_mods,
      duration = 150, layer = 39,
      crop_y      = 32, crop_width = 31,
    }})
    table.insert(output, { "ridden_mudcrawler_third_frame", {
      image = mount.image..mount_image_mods,
      duration = 150, layer = 41,
      crop_y      = 32, crop_x     = 31,
    }})
  end

  return output
end


  >>
[/lua]

