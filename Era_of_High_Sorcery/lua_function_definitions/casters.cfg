#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("casters.cfg")

redmage_line_wizard_types_array = {"Mage","Red Mage","Arch Mage","Great Mage"}
      normal_wizard_types_array = {"Mage","Red Mage","Arch Mage","Great Mage","Lich","Ancient Lich"}
redmage_line_wizard_types = ""
      normal_wizard_types = ""
for i,unit_type in ipairs(redmage_line_wizard_types_array) do
  redmage_line_wizard_types = redmage_line_wizard_types..","..unit_type
  redmage_line_wizard_types = redmage_line_wizard_types..","..unit_type.." with EoHS events"
end
for i,unit_type in ipairs(      normal_wizard_types_array) do
        normal_wizard_types =       normal_wizard_types..","..unit_type
        normal_wizard_types =       normal_wizard_types..","..unit_type.." with EoHS events"
end

function unit_is_type(unit, unit_type)
  return unit.type == unit_type or unit.type == unit_type.." with EoHS events"
end
function wizard_is_max_level(unit)
  return unit_is_type(unit, "Lich") or unit_is_type(unit, "Great Mage")
end
function wizard_unit_level(unit) -- so that calculations always work, even at weird points in the regeneration cycle
      if unit_is_type(unit, "Lich") then return 3 + (get_unit_variable(unit, "number_of_times_advanced_after_max_level") or 0)
  elseif unit_is_type(unit, "Great Mage") then return 4 + (get_unit_variable(unit, "number_of_times_advanced_after_max_level") or 0)
  else return unit.level end
end

xp_to_advance_wizard_from_level_1 = math.max(42, wesnoth.get_variable("generic_mage.max_experience"))
xp_to_advance_wizard_from_level_2 = math.max(70, wesnoth.get_variable("generic_red_mage.max_experience"))
xp_to_advance_wizard_from_level_3 = math.max(154, wesnoth.get_variable("generic_arch_mage.max_experience"))

-- generally, only the functions preceding (and including) initialize_unit_as_wizard_leader should referred to from outside this file. Everything else should only be used via regenerate_unit_attributes.

function wizard_base_frame(unit)
      if unit_is_type(unit, "Mage") then
    if unit.gender == "male" then return "units/human-magi/mage.png"
    else return "units/human-magi/mage+female.png" end
  elseif unit_is_type(unit, "Red Mage") then
    if unit.gender == "male" then return "units/human-magi/red-mage.png"
    else return "units/human-magi/red-mage+female.png" end
  elseif unit_is_type(unit, "Arch Mage") then
    if unit.gender == "male" then return "units/human-magi/arch-mage.png"
    else return "units/human-magi/arch-mage+female.png" end
  elseif unit_is_type(unit, "Great Mage") then
    if unit.gender == "male" then return "units/human-magi/great-mage.png"
    else return "units/human-magi/great-mage+female.png" end
  elseif unit_is_type(unit, "Lich") then return "units/undead-necromancers/lich.png"
  elseif unit_is_type(unit, "Ancient Lich") then return "units/undead-necromancers/ancient-lich.png"
  end
end

function wizard_casting_frame_1(unit)
      if unit_is_type(unit, "Mage") then
    if unit.gender == "male" then return "units/human-magi/mage-attack-magic1.png"
    else return "units/human-magi/mage+female-attack-magic1.png" end
  elseif unit_is_type(unit, "Red Mage") then
    if unit.gender == "male" then return "units/human-magi/red-mage-attack-magic-1.png"
    else return "units/human-magi/red-mage+female-attack-magic-1.png" end
  elseif unit_is_type(unit, "Arch Mage") then
    if unit.gender == "male" then return "units/human-magi/arch-mage-attack-magic-1.png"
    else return "units/human-magi/arch-mage+female-attack-magic-1.png" end
  elseif unit_is_type(unit, "Great Mage") then
    if unit.gender == "male" then return "units/human-magi/great-mage-attack-magic-1.png"
    else return "units/human-magi/great-mage+female-attack-magic-1.png" end
  elseif unit_is_type(unit, "Lich") then return "units/undead-necromancers/lich-magic-1.png"
  elseif unit_is_type(unit, "Ancient Lich") then return "units/undead-necromancers/ancient-lich-magic-1.png"
  end
end

function wizard_casting_frame_2(unit)
      if unit_is_type(unit, "Mage") then
    if unit.gender == "male" then return "units/human-magi/mage-attack-magic2.png"
    else return "units/human-magi/mage+female-attack-magic2.png" end
  elseif unit_is_type(unit, "Red Mage") then
    if unit.gender == "male" then return "units/human-magi/red-mage-attack-magic-2.png"
    else return "units/human-magi/red-mage+female-attack-magic-2.png" end
  elseif unit_is_type(unit, "Arch Mage") then
    if unit.gender == "male" then return "units/human-magi/arch-mage-attack-magic-2.png"
    else return "units/human-magi/arch-mage+female-attack-magic-2.png" end
  elseif unit_is_type(unit, "Great Mage") then
    if unit.gender == "male" then return "units/human-magi/great-mage-attack-magic-2.png"
    else return "units/human-magi/great-mage+female-attack-magic-2.png" end
  elseif unit_is_type(unit, "Lich") then return "units/undead-necromancers/lich-magic-3.png"
  elseif unit_is_type(unit, "Ancient Lich") then return "units/undead-necromancers/ancient-lich-melee.png"
  end
end

function modify_wizard_mana(unit, amount, display)
  local old_mana = get_unit_variable(unit, "EoHS_mana", 0)
  local new_mana = amount + old_mana
  if amount > 0 then new_mana = math.max(old_mana, math.min(wizard_max_mana(unit), new_mana)) end
  set_unit_variable(unit, "EoHS_mana", new_mana)
  if display then
    if amount > 0 then wesnoth.float_label(unit.x, unit.y, "<span color='#ffffff'>+"..(new_mana-old_mana)..(_" mana").."</span>") end
    if amount < 0 then wesnoth.float_label(unit.x, unit.y, "<span color='#ffffff'>-"..(old_mana-new_mana)..(_" mana").."</span>") end
  end
  regenerate_unit_attributes(unit, { abilities=true })
end

function modify_wizard_gold(unit, amount, display)
  wesnoth.fire("gold", { side = unit.side, amount = amount })
  if display then
    if amount > 0 then wesnoth.float_label(unit.x, unit.y, "<span color='#ffe200'>+"..amount..(_" gold").."</span>") end
    if amount < 0 then wesnoth.float_label(unit.x, unit.y, "<span color='#ffe200'>" ..amount..(_" gold").."</span>") end
  end
  regenerate_unit_attributes(unit, { abilities=true })
end

function modify_wizard_gold_or_mana(unit, amount, display)
  if wesnoth.get_variable("EoHS_settings.spellcasting_resource") == "mana" then
    modify_wizard_mana(unit, amount, display)
  end
  if wesnoth.get_variable("EoHS_settings.spellcasting_resource") == "gold" then
    modify_wizard_gold(unit, amount, display)
  end
end

function grant_picks_to_wizard(unit, amount, display)
  local skills = get_unit_eohs_skills(unit)
  local new_amount = amount
  if skills and skills["picks_left"] then new_amount = amount + skills["picks_left"] end
  set_unit_eohs_skill(unit, "picks_left", new_amount)
  if display then wesnoth.float_label(unit.x, unit.y, "<span color='#ff32ff'>+"..amount..(_" picks").."</span>") end
  regenerate_unit_attributes(unit, { abilities=true })
end

function grant_initial_picks()
  local casters = get_unit_array({ has_eohs_special("can_train_and_cast") })
  for i,caster in ipairs(casters) do
    grant_picks_to_wizard(caster, wesnoth.get_variable("EoHS_settings.initial_picks"))
    wesnoth.put_unit(caster)
  end
end

function first_index_after_type_mods_objects(unit)
  local index = 1
  local modifications = helper.get_child(unit, "modifications")
  if modifications then
    for i,mod in ipairs(modifications) do
      if mod[2].id and string.match(mod[2].id, "type_mods_object") then
        index = i + 1
      end
    end
  end
  return index
end

-- Take note, O ye: We currently rely on the fact that initialize_unit_as_wizard_leader is settings-independent!

function initialize_unit_as_wizard_leader(unit)
  set_unit_eohs_special(unit, "is_wizard_leader")
  set_unit_eohs_special(unit, "can_train_and_cast")
  set_unit_eohs_special(unit, "ends_damaging_attacks")
  set_unit_eohs_special(unit, "immune_to_direct_damage")

  set_unit_variable(unit, "EoHS_owning_unit", unit.underlying_id)

  apply_individual_player_quirks(unit)

  local modifications = ensure_presence_of_and_get_subtag(unit, "modifications")
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")

  table.insert(modifications, 1, { "object", {
    id="wizard_skin_and_hair_recoloring_object",
    { "effect", {
      unit_type=redmage_line_wizard_types,
      apply_to="image_mod",
    }}
  }})
  table.insert(modifications, 1, { "object", {
    id="wizard_animations_object",
  }})
  table.insert(modifications, 1, { "object", {
    id="wizard_attacks_object",
    { "effect", {}},
    { "effect", {}},
    { "effect", {}},
    { "effect", {}},
  }})
  table.insert(modifications, 1, { "object", {
    id="wizard_type_mods_object_resistance",
    -- Cancel Red Mage line resistances:
    { "effect", { -- We currently rely on this being the first subtag.
      --unit_type=redmage_line_wizard_types,
      apply_to="resistance",
      replace="true",
      { "resistance", {
        fire=100,
        cold=100,
        arcane=100,
        blade=100,
        impact=100,
        pierce=100,
      }}
    }},
  }})
  table.insert(modifications, 1, { "object", {
    id="wizard_type_mods_object_abilities",
    -- Remove Submerge, so that it doesn't appear before "wizard".
    { "effect", { 
      unit_type="Lich,Ancient Lich",
      apply_to="remove_ability",
      { "abilities", wesnoth.get_variable("submerge_ability") },
    }},
    { "effect", { -- We currently rely on this being the second subtag.
      apply_to="new_ability",
      { "abilities", {
        { "dummy", {
          id="wizard_powers",
          name=_"male^wizard",
          female_name=_"female^wizard",
        }},
      }},
    }},
    -- Reintroduce Submerge for the units that have it.
    { "effect", { 
      unit_type="Lich,Ancient Lich",
      apply_to="new_ability",
      { "abilities", wesnoth.get_variable("submerge_ability") },
    }},
    { "effect", {}}, -- for Military Commander
    { "effect", {}}, -- for Prince of Thieves; comes after military_commander object: The orders seem equally reasonable to me, but I had to make one choice of the other because I want it to be consistent, and HttT precedent says "leadership,skirmisher" not "skirmisher,leadership"
  }})
  table.insert(modifications, 1, { "object", {
    id="wizard_type_mods_object_attacks",
    -- Cancel Red Mage fireball attack:
    { "effect", {
      unit_type=redmage_line_wizard_types,
      apply_to="remove_attacks",
      name="fireball",
    }},
    -- Improve staff/touch, so that touch attacks aren't horrible and retaliation isn't ignorable
    { "effect", {
      unit_type=normal_wizard_types,
      apply_to="attack",
      range="melee",
      increase_attacks=1,
      increase_damage=-1,
    }},
  }})
  table.insert(modifications, 1, { "object", {
    id="wizard_type_mods_object_hitpoints",
    { "effect", {
      apply_to="hitpoints",
      increase_total="10",
    }},
  }})
  table.insert(modifications, 1, { "object", {
    id="wizard_type_mods_object_movetype",
    { "effect", {
      unit_type = normal_wizard_types,
      apply_to = "movement_costs",
      replace = false,
      { "movement_costs", {}},
    }},
    { "effect", {
      unit_type = normal_wizard_types,
      apply_to = "defense",
      replace = false,
      { "defense", {}},
    }},
  }})
  table.insert(modifications, 1, { "object", {
    id="wizard_type_mods_object_flying",
    { "effect", {
      unit_type = redmage_line_wizard_types,
      apply_to = "movement_costs",
      replace = true,
      { "movement_costs", {
        deep_water = 4,
      }}
    }},
    { "effect", {
      unit_type = redmage_line_wizard_types,
      apply_to = "defense",
      replace = true,
      { "defense", {
        deep_water = 80,
      }}
    }},
    { "effect", {
      unit_type = normal_wizard_types,
      apply_to = "movement_costs",
      replace = true,
      { "movement_costs", {
        unwalkable = 4,
      }}
    }},
    { "effect", {
      unit_type = normal_wizard_types,
      apply_to = "defense",
      replace = "true",
      { "defense", {
        unwalkable = 80,
      }}
    }},
  }})
  table.insert(variables, 1, { "before_regenerating_advancement", { lua_function = "remove_AMLA" }})
  table.insert(variables, 1, { "before_regenerating_attack", { lua_function = "update_wizard_attacks_object" }})
  table.insert(variables, 1, { "before_regenerating_abilities", { lua_function = "update_wizard_dummy_ability_description" }})
  table.insert(variables, 1, { "before_regenerating_abilities", { lua_function = "update_wizard_additional_abilities" }})
  table.insert(variables, 1, { "before_regenerating_resistance", { lua_function = "update_wizard_resistance_effect" }})
  table.insert(variables, 1, { "before_regenerating_defense", { lua_function = "update_wizard_defense" }})
  table.insert(variables, 1, { "before_regenerating_movement_costs", { lua_function = "update_wizard_movement_costs" }})

  table.insert(variables, 1, { "after_regenerating_advances_to", { lua_function = "set_wizard_advancements" }})
  table.insert(variables, 1, { "after_regenerating_description", { lua_function = "set_wizard_unit_type_description" }})
  table.insert(variables, 1, { "after_regenerating_max_experience", { lua_function = "set_wizard_max_experience" }})
  table.insert(variables, 1, { "after_regenerating_profile", { lua_function = "remove_profile" }})
  
  table.insert(variables, 1, { "on_advance_event", { lua_function = "wizard_is_about_to_advance" }})
  table.insert(variables, 1, { "on_post_advance_event", { lua_function = "wizard_just_advanced" }})
  
  table.insert(variables, 1, { "on_side_turn_event", { lua_function = "wizard_side_turn" }})
  table.insert(variables, 1, { "on_turn_refresh_event", { lua_function = "wizard_turn_refresh" }})

  if wesnoth.get_variable("this_is_eohs_campaign_version") then
    table.insert(variables, 1, { "after_type_changes", { lua_function = "replace_with_type_with_eohs_events" }})
  end

  -- rely on the fact that these are executed in order: put the level-setting one first
  table.insert(variables, 1, { "after_regenerating_level", { lua_function = "set_wizard_level" }})

  regenerate_unit_attributes(unit, all_regenerable_unit_attributes)
  unit.hitpoints = unit.max_hitpoints

  -- Generate a random hair and skin color! (These numbers aren't really very accurate to the world's population, as I'd like them to be, but I think they're not too absurdly far off.)
  local color_choice = wml_random("1..100")
      if color_choice <= 25 then recolor_wizard_skin_and_hair(unit, wizard_dark_skin, wizard_black_hair) -- 25%
  elseif color_choice <= 32 then recolor_wizard_skin_and_hair(unit, wizard_dark_skin, wizard_brown_hair) --  7%
  elseif color_choice <= 57 then recolor_wizard_skin_and_hair(unit, wizard_tan_skin,  wizard_black_hair) -- 25%
  elseif color_choice <= 64 then recolor_wizard_skin_and_hair(unit, wizard_tan_skin,  wizard_brown_hair) --  7%
  elseif color_choice <= 89 then recolor_wizard_skin_and_hair(unit, wizard_pale_skin, wizard_brown_hair) -- 25%
  elseif color_choice <= 96 then recolor_wizard_skin_and_hair(unit, wizard_pale_skin, wizard_black_hair) --  7%
  elseif color_choice <= 98 then recolor_wizard_skin_and_hair(unit, wizard_pale_skin, wizard_red_hair)   --  2%
  else                           recolor_wizard_skin_and_hair(unit, wizard_pale_skin, wizard_blond_hair) --  2%
  end

  -- Pick a random wizard symbol!
  local wizard_symbol_choice = wml_random("1..11")
      if wizard_symbol_choice ==  1 then variables.wizard_symbol = "misc/icon-amla-tough.png"
  elseif wizard_symbol_choice ==  2 then variables.wizard_symbol = "misc/key.png"
  elseif wizard_symbol_choice ==  3 then variables.wizard_symbol = "misc/new-battle.png"
  elseif wizard_symbol_choice ==  4 then variables.wizard_symbol = "misc/cross-white.png"
  elseif wizard_symbol_choice ==  5 then variables.wizard_symbol = "misc/qmark.png"
  elseif wizard_symbol_choice ==  6 then variables.wizard_symbol = "misc/red-x.png"
  elseif wizard_symbol_choice ==  7 then variables.wizard_symbol = "misc/reloaded.png" 
  elseif wizard_symbol_choice ==  8 then variables.wizard_symbol = "misc/ums.png"
  elseif wizard_symbol_choice ==  9 then variables.wizard_symbol = "projectiles/wailprojectile-n-3.png~CROP(31,32,11,13)"
  elseif wizard_symbol_choice == 10 then variables.wizard_symbol = "lobby/sort-friend.png"
  else                                  variables.wizard_symbol = "misc/eye.png~CROP(0,4,16,8)"
  end

  regenerate_unit_graphics(unit)
--[[
table.insert(variables, { "eohs_superimposed_animation", {
  apply_to = "wtf",
  { "loser_frame", {
    layer = 50,
    duration=500,
    image = "units/ogres/young-ogre-attack3.png",
    y = "0~-200",
    x_directional = "0~100",
    --crop_x=0,crop_y=0,crop_width=72,crop_height=72,image_width=72,image_height=72,
  }},
  { "loser_frame", {
    layer = 50,
    duration=500,
    image = "units/ogres/young-ogre-attack3.png",
    y = "-200~1",
    x_directional = "100~150",
    --crop_x=0,crop_y=0,crop_width=72,crop_height=72,image_width=72,image_height=72,
  }},
  { "loser2_frame", {
    layer = 50,
    duration=1000,
    image = "units/ogres/young-ogre-attack3.png~FL(horiz)",
    y = "0~-200",
    x_directional = "0~-25",
    x = "0~25",
    --crop_x=0,crop_y=0,crop_width=36,crop_height=72,image_width=72,image_height=72,
  }},
}})
create_eohs_menu_item({
id="whaaat",
description=_"whaaat",
{ "command", {
  { "lua", {
    code="whaaat()"
  }},
}}
})]]
end

--[[
function whaaat()
  eohs_animate_unit({
    { "filter", { canrecruit=true }},
    flag="wtf",
    with_bars=true,
  })
end
--]]

function replace_with_type_with_eohs_events(unit)
  if not string.match(unit.type, " with EoHS events") then unit.type = unit.type.." with EoHS events" end
end

function wizard_side_turn(unit)
  if wesnoth.current.side == unit.side then
  end
end

function wizard_max_mana(unit)
  return wizard_unit_level(unit) * 40
end

function wizard_turn_refresh(unit)
  if wesnoth.current.side == unit.side then
    if wesnoth.get_variable("EoHS_settings.spellcasting_resource") == "mana" then
      modify_wizard_mana(unit, wizard_unit_level(unit) * 4, true)
    end
    set_unit_variable(unit, "free_summon_potential_for_this_turn", 0)
    set_unit_variable(unit, "free_enchantment_potential_for_this_turn", 1)
    set_unit_variable(unit, "cloms_cast_this_turn", 0)
  end
end

function wizard_is_about_to_advance(unit)
  if wizard_is_max_level(unit) then
    set_unit_variable(unit, "number_of_times_advanced_after_max_level", 1 + get_unit_variable(unit, "number_of_times_advanced_after_max_level", 0))
    local modifications = helper.get_child(unit, "modifications")
    local type_mods_object = helper.get_child(modifications, "object", "wizard_type_mods_object_hitpoints")
    type_mods_object[1][2].increase_total = type_mods_object[1][2].increase_total + 12
  end
end

function wizard_just_advanced(unit)
  grant_picks_to_wizard(unit, 4, true)
  -- since the game doesn't do it for me on the "AMLA" levelling...
  unit.hitpoints = unit.max_hitpoints
  set_unit_subtag_value(unit, "status", "poisoned")
end

function update_wizard_dummy_ability_description(unit)
  local modifications = helper.get_child(unit, "modifications")
  local type_mods_object = helper.get_child(modifications, "object", "wizard_type_mods_object_abilities")
  local variables = helper.get_child(unit, "variables")
  local skills_string = ""
  local mana_string = ""
  local skills = helper.get_child(variables, "EoHS_skills")
  if skills then
    skills_string = "\n\n".._"This unit's skills are:"..make_picks_desc(skills)
  end
  if wesnoth.get_variable("EoHS_settings.spellcasting_resource") == "mana" then
    mana_string = "\n\n".._"This unit has "..get_unit_variable(unit, "EoHS_mana", 0).._" (out of "..wizard_max_mana(unit).._") mana."
  end
  type_mods_object[2][2][1][2][1][2].description = (_"Wizard:")..mana_string..skills_string.."\n\n"..(_"Any attack against this unit stops as soon as the attacker has dealt damage greater than or equal to one quarter of this unit's max hitpoints. Also, this unit can block all direct damage caused by spells, although it is still vulnerable to other effects.\n\nAlso, this unit can fly (sort of); it can cross deep water and chasm at a cost of 4 moves.")
end

function update_wizard_additional_abilities(unit)
  local modifications = helper.get_child(unit, "modifications")
  local abilities_object = helper.get_child(modifications, "object", "wizard_type_mods_object_abilities")

  local skills = get_unit_eohs_skills(unit)
  if skills and skills.military_commander then
    abilities_object[4][2] = {
      unit_type = normal_wizard_types,
      apply_to = "new_ability",
      { "abilities", {
        { "leadership", {
          -- Hack: A dummy with only the id, which is enough to be recognized and replaced by the leadership-replacing code.
          id = "leadership",
        }},
      }},
    }
  else
    abilities_object[4][2] = {}
  end

  if skills and skills.prince_of_thieves then
    abilities_object[5][2] = {
      unit_type = normal_wizard_types,
      apply_to = "new_ability",
      { "abilities", wesnoth.get_variable("skirmisher_ability") }
    }
  else
    abilities_object[5][2] = {}
  end
end

function update_wizard_attacks_object_aux(unit, attack_effect_tag, skill, upgrade_array, base_attack)
  if not skill then skill = 0 end
  local upgrade_total = ((wizard_unit_level(unit) - 2) * 2) + math.min(4, skill)
  local upgrade_array_index = math.min(8, upgrade_total)
  local excess = math.max(0, upgrade_total - upgrade_array_index)
  if skill > 0 and upgrade_array_index > 0 then
    attack_effect_tag[2] = base_attack
    attack_effect_tag[2].unit_type = redmage_line_wizard_types
    attack_effect_tag[2].apply_to = "new_attack"
    attack_effect_tag[2].damage = upgrade_array[upgrade_array_index][1] + excess * upgrade_array[9][1]
    attack_effect_tag[2].number = upgrade_array[upgrade_array_index][2] + excess * upgrade_array[9][2]
  else
    attack_effect_tag[2] = {}
  end
end
function update_wizard_attacks_object(unit)
  local modifications = helper.get_child(unit, "modifications")
  local attacks_object = helper.get_child(modifications, "object", "wizard_attacks_object")
  local skills = get_unit_eohs_skills(unit)
  if skills then
    update_wizard_attacks_object_aux(unit, attacks_object[1], skills["evocation_skill"],
      {{ 5,3},{ 7,3},{ 7,4},{ 8,4},{10,4},{12,4},{14,4},{16,4},  {1,0.125}},
      {
        name="EoHS_evocation_skill_ranged_attack",
        description=_"fireball",
        icon="attacks/fireball.png",
        type="fire",
        range="ranged",
        { "specials", wesnoth.get_variable("magical_special") },
      }
    )
    update_wizard_attacks_object_aux(unit, attacks_object[2], skills["nature_magic_skill"],
      {{ 5,3},{ 5,4},{ 6,4},{ 7,4},{ 8,4},{10,4},{12,4},{11,5},  {0.5,0.25}},
      {
        name="EoHS_nature_magic_skill_ranged_attack",
        description=_"faerie fire",
        icon="attacks/faerie-fire.png",
        type="arcane",
        range="ranged",
        { "specials", wesnoth.get_variable("magical_special") },
      }
    )
    update_wizard_attacks_object_aux(unit, attacks_object[3], skills["necromancy_skill"],
      {{ 7,2},{ 7,3},{ 8,3},{10,3},{12,3},{14,3},{16,3},{18,3},  {1.5625,0.08}},
      {
        name="EoHS_necromancy_skill_ranged_attack",
        description=_"chill wave",
        icon="attacks/iceball.png",
        type="cold",
        range="ranged",
        { "specials", wesnoth.get_variable("magical_special") },
      }
    )
  end
  if unit_is_type(unit, "Lich") and wizard_unit_level(unit) > 3 then
    attacks_object[4][2] = {
      apply_to = "attack",
      name = "chill tempest,shadow wave",
      increase_damage = math.floor(((wizard_unit_level(unit) - 3) * 2.5) - 1),
      increase_attacks = math.floor(((wizard_unit_level(unit) - 3) * 0.2) + 0.8),
    }
  else
    attacks_object[4][2] = {}
  end
end

function update_wizard_resistance_effect_aux(unit, resistances_tag, damage_type, skill)
  if skill and not unit_is_type(unit, "Lich") then resistances_tag[2][damage_type] = resistances_tag[2][damage_type] - (math.min(3, wizard_unit_level(unit) - 1) * math.min(10, skill * 2)) end
  if get_unit_eohs_skills(unit).archmage then resistances_tag[2][damage_type] = resistances_tag[2][damage_type] - 40 end
end
function update_wizard_resistance_effect(unit)
  local modifications = helper.get_child(unit, "modifications")
  local type_mods_object = helper.get_child(modifications, "object", "wizard_type_mods_object_resistance")
  local resistances_tag = type_mods_object[1][2][1]
  local skills = get_unit_eohs_skills(unit)
  if unit_is_type(unit, "Lich") then resistances_tag[2] = {
    fire=120,
    cold=50,
    arcane=140,
    blade=90,
    impact=110,
    pierce=70
  } else resistances_tag[2] = {
    fire=100,
    cold=100,
    arcane=100,
    blade=100,
    impact=100,
    pierce=100
  } end
  if skills then
    update_wizard_resistance_effect_aux(unit, resistances_tag, "fire",   skills["evocation_skill"])
    update_wizard_resistance_effect_aux(unit, resistances_tag, "arcane", skills["nature_magic_skill"])
    update_wizard_resistance_effect_aux(unit, resistances_tag, "cold",   skills["necromancy_skill"])
  end
end

function update_wizard_defense(unit)
  local skills = get_unit_eohs_skills(unit)
  local modifications = helper.get_child(unit, "modifications")
  local type_mods_object = helper.get_child(modifications, "object", "wizard_type_mods_object_movetype")
  local defense_effect = type_mods_object[2][2]
  defense_effect[1][2] = {}
  if skills and skills.nature_magic_skill then
    if skills.nature_magic_skill >= 3 then defense_effect[1][2].swamp_water = -10 end
    if skills.nature_magic_skill >= 5 then defense_effect[1][2].forest = -10 end
    if skills.nature_magic_skill >= 6 then defense_effect[1][2].swamp_water = -20 end
    if skills.nature_magic_skill >= 8 then defense_effect[1][2].fungus = -10 end
    if skills.nature_magic_skill >= 9 then defense_effect[1][2].swamp_water = -30 end
    if skills.nature_magic_skill >= 10 then defense_effect[1][2].forest = -20 end
  end
end

function update_wizard_movement_costs(unit)
  local skills = get_unit_eohs_skills(unit)
  local modifications = helper.get_child(unit, "modifications")
  local type_mods_object = helper.get_child(modifications, "object", "wizard_type_mods_object_movetype")
  local movement_costs_effect = type_mods_object[1][2]
  movement_costs_effect[1][2] = {}
  if skills and skills.nature_magic_skill then
    if skills.nature_magic_skill >= 1 then movement_costs_effect[1][2].forest = -1 end
    if skills.nature_magic_skill >= 2 then movement_costs_effect[1][2].fungus = -1 end
    if skills.nature_magic_skill >= 3 then movement_costs_effect[1][2].swamp_water = -1 end
    if skills.nature_magic_skill >= 4 then movement_costs_effect[1][2].mountains = -1 end
    if skills.nature_magic_skill >= 6 then movement_costs_effect[1][2].shallow_water = -1 end
    if skills.nature_magic_skill >= 7 then movement_costs_effect[1][2].frozen = -1 end
    if skills.nature_magic_skill >= 8 then movement_costs_effect[1][2].cave = -1 end
  end
end

function remove_AMLA(unit)
  local i = 1
  while unit[i] do
    if unit[i][1] == "advancement" then table.remove(unit, i) else i = i + 1 end
  end
end

function set_wizard_advancements(unit)
  local skills = get_unit_eohs_skills(unit)
  if skills and skills.necromancy_skill and skills.necromancy_skill >= 7 then
    unit.advances_to = "Lich"
  else
    if unit_is_type(unit, "Arch Mage") or unit_is_type(unit, "Great Mage") then unit.advances_to = "Great Mage"
    elseif unit_is_type(unit, "Lich") then unit.advances_to = "Lich"
    elseif unit_is_type(unit, "Red Mage") then
      unit.advances_to = "Arch Mage"
    end
  end
end

function set_wizard_unit_type_description(unit)
  unit.description = EoHS_rules
end

function set_wizard_level(unit)
  if wizard_is_max_level(unit) then unit.level = unit.level + (get_unit_variable(unit, "number_of_times_advanced_after_max_level") or 0) end
end

function set_wizard_max_experience(unit)
      if wizard_unit_level(unit) == 1 then unit.max_experience = xp_to_advance_wizard_from_level_1
  elseif wizard_unit_level(unit) == 2 then unit.max_experience = xp_to_advance_wizard_from_level_2
  elseif wizard_unit_level(unit) >= 3 then
    -- Increase linearly/quadratically, not exponentially (3/2 Arch for the first AMLA, 4/2 Arch for the second, 5/2 for the third, and so on)
    unit.max_experience = math.floor((xp_to_advance_wizard_from_level_3 * (wizard_unit_level(unit) - 1)) / 2)
  end
end

function remove_profile(unit)
  unit.profile = "unit_image"
end

function apply_individual_player_quirks(unit)
  local modifications = ensure_presence_of_and_get_subtag(unit, "modifications")

  if tostring(unit.name) == "angerpersonified" then unit.gender = "female" end
  if tostring(unit.name) == "telomere" then table.insert(modifications, { "trait", {
    id="diligent",
    name=(_"diligent"),
    description=(_"telomere has been a diligent player, playtester, and promoter of Era of High Sorcery almost since its inital update to Wesnoth 1.8."),
  }}) end
  if string.match(tostring(unit.name), "COWA") then table.insert(modifications, { "trait", {
    id="annoying",
    name=(_"annoying"),
    description=(_"COWA is annoying."),
  }}) end
  if string.match(tostring(unit.name), "Elvish_Pillage") then
    unit.name = "Elvish_Pillager"
    table.insert(modifications, { "trait", {
      id="author",
      name=(_"author"),
      description=(_"Elvish_Pillager is the author of Era of High Sorcery. Feel free to report bugs to them!"),
    }})
  end
end

  >>
[/lua]

