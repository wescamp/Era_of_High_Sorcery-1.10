#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("unit_graphics.cfg")

--[[ frame_type = {
  wizard_frame = can be "attack1" or "attack2"
  mount_frame = (means different things for different units)
  override_base_image = standard image format, or nil
}]]


staff_head_offsets_table = {
  ["units/undead-necromancers/lich.png"             ] = { x = -11, y = -22 },
  ["units/undead-necromancers/lich-magic-1.png"     ] = { x = -12, y = -25 },
  ["units/undead-necromancers/lich-magic-3.png"     ] = { x = -15, y = -28 },
  ["units/undead-necromancers/lich-defend.png"      ] = { x = -15, y = -24 },
  ["units/undead-necromancers/lich-idle-1.png"      ] = { x = -11, y = -23 },
  ["units/undead-necromancers/lich-idle-2.png"      ] = { x = -11, y = -23 },
  ["units/undead-necromancers/lich-idle-3.png"      ] = { x = -11, y = -23 },
  ["units/undead-necromancers/lich-melee-1.png"     ] = { x = - 7, y = -26 },
  ["units/undead-necromancers/lich-melee-2.png"     ] = { x = - 5, y = -26 },
  ["units/human-magi/mage.png"                      ] = { x =  15, y = -14 },
  ["units/human-magi/mage-attack-magic1.png"        ] = { x =  14, y = -16 },
  ["units/human-magi/mage-attack-magic2.png"        ] = { x =   9, y = -21 },
  ["units/human-magi/mage-attack-staff1.png"        ] = { x =   8, y = -24 },
  ["units/human-magi/mage-attack-staff2.png"        ] = { x =  27, y =  10 },
  ["units/human-magi/mage-defend.png"               ] = { x =  12, y = -15 },
  ["units/human-magi/red-mage.png"                  ] = { x =  14, y = -11 },
  ["units/human-magi/red-mage-attack-magic-1.png"   ] = { x =  13, y = -18 },
  ["units/human-magi/red-mage-attack-magic-2.png"   ] = { x =  11, y = -23 },
  ["units/human-magi/red-mage-attack-staff-1.png"   ] = { x =  10, y = -23 },
  ["units/human-magi/red-mage-attack-staff-2.png"   ] = { x =  28, y =   9 },
  ["units/human-magi/red-mage-defend.png"           ] = { x =  14, y = -17 },
  ["units/human-magi/arch-mage.png"                 ] = { x =  16, y = -18 },
  ["units/human-magi/arch-mage-attack-magic-1.png"  ] = { x =  17, y = -21 },
  ["units/human-magi/arch-mage-attack-magic-2.png"  ] = { x =  18, y = -24 },
  ["units/human-magi/arch-mage-attack-staff-1.png"  ] = { x =   6, y = -30 },
  ["units/human-magi/arch-mage-attack-staff-2.png"  ] = { x =  30, y =  10 },
  ["units/human-magi/arch-mage-defend.png"          ] = { x =  13, y = -19 },
  ["units/human-magi/great-mage.png"                ] = { x =  17, y = -26 },
  ["units/human-magi/great-mage-attack-magic-1.png" ] = { x =  17, y = -28 },
  ["units/human-magi/great-mage-attack-magic-2.png" ] = { x =  18, y = -31 },
  ["units/human-magi/great-mage-attack-staff-1.png" ] = { x =   3, y = -33 },
  ["units/human-magi/great-mage-attack-staff-2.png" ] = { x =  32, y =  10 },
  ["units/human-magi/great-mage-defend.png"         ] = { x =  12, y = -27 },
  ["units/undead/wraith-s.png"                      ] = { x =   8, y =   5 },
  ["units/undead/wraith-s-1.png"                    ] = { x =   8, y =   5 },
  ["units/undead/wraith-s-2.png"                    ] = { x =   8, y =   5 },
  ["units/undead/wraith-s-3.png"                    ] = { x =   7, y =   4 },
  ["units/undead/wraith-s-4.png"                    ] = { x =   7, y =   5 },
  ["units/undead/wraith-s-defend-1.png"             ] = { x =   7, y =   3 },
  ["units/undead/wraith-s-defend-2.png"             ] = { x =   6, y =   2 },
  ["units/undead/wraith-s-attack-1.png"             ] = { x =   6, y =   1 },
  ["units/undead/wraith-s-attack-2.png"             ] = { x =   0, y =  10 },
  ["units/undead/wraith-s-attack-3.png"             ] = { x =  14, y = - 6 },
  ["units/undead/wraith-s-attack-4.png"             ] = { x =  14, y = - 6 },
  ["units/undead/wraith-s-attack-5.png"             ] = { x =  15, y = - 7 },
}

function staff_head_offsets(image_name)
  if not image_name then return { x=0, y=0 } end
  local relevant_image_name = string.gsub(image_name, "+female", "")
  local manually_defined = staff_head_offsets_table[relevant_image_name]
  if manually_defined then
    return manually_defined
  else
    if string.find(relevant_image_name, "spectre") then return { x=-19, y=-20 } end
    return { x=0, y=0 }
  end
end


function rider_crotch_to_center_offsets(rider_image_name)
      if string.match(rider_image_name, "deathknight-crossbow") then return { x = 5, y = -12 }
  elseif string.match(rider_image_name, "deathknight") then return { x =  4, y = -4 }
  elseif string.match(rider_image_name,   "red-mage") then return { x =  4, y = -4 }
  elseif string.match(rider_image_name, "great-mage")
      or string.match(rider_image_name,  "arch-mage") then return { x =  0, y = -4 }
  elseif string.match(rider_image_name,       "lich") then return { x = -2, y = -4 }
                                                      else return { x =  3, y = -5 } -- appropriate to Mage
  end
end
mount_center_to_rider_crotch_offsets_table = {
  --["units/monsters/water-serpent.png"           ] = { x = - 6, y =   8 },
  ["units/monsters/gryphon.png"                 ] = { x =   5, y = - 2 },
  ["units/monsters/gryphon-flying-1.png"        ] = { x =   5, y = - 5 },
  ["units/monsters/gryphon-flying-2.png"        ] = { x =   5, y = - 8 },
  ["units/monsters/gryphon-flying-3.png"        ] = { x =   5, y = -10 },
  ["units/monsters/gryphon-flying-4.png"        ] = { x =   5, y = -14 },
  ["units/monsters/gryphon-flying-5.png"        ] = { x =   5, y = -12 },
  ["units/monsters/gryphon-flying-6.png"        ] = { x =   5, y = - 9 },
  ["units/monsters/gryphon-flying-7.png"        ] = { x =   5, y = - 6 },
  ["units/monsters/gryphon-flying-8.png"        ] = { x =   5, y = - 3 },
  ["units/monsters/fire-dragon.png"             ] = { x =  28, y = -30 },
  ["units/undead-skeletal/chocobone.png"        ] = { x = - 5, y = - 2 },
  ["units/undead-skeletal/chocobone-defend-2.png"]= { x = -14, y =   0 },
  ["units/undead-skeletal/chocobone-defend-1.png"]= { x = -12, y = - 2 },
  ["units/undead-skeletal/chocobone-attack-1.png"]= { x = - 7, y =   0 },
  ["units/undead-skeletal/chocobone-attack-2.png"]= { x = - 8, y =   0 },
  ["units/undead-skeletal/chocobone-attack-3.png"]= { x = - 3, y = - 1 },
  ["units/undead-skeletal/chocobone-attack-4.png"]= { x = - 8, y =   0 },
}
do
  local wolf_aux = {
    ["units/monsters/wolf.png"                    ] = { x = - 1, y = - 7 },
    ["units/monsters/wolf-water.png"              ] = { x = - 1, y = - 7 },
    ["units/monsters/wolf-moving.png"             ] = { x =   0, y = - 5 },
    ["units/monsters/wolf-attack.png"             ] = { x =   5, y = - 9 },
    ["units/monsters/wolf-defend-1.png"           ] = { x = - 3, y =   0 },
    ["units/monsters/wolf-defend-2.png"           ] = { x = - 1, y = - 4 },
  }
  for k,v in pairs(wolf_aux) do
    local gwolf_name = string.gsub(k, "wolf", "wolf-great")
    local dwolf_name = string.gsub(k, "wolf", "direwolf")
    
    mount_center_to_rider_crotch_offsets_table[k] = naive_deep_copy(v)
    
    mount_center_to_rider_crotch_offsets_table[gwolf_name] = naive_deep_copy(v)
    mount_center_to_rider_crotch_offsets_table[gwolf_name].y = v.y - 5
    
    mount_center_to_rider_crotch_offsets_table[dwolf_name] = naive_deep_copy(v)
    mount_center_to_rider_crotch_offsets_table[dwolf_name].y = v.y - 6
  end
end

function mount_center_to_rider_crotch_offsets(mount_image_name)
  if not mount_image_name then return { x=0, y=0 } end
  local relevant_image_name = mount_image_name
  local manually_defined = mount_center_to_rider_crotch_offsets_table[relevant_image_name]
  if manually_defined then
    return manually_defined
  else
    if string.find(relevant_image_name, "water%-serpent") then
      if string.find(relevant_image_name, "%-n") then
        return { x=-4, y=5 }
      else
        return { x=-6, y=11 }
      end
    end
    if string.find(relevant_image_name, "mudcrawler") then return { x=-1, y=-7 } end
    return { x=0, y=0 }
  end
end

function very_basic_image_info(unit, frame_type)
  local result = { image_name = unit.image }

  if frame_type.image_info then result = naive_deep_copy(frame_type.image_info)
  elseif unit_has_eohs_special(unit, "is_casting_a_spell") then result.image_name = wizard_casting_frame_2(unit)
  end
  return result
end

function unit_base_image_info(unit, frame_type, is_mount)
  local result = very_basic_image_info(unit, frame_type)

  if unit_has_eohs_special(unit, "can_train_and_cast") then
    result.staffhead_offsx = staff_head_offsets(result.image_name).x
    result.staffhead_offsy = staff_head_offsets(result.image_name).y
    result.wizard_offsx, result.wizard_offsy = 0,0
  end
  
  result.image_name = result.image_name..unit_image_mods(unit, false)

  if not is_mount then
    local unit_image_layers = { result }

    if unit_has_explicit_enchantment(unit, "dark_pact") then
      table.insert(unit_image_layers, 1, { image_name = result.image_name.."~O(0.5)~CS(-255,-255,-255)", offsx = 2 })
      table.insert(unit_image_layers, 1, { image_name = result.image_name.."~O(0.5)~CS(-255,-255,-255)", offsx = -2 })
      table.insert(unit_image_layers, 1, { image_name = result.image_name.."~O(0.5)~CS(-255,-255,-255)", offsy = 2 })
      table.insert(unit_image_layers, 1, { image_name = result.image_name.."~O(0.5)~CS(-255,-255,-255)", offsy = -2 })
    end
    if unit_has_explicit_enchantment(unit, "rampage") then
      table.insert(unit_image_layers, { image_name = result.image_name.."~O(0.5)~CS(255,255,-255)~CS(0,-127,0)~BL(3)" })
    end
    if unit_has_explicit_enchantment(unit, "curse_of_anxiety") then
      table.insert(unit_image_layers, { image_name = "projectiles/wailprojectile-ne-3.png~O(0.8)", offsx = 11, offsy = -9 })
      table.insert(unit_image_layers, { image_name = "projectiles/wailprojectile-ne-3.png~O(0.8)~FL(horiz)", offsx = -11, offsy = -9 })
    end
    if unit_has_explicit_enchantment(unit, "lightning_paralysis") then
      table.insert(unit_image_layers, { image_name = "projectiles/gaze.png" })
    end
    local variables = helper.get_child(unit, "variables")
    local num_swords = 0
    local i = 1
    while variables[i] do
      if variables[i][1] == "wizard_sword" then
        num_swords = num_swords + 1
      end
      if remove then table.remove(variables, i) else i = i + 1 end
    end
    if num_swords >= 1 then
      table.insert(unit_image_layers, { image_name = "items/sword.png" })
    end
    if num_swords >= 2 then
      table.insert(unit_image_layers, { image_name = "items/sword.png~FL(horiz)" })
    end
    if unit_has_explicit_enchantment(unit, "dispelling_touch") then
      table.insert(unit_image_layers, {
        image_name = "halo/elven/ice-halo5.png",
        offsx = result.staffhead_offsx, offsy = result.staffhead_offsy
      })
    end
    if unit_has_explicit_enchantment(unit, "reanimating_touch") then
      table.insert(unit_image_layers, {
        image_name = "projectiles/darkmissile-ne.png~CROP(16,16,40,40)",
        offsx = result.staffhead_offsx, offsy = result.staffhead_offsy
      })
    end
    if unit_has_explicit_enchantment(unit, "mud_touch") then
      table.insert(unit_image_layers, {
        image_name = "projectiles/mud-glob.png~CROP(26,25,19,19)",
        offsx = result.staffhead_offsx, offsy = result.staffhead_offsy
      })
    end
    if unit_has_explicit_enchantment(unit, "regeneration") then
      table.insert(unit_image_layers, { image_name = "halo/elven/nature-halo6.png" })
    end
    if unit_has_explicit_enchantment(unit, "just_teleported") then
      table.insert(unit_image_layers, { image_name = "footsteps/teleport-in.png~O(0.5)" })
    end
    
    if unit_image_layers[2] then result = blit_together(unit_image_layers) end
  end

  return result
end

-- returns standard image format
function rider_image_info_without_mount(unit, frame_type)
  local result = unit_base_image_info(unit, frame_type)
  local rider_offs = rider_crotch_to_center_offsets(very_basic_image_info(unit, frame_type).image_name)
  
  translate_image(result, rider_offs.x, rider_offs.y)

  return result
end

function generate_unit_image_info(unit, frame_type)
  local unit_image_layers = {}
  if not (unit_has_eohs_special(unit, "is_mounted") or unit_has_eohs_special(unit, "is_chocobone_knight")) then
    table.insert(unit_image_layers, unit_base_image_info(unit, frame_type))
  else
    local rider_image_info = rider_image_info_without_mount(unit, frame_type)
    local mount_image_info
    local mount_vben
    local mount
    if unit_has_eohs_special(unit, "is_mounted") then
      mount = get_current_mount(unit)
      if not frame_type.mount_frame_type then
        frame_type.mount_frame_type = {}
        if unit_is_type(mount, "Water Serpent") then
          if string.match(unit.facing, "n") then
            frame_type.mount_frame_type.image_info = { image_name = "units/monsters/water-serpent-n.png" }
          end
        end
        if frame_type.mount_moving then
              if unit_is_type(mount, "Wolf") then
            frame_type.mount_frame_type.image_info = { image_name = "units/monsters/wolf-moving.png" }
          elseif unit_is_type(mount, "Great Wolf") then
            frame_type.mount_frame_type.image_info = { image_name = "units/monsters/wolf-great-moving.png" }
          elseif unit_is_type(mount, "Direwolf") then
            frame_type.mount_frame_type.image_info = { image_name = "units/monsters/direwolf-moving.png" }
          elseif unit_is_type(mount, "Gryphon") then
            frame_type.mount_frame_type.image_info = { image_name = "units/monsters/gryphon-flying-4.png" }
          end
        end
      end
      mount_image_info = unit_base_image_info(mount, frame_type.mount_frame_type, true)
      mount_vben = very_basic_image_info(mount, frame_type.mount_frame_type).image_name
    elseif unit_has_eohs_special(unit, "is_chocobone_knight") then
      if frame_type.mount_frame_type then
        mount_vben = frame_type.mount_frame_type.image_info.image_name
      else
        mount_vben = "units/undead-skeletal/chocobone.png"
      end
      mount_image_info = { image_name = mount_vben }
    end
    local mount_offs = mount_center_to_rider_crotch_offsets(mount_vben)
    if unit_has_eohs_special(unit, "is_mounted") then
      if unit_is_type(mount, "Giant Mudcrawler") then
        if mount.level == 2 then mount_offs.y = mount_offs.y - 4 end
        if mount.level == 3 then mount_offs.y = mount_offs.y - 8 end
        if mount.level > 3 then mount_offs.y = mount_offs.y - 16 end
      end
    end
    translate_image(rider_image_info, mount_offs.x, mount_offs.y)
    table.insert(unit_image_layers, mount_image_info)
    table.insert(unit_image_layers, crop_without_moving(rider_image_info, { y2 = mount_offs.y }))
    table.insert(unit_image_layers, crop_without_moving(rider_image_info, { y1 = mount_offs.y, x2 = mount_offs.x }))
    if unit_has_eohs_special(unit, "is_mounted") then
      if unit_is_type(mount, "Water Serpent") then
        table.insert(unit_image_layers, crop_without_moving(mount_image_info, { x1 = 2 }))
        if string.match(mount_vben, "-n") then
          table.insert(unit_image_layers, crop_without_moving(mount_image_info, { y1 = 15 }))
        end
      end
      if unit_is_type(mount, "Fire Dragon") then
        table.insert(unit_image_layers, crop_without_moving(mount_image_info, { x1 = 45, y1 = -55, y2 = -30 }))
      end
    end
    if unit_has_eohs_special(unit, "is_chocobone_knight") then
      table.insert(unit_image_layers, crop_without_moving(mount_image_info, { x1 = 6 }))
    end
  end
  
  if unit_has_explicit_enchantment(unit, "mage_shield") then
    local prelim_image_info = blit_together(unit_image_layers)
    local image_width, image_height = image_dimensions(prelim_image_info.image_name)
    local size = math.ceil(math.max(image_width, image_height) * 160 / 72)
    table.insert(unit_image_layers, {
      image_name = "halo/elven/elven-shield-halo-100pct.png~SCALE("..size..","..size..")",
      offsx = prelim_image_info.offsx,
      offsy = prelim_image_info.offsy,
    })
  end
  
  return blit_together(unit_image_layers)
end

function add_fixed_animations(animations_added, unit_type, fix_frame, fix_animation)
  for i,potential_anim_tag in ipairs(unit_type) do
    -- Hack - assume an animation is anything with a frame in it
    local is_animation = false
    local function search_for_frames(tag)
      if string.match(tag[1], "frame") then return true end
      for i,subtag in ipairs(tag[2]) do if search_for_frames(subtag) then return true end end
      return false
    end
    if search_for_frames(potential_anim_tag) then
      local new_animation = naive_deep_copy(potential_anim_tag)
      for i,tag in ipairs(new_animation[2]) do
        if tag[1] == "frame" then fix_frame(tag[2]) end
        if tag[1] == "if" or tag[1] == "else" then for frame in helper.child_range(tag[2], "frame") do fix_frame(frame) end end
      end
      -- always higher priority than the original animation
      new_animation[2].base_score = (new_animation[2].base_score or 0) + 1
      if fix_animation then fix_animation(new_animation) end
      table.insert(animations_added, new_animation)
    end
  end
end

function regenerate_unit_graphics(unit)
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")
  local modifications = ensure_presence_of_and_get_subtag(unit, "modifications")

  -- Clear any existing generated unit animations.
  local i = 1
  while modifications[i] do
    if modifications[i][2].id == "eohs_unit_graphics_override" then table.remove(modifications, i) else i = i + 1 end
  end

  -- Do we need to generate anything?
  local need_to_alter_base_image = false
  local need_to_generate_casting_anims = false
  if unit_has_eohs_special(unit, "is_mounted") then need_to_alter_base_image = true end
  if unit_has_eohs_special(unit, "is_chocobone_knight") then need_to_alter_base_image = true end
  if unit_has_eohs_special(unit, "is_casting_a_spell") then need_to_alter_base_image = true end
  if unit_has_eohs_special(unit, "can_train_and_cast") then need_to_generate_casting_anims = true end
  local need_to_generate_extra_anims = false
  local enchantments = helper.get_child(variables, "EoHS_enchantments")
  if enchantments then for k,v in pairs(enchantments) do need_to_alter_base_image = true; break end end
  for i,var_pair in ipairs(variables) do
    if var_pair[1] == "EoHS_superimposed_animation" then need_to_generate_extra_anims = true end
  end

  -- What? We don't? Never mind then
  if not (need_to_alter_base_image or need_to_generate_casting_anims or need_to_generate_extra_anims) then return end  

  local unit_graphics_override_object_contents = { id = "eohs_unit_graphics_override" }
  local animations_added = { apply_to = "new_animation" }
  
  local base_image_info = generate_unit_image_info(unit, { image_info = { image_name = unit.image } })
  local base_image_name = base_image_info.image_name
  local image_width, image_height = image_dimensions(base_image_name)

  if need_to_generate_extra_anims then
    for i,var_pair in ipairs(variables) do
      if var_pair[1] == "EoHS_superimposed_animation" then
        table.insert(animations_added, { "animation", var_pair[2] })
      end
    end
  end
  if need_to_alter_base_image then
    table.insert(unit_graphics_override_object_contents, { "effect", {
      apply_to = "image_mod",
      replace = "~O(0)~SCALE("..image_width..","..image_height..")~BLIT("..base_image_name..")",
    }})
    
    if unit_has_eohs_special(unit, "is_mounted") then
      local mount = get_current_mount(unit)
      add_fixed_animations(animations_added, get_gendered_unit_type(mount), function (frame)
          frame.primary = false
          frame.auto_vflip = false
          local image_info = generate_unit_image_info(unit, { mount_frame_type = { image_info = { image_name = frame.image, offsx = frame.directional_x, offsy = frame.y }}})
          frame.image = image_info.image_name
          frame.directional_x = image_info.offsx
          frame.y             = image_info.offsy
        end,
        function (animation)
          local function search_and_fix(filter_tagname)
            for i,tag in ipairs(animation[2]) do
              if tag[1] == filter_tagname then
                table.insert(animation[2], { "and", {
                  special = "granted_by_mount"
                }})
                return
              end
            end
            table.insert(animation[2], { filter_tagname, {
              special = "granted_by_mount"
            }})
          end
          if animation[1] == "attack_anim" or animation[2].apply_to == "attack" then
            search_and_fix("filter_attack")
          end
          if animation[1] == "defend" or animation[2].apply_to == "defend" then
            search_and_fix("filter_second_attack")
          end
        end
      )
    end
    
    add_fixed_animations(animations_added, get_gendered_unit_type(unit), function (frame)
      frame.primary = false
      frame.auto_vflip = false
      local image_info = generate_unit_image_info(unit, { image_info = { image_name = frame.image }, offsx = frame.directional_x, offsy = frame.y, mount_moving = true })
      frame.image = image_info.image_name
      frame.directional_x = image_info.offsx
      frame.y             = image_info.offsy
    end)
    
    -- Ugh, duplicate code for this
    if unit_has_eohs_special(unit, "is_chocobone_knight") then
      add_fixed_animations(animations_added, wesnoth.unit_types["Chocobone"].__cfg, function (frame)
          frame.primary = false
          frame.auto_vflip = false
          local image_info = generate_unit_image_info(unit, { mount_frame_type = { image_info = { image_name = frame.image, offsx = frame.directional_x, offsy = frame.y }}})
          frame.image = image_info.image_name
          frame.directional_x = image_info.offsx
          frame.y             = image_info.offsy
        end,
        function (animation)
          local function search_and_fix(filter_tagname)
            for i,tag in ipairs(animation[2]) do
              if tag[1] == filter_tagname then
                table.insert(animation[2], { "and", {
                  name = "spear"
                }})
                return
              end
            end
            table.insert(animation[2], { filter_tagname, {
              name = "spear"
            }})
          end
          if animation[1] == "attack_anim" or animation[2].apply_to == "attack" then
            search_and_fix("filter_attack")
          end
          if animation[1] == "defend" or animation[2].apply_to == "defend" then
            search_and_fix("filter_second_attack")
          end
        end
      )
    end
  end

  if unit_has_eohs_special(unit, "can_train_and_cast") and not unit_has_eohs_special(unit, "has_been_transmogrified") then
    local attack1_image_info = generate_unit_image_info(unit, { image_info = { image_name = wizard_casting_frame_1(unit) }})
    local attack1_image_name = attack1_image_info.image_name
    local attack2_image_info = generate_unit_image_info(unit, { image_info = { image_name = wizard_casting_frame_2(unit) }})
    local attack2_image_name = attack2_image_info.image_name
    table.insert(animations_added, { "animation", { apply_to = "EoHS_start_casting",
      { "frame", { image = base_image_name, duration = 1, primary = false, auto_vflip = false, }},
      { "frame", { image = attack1_image_name, duration = 200, primary = false, auto_vflip = false, }},
      { "frame", { image = attack2_image_name, duration = 1, primary = false, auto_vflip = false, }},
    }})
    table.insert(animations_added, { "animation", { apply_to = "EoHS_stop_casting",
      { "frame", { image = attack2_image_name, duration = 1, primary = false, auto_vflip = false, }},
      { "frame", { image = attack1_image_name, duration = 200, primary = false, auto_vflip = false, }},
      { "frame", { image = base_image_name, duration = 1, primary = false, auto_vflip = false, }},
    }})

    -- Don't bother fixing the bugs in these animations. Rewrite them and standardize them.
    local function fireball_missile_frame(number, duration, min, max)
      return { "missile_frame", {
        offset = ""..min.."~"..max, duration = duration,
        directional_x = ""..math.floor(base_image_info.wizard_offsx*(1-min)).."~"..math.floor(base_image_info.wizard_offsx*(1-max)),
        y = ""..math.floor(base_image_info.wizard_offsy*(1-min)).."~"..math.floor(base_image_info.wizard_offsy*(1-max)),
        image = "projectiles/fireball-n"..number..".png", image_diagonal = "projectiles/fireball-nw"..number..".png",
      }}
    end
    local function fireball_impact_frame(number)
      return { "missile_frame", {
        offset = "1.0", duration = 60,
        halo = "projectiles/fireball-impact-"..number..".png",
        auto_vflip = false,
      }}
    end
    local function fireball_fail_frame(number)
      return { "missile_frame", {
        duration = 100,
        image = "projectiles/fireball-fail-"..number..".png",
        auto_vflip = false,
      }}
    end
    table.insert(animations_added, { "attack_anim", { start_time = -575, 
      { "filter_attack", { name = "EoHS_evocation_skill_ranged_attack", }},
      { "frame", { image = base_image_name, duration = 50, primary = false, auto_vflip = false, }},
      { "frame", { image = attack1_image_name, duration = 100, sound = "fire.wav", primary = false, auto_vflip = false, }},
      { "frame", { image = attack2_image_name, duration = 150, primary = false, auto_vflip = false, }},
      { "frame", { image = attack1_image_name, duration = 75, primary = false, auto_vflip = false, }},
      { "frame", { image = base_image_name, duration = 75, primary = false, auto_vflip = false, }},

      missile_start_time = -350,

      { "if", { hits = "yes",
        fireball_missile_frame("-1", 40, 0.0, 0.1),
        fireball_missile_frame("-2", 100, 0.1, 0.3),
        fireball_missile_frame("", 125, 0.3, 0.6),
        fireball_missile_frame("-2", 55, 0.7, 0.8),
        fireball_missile_frame("-1", 30, 0.8, 0.9),
        fireball_impact_frame(1),
        fireball_impact_frame(2),
        fireball_impact_frame(3),
        fireball_impact_frame(4),
        fireball_impact_frame(5),
        fireball_impact_frame(6),
        fireball_impact_frame(7),
        fireball_impact_frame(8),
        fireball_impact_frame(9),
        fireball_impact_frame(10),
        fireball_impact_frame(11),
        fireball_impact_frame(12),
        fireball_impact_frame(13),
        fireball_impact_frame(14),
        fireball_impact_frame(15),
        fireball_impact_frame(16),
      }},
      { "else", { hits = "no",
        missile_offset = "0.0~0.20,0.20~0.35,0.35~0.40,0.4~0.45",
        missile_directional_x = ""..(base_image_info.wizard_offsx*(1-0.0)).."~"..(base_image_info.wizard_offsx*(1-0.20))..","..(base_image_info.wizard_offsx*(1-0.20)).."~"..(base_image_info.wizard_offsx*(1-0.35))..","..(base_image_info.wizard_offsx*(1-0.35)).."~"..(base_image_info.wizard_offsx*(1-0.40))..","..(base_image_info.wizard_offsx*(1-0.4)).."~"..(base_image_info.wizard_offsx*(1-0.45)),
        missile_y = ""..(base_image_info.wizard_offsy*(1-0.0)).."~"..(base_image_info.wizard_offsy*(1-0.20))..","..(base_image_info.wizard_offsy*(1-0.20)).."~"..(base_image_info.wizard_offsy*(1-0.35))..","..(base_image_info.wizard_offsy*(1-0.35)).."~"..(base_image_info.wizard_offsy*(1-0.40))..","..(base_image_info.wizard_offsy*(1-0.4)).."~"..(base_image_info.wizard_offsy*(1-0.45)),
        fireball_fail_frame(1),
        fireball_fail_frame(2),
        fireball_fail_frame(3),
        fireball_fail_frame(4),
        fireball_fail_frame(5),
        fireball_fail_frame(6),
        fireball_fail_frame(7),
      }}
    }})
    local function faeriefire_frame(number, image)
      return { "frame", { image = image, duration = 75, halo = "halo/elven/faerie-fire-halo"..number..".png", primary = false, auto_vflip = false, halo_x = base_image_info.wizard_offsx + 14, halo_y = base_image_info.wizard_offsy - 24 }}
    end
    table.insert(animations_added, { "attack_anim", { start_time = -450,
      { "filter_attack", { name = "EoHS_nature_magic_skill_ranged_attack", }},
      faeriefire_frame(1, attack1_image_name),
      { "if", { hits = "yes", { "eohs_faeriefire_sound_frame", { duration = 0, sound = "magic-faeriefire.ogg" }} }},
      { "else", { hits = "no", { "eohs_faeriefire_sound_frame", { duration = 0, sound = "magic-faeriefire-miss.ogg" }} }},
      faeriefire_frame(2, attack2_image_name),
      faeriefire_frame(3, attack2_image_name),
      faeriefire_frame(4, attack2_image_name),
      faeriefire_frame(5, attack2_image_name),
      faeriefire_frame(6, attack2_image_name),
      faeriefire_frame(7, attack1_image_name),
      
      missile_start_time = -500,
      missile_directional_x = ""..base_image_info.wizard_offsx.."~0",
      missile_y = ""..base_image_info.wizard_offsy.."~0",
      missileh_start_time = -500,
      missileh_layer = 10,
      missileh_directional_x = ""..base_image_info.wizard_offsx.."~0",
      missileh_y = ""..base_image_info.wizard_offsy.."~0",
      missileh_offset = "0~1",
      { "missileh_frame", { duration = 75, image = "halo/elven/ice-halo1.png", }},
      { "missileh_frame", { duration = 75, image = "halo/elven/ice-halo2.png", }},
      { "missileh_frame", { duration = 75, image = "halo/elven/ice-halo3.png", }},
      { "missileh_frame", { duration = 75, image = "halo/elven/ice-halo4.png", }},
      { "missileh_frame", { duration = 50, image = "halo/elven/ice-halo5.png", }},
      { "missileh_frame", { duration = 50, image = "halo/elven/ice-halo1.png", }},
      { "missileh_frame", { duration = 50, image = "halo/elven/ice-halo2.png", }},
      { "missileh_frame", { duration = 50, image = "halo/elven/ice-halo6.png", }},
      { "missileh_frame", { duration = 75, image = "halo/elven/ice-halo7.png", }},
      { "missileh_frame", { duration = 50, image = "halo/elven/ice-halo8.png", }},
      { "missileh_frame", { duration = 50, image = "halo/elven/ice-halo9.png", }},
      { "missile_frame", {
        duration = 150, image = "projectiles/icemissile-n-1.png", image_diagonal = "projectiles/icemissile-ne-1.png",
      }},
      { "missile_frame", {
        duration = 150, image = "projectiles/icemissile-n-2.png", image_diagonal = "projectiles/icemissile-ne-2.png",
      }},
      { "missile_frame", {
        duration = 150, image = "projectiles/icemissile-n-3.png", image_diagonal = "projectiles/icemissile-ne-3.png",
      }},
      { "missile_frame", {
        duration = 50, image = "projectiles/icemissile-n-4.png", image_diagonal = "projectiles/icemissile-ne-4.png",
      }},
      { "missile_frame", {
        duration = 75, image = "projectiles/icemissile-n-5.png", image_diagonal = "projectiles/icemissile-ne-5.png",
      }},
      { "missile_frame", {
        duration = 50, image = "projectiles/icemissile-n-6.png", image_diagonal = "projectiles/icemissile-ne-6.png",
      }},
      { "missile_frame", {
        duration = 50, image = "projectiles/icemissile-n-7.png", image_diagonal = "projectiles/icemissile-ne-7.png",
      }},
    }})

    table.insert(animations_added, { "attack_anim", { start_time = -300,
      { "filter_attack", { name = "EoHS_necromancy_skill_ranged_attack", }},
      { "frame", { image = attack1_image_name, duration = 75, primary = false, auto_vflip = false, }},
      { "frame", { image = attack2_image_name, duration = 75, primary = false, auto_vflip = false, }},
      { "frame", { image = attack2_image_name, duration = 75, primary = false, auto_vflip = false,
        halo = "halo/undead/black-magic-1.png",
        halo_x = base_image_info.wizard_offsx, halo_y = base_image_info.wizard_offsy,
      }},
      { "if", { hits = "yes", { "eohs_chillwave_sound_frame", { duration = 0, sound = "magic-dark.ogg" }} }},
      { "else", { hits = "no", { "eohs_chillwave_sound_frame", { duration = 0, sound = "magic-dark-miss.ogg" }} }},
      { "frame", { image = attack2_image_name, duration = 75, primary = false, auto_vflip = false,
        halo = "halo/undead/black-magic-2.png",
        halo_x = base_image_info.wizard_offsx, halo_y = base_image_info.wizard_offsy,
      }},
      { "frame", { image = attack2_image_name, duration = 75, primary = false, auto_vflip = false,
        halo = "halo/undead/black-magic-3.png",
        halo_x = base_image_info.wizard_offsx, halo_y = base_image_info.wizard_offsy,
      }},
      { "frame", { image = attack2_image_name, duration = 75, primary = false, auto_vflip = false,
        halo = "halo/undead/black-magic-4.png",
        halo_x = base_image_info.wizard_offsx, halo_y = base_image_info.wizard_offsy,
      }},
      { "frame", { image = attack2_image_name, duration = 50, primary = false, auto_vflip = false,
        halo = "halo/undead/black-magic-5.png",
        halo_x = base_image_info.wizard_offsx, halo_y = base_image_info.wizard_offsy,
      }},
      { "frame", { image = attack2_image_name, duration = 50, primary = false, auto_vflip = false, }},
      { "frame", { image = attack1_image_name, duration = 50, primary = false, auto_vflip = false, }},

      missile_start_time = -100,
      missile_directional_x = ""..base_image_info.wizard_offsx.."~0",
      missile_y = ""..base_image_info.wizard_offsy.."~0",

      { "missile_frame", {
        duration = 200,
        image = "projectiles/darkmissile-n.png",
        image_diagonal = "projectiles/darkmissile-ne.png",
      }},
    }})
  end

  if animations_added[1] then table.insert(unit_graphics_override_object_contents, { "effect", animations_added }) end
  table.insert(modifications, { "object", unit_graphics_override_object_contents })
end

  >>
[/lua]

