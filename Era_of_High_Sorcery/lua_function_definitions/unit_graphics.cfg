#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("unit_graphics.cfg")

--[[ frame_type = {
  wizard_frame = can be "attack1" or "attack2"
  mount_frame = (means different things for different units)
  override_base_image = standard image format, or nil
}]]



function staff_head_xy_offsets(image_name)
  if not image_name then return 0,0 end
  local relevant_image_name = string.gsub(image_name, "+female", "")
  if relevant_image_name == "units/undead-necromancers/lich.png"             then return -11,-22 end
  if relevant_image_name == "units/undead-necromancers/lich-magic-1.png"     then return -12,-25 end
  if relevant_image_name == "units/undead-necromancers/lich-magic-3.png"     then return -15,-28 end
  if relevant_image_name == "units/undead-necromancers/lich-defend.png"      then return -15,-24 end
  if relevant_image_name == "units/undead-necromancers/lich-idle-1.png"      then return -11,-23 end
  if relevant_image_name == "units/undead-necromancers/lich-idle-2.png"      then return -11,-23 end
  if relevant_image_name == "units/undead-necromancers/lich-idle-3.png"      then return -11,-23 end
  if relevant_image_name == "units/undead-necromancers/lich-melee-1.png"     then return -7,-26 end
  if relevant_image_name == "units/undead-necromancers/lich-melee-2.png"     then return -5,-26 end
  if relevant_image_name == "units/human-magi/mage.png"                      then return 15,-14 end
  if relevant_image_name == "units/human-magi/mage-attack-magic1.png"        then return 14,-16 end
  if relevant_image_name == "units/human-magi/mage-attack-magic2.png"        then return 9,-21 end
  if relevant_image_name == "units/human-magi/mage-attack-staff1.png"        then return 8,-24 end
  if relevant_image_name == "units/human-magi/mage-attack-staff2.png"        then return 27,10 end
  if relevant_image_name == "units/human-magi/mage-defend.png"               then return 12,-15 end
  if relevant_image_name == "units/human-magi/red-mage.png"                  then return 14,-11 end
  if relevant_image_name == "units/human-magi/red-mage-attack-magic-1.png"   then return 13,-18 end
  if relevant_image_name == "units/human-magi/red-mage-attack-magic-2.png"   then return 11,-23 end
  if relevant_image_name == "units/human-magi/red-mage-attack-staff-1.png"   then return 10,-23 end
  if relevant_image_name == "units/human-magi/red-mage-attack-staff-2.png"   then return 28,9 end
  if relevant_image_name == "units/human-magi/red-mage-defend.png"           then return 14,-17 end
  if relevant_image_name == "units/human-magi/arch-mage.png"                 then return 16,-18 end
  if relevant_image_name == "units/human-magi/arch-mage-attack-magic-1.png"  then return 17,-21 end
  if relevant_image_name == "units/human-magi/arch-mage-attack-magic-2.png"  then return 18,-24 end
  if relevant_image_name == "units/human-magi/arch-mage-attack-staff-1.png"  then return 6,-30 end
  if relevant_image_name == "units/human-magi/arch-mage-attack-staff-2.png"  then return 30,10 end
  if relevant_image_name == "units/human-magi/arch-mage-defend.png"          then return 13,-19 end
  if relevant_image_name == "units/human-magi/great-mage.png"                then return 17,-26 end
  if relevant_image_name == "units/human-magi/great-mage-attack-magic-1.png" then return 17,-28 end
  if relevant_image_name == "units/human-magi/great-mage-attack-magic-2.png" then return 18,-31 end
  if relevant_image_name == "units/human-magi/great-mage-attack-staff-1.png" then return 3,-33 end
  if relevant_image_name == "units/human-magi/great-mage-attack-staff-2.png" then return 32,10 end
  if relevant_image_name == "units/human-magi/great-mage-defend.png"         then return 12,-27 end

  if string.find(relevant_image_name, "spectre") then return -19,-20 end
  if relevant_image_name == "units/undead/wraith-s.png" then return 8,5 end
  if relevant_image_name == "units/undead/wraith-s-1.png" then return 8,5 end
  if relevant_image_name == "units/undead/wraith-s-2.png" then return 8,5 end
  if relevant_image_name == "units/undead/wraith-s-3.png" then return 7,4 end
  if relevant_image_name == "units/undead/wraith-s-4.png" then return 7,5 end
  if relevant_image_name == "units/undead/wraith-s-defend-1.png" then return 7,3 end
  if relevant_image_name == "units/undead/wraith-s-defend-2.png" then return 6,2 end
  if relevant_image_name == "units/undead/wraith-s-attack-1.png" then return 6,1 end
  if relevant_image_name == "units/undead/wraith-s-attack-2.png" then return 0,10 end
  if relevant_image_name == "units/undead/wraith-s-attack-3.png" then return 14,-6 end
  if relevant_image_name == "units/undead/wraith-s-attack-4.png" then return 14,-6 end
  if relevant_image_name == "units/undead/wraith-s-attack-5.png" then return 15,-7 end
  if relevant_image_name == "units/undead/wraith-s-1.png" then return 8,5 end
  if relevant_image_name == "units/undead/wraith-s-1.png" then return 8,5 end
  return 0,0
end

function unit_base_image(unit, frame_type)
  local result = {}

      if frame_type.override_base_image       then result = naive_deep_copy(frame_type.override_base_image)
  elseif frame_type.wizard_frame == "attack1" then result.image = wizard_casting_frame_1(unit)
  elseif frame_type.wizard_frame == "attack2" then result.image = wizard_casting_frame_2(unit)
  else                                             result.image = unit.image
  end

  if unit_has_eohs_special(unit, "can_train_and_cast") then
    result.staffhead_offsx, result.staffhead_offsy = staff_head_xy_offsets(result.image)
    result.wizard_offsx, result.wizard_offsy = 0,0
  end

  result.image = result.image..unit_image_mods(unit, false)
  local image_width, image_height = image_dimensions(result.image)

  local unit_image_layers = { result }

  if unit_has_explicit_enchantment(unit, "dark_pact") then
    table.insert(unit_image_layers, 1, { image = result.image.."~O(0.5)~CS(-255,-255,-255)", offsx = 2 })
    table.insert(unit_image_layers, 1, { image = result.image.."~O(0.5)~CS(-255,-255,-255)", offsx = -2 })
    table.insert(unit_image_layers, 1, { image = result.image.."~O(0.5)~CS(-255,-255,-255)", offsy = 2 })
    table.insert(unit_image_layers, 1, { image = result.image.."~O(0.5)~CS(-255,-255,-255)", offsy = -2 })
  end
  if unit_has_explicit_enchantment(unit, "rampage") then
    table.insert(unit_image_layers, { image = result.image.."~O(0.5)~CS(255,255,-255)~CS(0,-127,0)~BL(3)" })
  end
  if unit_has_explicit_enchantment(unit, "lightning_paralysis") then
    table.insert(unit_image_layers, { image = "projectiles/gaze.png" })
  end
  local variables = helper.get_child(unit, "variables")
  local num_swords = 0
  local i = 1
  while variables[i] do
    if variables[i][1] == "wizard_sword" then
      num_swords = num_swords + 1
    end
    if remove then table.remove(variables, i) else i = i + 1 end
  end
  if num_swords >= 1 then
    table.insert(unit_image_layers, { image = "items/sword.png" })
  end
  if num_swords >= 2 then
    table.insert(unit_image_layers, { image = "items/sword.png~FL(horiz)" })
  end
  if unit_has_explicit_enchantment(unit, "reanimating_touch") then
    table.insert(unit_image_layers, { image = "projectiles/darkmissile-ne.png~CROP(16,16,40,40)", offsx = result.staffhead_offsx, offsy = result.staffhead_offsy })
  end
  if unit_has_explicit_enchantment(unit, "dispelling_touch") then
    table.insert(unit_image_layers, { image = "halo/elven/ice-halo5.png", offsx = result.staffhead_offsx, offsy = result.staffhead_offsy })
  end
  if unit_has_explicit_enchantment(unit, "mud_touch") then
    table.insert(unit_image_layers, { image = "projectiles/mud-glob.png~CROP(26,25,19,19)", offsx = result.staffhead_offsx, offsy = result.staffhead_offsy })
  end
  if unit_has_explicit_enchantment(unit, "regeneration") then
    table.insert(unit_image_layers, { image = "halo/elven/nature-halo6.png" })
  end
  if unit_has_explicit_enchantment(unit, "just_teleported") then
    table.insert(unit_image_layers, { image = "footsteps/teleport-in.png~O(0.5)" })
  end
  if unit_has_explicit_enchantment(unit, "mage_shield") then
    local size = math.ceil(math.max(image_width, image_height) * 160 / 72)
    table.insert(unit_image_layers, { image = "halo/elven/elven-shield-halo-100pct.png~SCALE("..size..","..size..")" })
  end

  if unit_image_layers[2] then result = blit_together(unit_image_layers) end

  return result
end

-- returns standard image format
function rider_image_without_mount(unit, frame_type)
  local result = unit_base_image(unit, frame_type)

      if unit_is_type(unit, "Mage") then
    result.offsx = 3
    result.offsy = -5
  elseif unit_is_type(unit, "Red Mage") then
    result.offsx = 4
    result.offsy = -4
  elseif unit_is_type(unit, "Arch Mage") or unit_is_type(unit, "Great Mage") then
    result.offsx = 0
    result.offsy = -4
  elseif unit_is_type(unit, "Lich")      or unit_is_type(unit, "Ancient Lich") then
    result.offsx = -2
    result.offsy = -4
  end

  return result
end

function generate_unit_image(unit, frame_type)
  if not unit_has_eohs_special(unit, "is_mounted") then
    return unit_base_image(unit, frame_type)
  else
    local rider_image = rider_image_without_mount(unit, frame_type)
    local mount = get_current_mount(unit)
        if unit_is_type(mount, "Wolf") then
      local offsx, offsy, mount_image
          if frame_type.mount_frame == "moving" then
        mount_image = unit_base_image(mount, { override_base_image = { image="units/monsters/wolf-moving.png" }})
        offsx =  0
        offsy = -5
      elseif frame_type.mount_frame == "attack" then
        mount_image = unit_base_image(mount, { override_base_image = { image="units/monsters/wolf-attack.png" }})
        offsx = 5
        offsy = -9
      elseif frame_type.mount_frame == "defend-1" then
        mount_image = unit_base_image(mount, { override_base_image = { image="units/monsters/wolf-defend-1.png" }})
        offsx = -3
        offsy = 0
      elseif frame_type.mount_frame == "defend-2" then
        mount_image = unit_base_image(mount, { override_base_image = { image="units/monsters/wolf-defend-2.png" }})
        offsx = -4
        offsy = -1
      elseif frame_type.mount_frame == "water" then
        mount_image = unit_base_image(mount, { override_base_image = { image="units/monsters/wolf-water.png" }})
        offsx = -1
        offsy = -7
      else
        mount_image = unit_base_image(mount, {})
        offsx = -1
        offsy = -7
      end
      rider_image.offsx = rider_image.offsx + offsx
      rider_image.offsy = rider_image.offsy + offsy
      return blit_together({
        crop_without_moving(mount_image, { y2 = offsy }),
        crop_without_moving(mount_image, { y1 = offsy, x2 = offsx }),
         rider_image,
        crop_without_moving(mount_image, { y1 = offsy, x1 = offsx }),
      })
    elseif unit_is_type(mount, "Water Serpent") then
      if frame_type.mount_frame == "north" then
        -- as yet unused
      else
        rider_image.offsx = rider_image.offsx - 6
        rider_image.offsy = rider_image.offsy + 8
        local mount_image = unit_base_image(mount, {})
        return blit_together({
          crop_without_moving(mount_image, { y2 = 8, x2 =  2 }),
          crop_without_moving(mount_image, { y1 = 8, x2 = -6 }),
          rider_image,
          crop_without_moving(mount_image, { y2 = 8, x1 =  2 }),
          crop_without_moving(mount_image, { y1 = 8, x1 = -6 }),
        })
      end
    elseif unit_is_type(mount, "Gryphon") then
      local function gryphon_frame(which, y)
        rider_image.offsx = rider_image.offsx + 5
        rider_image.offsy = rider_image.offsy + y
        local mount_image = unit_base_image(mount, { override_base_image = { image="units/monsters/gryphon-flying-"..which..".png" }})
        return blit_together({
          crop_without_moving(mount_image, { y2 = y }),
          crop_without_moving(mount_image, { y1 = y, x2 = 5 }),
          rider_image,
          crop_without_moving(mount_image, { y1 = y, x1 = 5 }),
        })
      end
          if frame_type.mount_frame == 1 then return gryphon_frame(1, -5)
      elseif frame_type.mount_frame == 2 then return gryphon_frame(2, -8)
      elseif frame_type.mount_frame == 3 then return gryphon_frame(3, -10)
      elseif frame_type.mount_frame == 4 then return gryphon_frame(4, -14)
      elseif frame_type.mount_frame == 5 then return gryphon_frame(5, -12)
      elseif frame_type.mount_frame == 6 then return gryphon_frame(6, -9)
      elseif frame_type.mount_frame == 7 then return gryphon_frame(7, -6)
      elseif frame_type.mount_frame == 8 then return gryphon_frame(8, -3)
      else
        rider_image.offsx = rider_image.offsx + 5
        rider_image.offsy = rider_image.offsy - 2
        local mount_image = unit_base_image(mount, {})
        return blit_together({
          crop_without_moving(mount_image, { y2 = -2 }),
          crop_without_moving(mount_image, { y1 = -2, x2 = 5 }),
          rider_image,
          crop_without_moving(mount_image, { y1 = -2, x1 = 5 }),
        })
      end
    elseif unit_is_type(mount, "Fire Dragon") then
      rider_image.offsx = rider_image.offsx + 28
      rider_image.offsy = rider_image.offsy - 30
      local mount_image = unit_base_image(mount, {})
      return blit_together({
        crop_without_moving(mount_image, { y2 = -55 }),
        crop_without_moving(mount_image, { x2 = 45, y1 = -55, y2 = -30 }),
        crop_without_moving(mount_image, { x2 = 28, y1 = -30 }),
        rider_image,
        crop_without_moving(mount_image, { x1 = 45, y1 = -55, y2 = -30 }),
        crop_without_moving(mount_image, { x1 = 28, y1 = -30 }),
      })
    elseif unit_is_type(mount, "Giant Mudcrawler") then
      rider_image.offsx = rider_image.offsx - 1
      rider_image.offsy = rider_image.offsy - 7
      local mount_image = unit_base_image(mount, {})
      return blit_together({
        crop_without_moving(mount_image, { y2 = -4 }),
        crop_without_moving(mount_image, { y1 = -4, y2 = -5 }),
        rider_image,
        crop_without_moving(mount_image, { y1 = -4, x1 = -5 }),
      })
    end
  end
end

function regenerate_unit_graphics(unit)
  local variables = ensure_presence_of_and_get_subtag(unit, "variables")
  local modifications = ensure_presence_of_and_get_subtag(unit, "modifications")

  -- Clear any existing generated unit animations.
  local i = 1
  while modifications[i] do
    if modifications[i][2].id == "eohs_unit_graphics_override" then table.remove(modifications, i) else i = i + 1 end
  end

  -- Do we need to generate anything?
  local need_to_alter_base_image = false
  local need_to_generate_casting_anims = false
  if unit_has_eohs_special(unit, "is_mounted") then need_to_alter_base_image = true end
  if unit_has_eohs_special(unit, "can_train_and_cast") then need_to_generate_casting_anims = true end
  local need_to_generate_extra_anims = false
  local enchantments = helper.get_child(variables, "EoHS_enchantments")
  if enchantments then for k,v in pairs(enchantments) do need_to_alter_base_image = true; break end end
  for i,var_pair in ipairs(variables) do
    if var_pair[1] == "eohs_superimposed_animation" then need_to_generate_extra_anims = true end
  end

  -- What? We don't? Never mind then
  if not (need_to_alter_base_image or need_to_generate_casting_anims or need_to_generate_extra_anims) then return end

  local unit_graphics_override_object_contents = { id = "eohs_unit_graphics_override" }
  local animations_added = { apply_to = "new_animation" }
  
  local base_image_info = generate_unit_image(unit, {})
  local base_image = base_image_info.image
  local image_width, image_height = image_dimensions(base_image)

  if need_to_alter_base_image then
    table.insert(unit_graphics_override_object_contents, { "effect", {
      apply_to = "image_mod",
      replace = "~O(0)~SCALE("..image_width..","..image_height..")~BLIT("..base_image..")",
    }})
    
    if unit_has_eohs_special(unit, "is_mounted") then
      local mount = get_current_mount(unit)
      local function insert_mount_defense_anim(base_defense_image, reaction_image, sound)
        --local defend_image = generate_unit_image(unit, { , mount_frame = 4 }).image
        table.insert(animations_added, { "defend", { start_time = -126, base_score = 1,
          { "filter_second_attack", { special = "granted_by_mount" }},
          { "frame", { duration = 1, image = base_defense_image, primary = false, auto_vflip = false, }},
          { "frame", { duration = 100, image = reaction_image, primary = false, auto_vflip = false, }},
          { "if", { hits = "hit", { "frame", {
            duration = 150,
            image = reaction_image,
            sound = sound,
            primary = false, auto_vflip = false,
          }} }},
          { "else", { hits = "miss,kill", { "frame", {
            duration = 150,
            image = reaction_image,
            primary = false, auto_vflip = false,
          }} }},
          { "frame", { duration = 1, image = base_defense_image, primary = false, auto_vflip = false, }},
        }})
      end

          if unit_is_type(mount, "Wolf") then
        local attack_image = generate_unit_image(unit, { mount_frame = "attack" }).image
        local moving_image = generate_unit_image(unit, { mount_frame = "moving" }).image
        local  water_image = generate_unit_image(unit, { mount_frame = "water" }).image
        --[[table.insert(animations_added, { "standing_anim", { start_time = -50,
          { "frame", { duration = 50, image = base_image, primary = false, auto_vflip = false, }},
        }})
        table.insert(animations_added, { "standing_anim", { start_time = -50, terrain_type = "Wo,Ww,Ww^Vm,Chs,Chw,Ss",
          { "frame", { duration = 50, image = water_image, primary = false, auto_vflip = false, }},
        }})]]
        table.insert(animations_added, { "movement_anim", { start_time = 0,
          { "frame", { duration = 150, image = moving_image, primary = false, auto_vflip = false, }},
        }})
        insert_mount_defense_anim(generate_unit_image(unit, { mount_frame = "defend-2" }).image, generate_unit_image(unit, { mount_frame = "defend-1" }).image, "wolf-hit-1.ogg,wolf-hit-2.ogg,wolf-hit-3.ogg,wolf-hit-4.ogg")
        table.insert(animations_added, { "attack_anim", { start_time = -350,
          offset = "0.0~-0.1:100,-0.1~0.0:50,0.0~0.3:50,0.3~0.5:100,0.5~0.6:50,0.6~0.4:100,0.4~0.2:50,0.2~0.0:100",
          { "filter_attack", { name = "fangs", special = "granted_by_mount", }},
          { "frame", { duration = 100, image = base_image, sound = "wolf-growl-1.ogg,wolf-growl-2.ogg,wolf-growl-3.ogg,wolf-growl-4.ogg", primary = false, auto_vflip = false, }},
          { "frame", { duration = 150, image = attack_image,  primary = false, auto_vflip = false, }},
          { "if", { hits = "no", { "frame", {
            duration = 50,
            image = attack_image,
            primary = false, auto_vflip = false,
          }} }},
          { "else", { hits = "yes", { "frame", {
            duration = 50,
            image = attack_image,
            sound = "bite.ogg",
            primary = false, auto_vflip = false,
          }} }},
          { "frame", { duration = 250, image = moving_image, primary = false, auto_vflip = false, }},
          { "frame", { duration = 50, image = base_image,  primary = false, auto_vflip = false, }},
        }})
      elseif unit_is_type(mount, "Gryphon") then
        local gryphon_type = wesnoth.get_unit_type("Gryphon").__cfg
        local standing_anim_contents = { start_time = 0, layer = 60, base_score = 1 }
        local movement_anim_contents = { start_time = 0, base_score = 1 }
        local flying_images = {}
        for i = 1,8 do
          flying_images[i] = generate_unit_image(unit, { mount_frame = i }).image
          local frame = { "frame", {
            image = flying_images[i],
            duration = 150,
            primary = false, auto_vflip = false,
          }}
          table.insert(standing_anim_contents, frame)
          table.insert(movement_anim_contents, frame)
        end
        table.insert(animations_added, { "standing_anim", standing_anim_contents })
        table.insert(animations_added, { "movement_anim", movement_anim_contents })
        table.insert(animations_added, { "attack_anim", { start_time = -200,
          { "filter_attack", { name = "claws", special = "granted_by_mount", }},
          { "frame", { duration = 100, image = flying_images[5], primary = false, auto_vflip = false, }},
          { "if", { hits = "no", { "frame", {
            duration = 200,
            image = flying_images[4],
            sound = "miss-1.ogg,miss-2.ogg,miss-3.ogg",
            primary = false, auto_vflip = false,
          }} }},
          { "else", { hits = "yes", { "frame", {
            duration = 200,
            image = flying_images[4],
            sound = "claws.ogg",
            primary = false, auto_vflip = false,
          }} }},
          { "frame", { duration = 100, image = flying_images[5], primary = false, auto_vflip = false,}},
        }})
        insert_mount_defense_anim(flying_images[5], flying_images[4], "gryphon-hit-1.ogg,gryphon-hit-2.ogg,gryphon-hit-3.ogg")
      end
    end

    local unit_type = get_gendered_unit_type(unit)
    for i,tag in ipairs(unit_type) do
      -- Hack - assume an animation is anything with a [frame] in it
      local is_animation = false
      for i,potential_frame in ipairs(tag[2]) do if potential_frame[1] == "frame" then is_animation = true end end
      if is_animation then
        local new_animation = naive_deep_copy(tag)
        local function fix_frame(frame)
          frame.primary = false
          frame.auto_vflip = false
          local image = generate_unit_image(unit, { override_base_image = { image = frame.image }})
          frame.image = image.image
          -- hack - generate_unit_image() never returns images with offsx or offsy
--          frame.directional_x = (frame.directional_x or 0) + (image.offsx or 0)
--          frame.y             = (frame.y or 0)             + (image.offsy or 0)
        end
        for i,tag in ipairs(new_animation[2]) do
          if tag[1] == "frame" then fix_frame(tag[2]) end
          if tag[1] == "if" or tag[1] == "else" then for frame in helper.child_range(tag[2], "frame") do fix_frame(frame) end end
        end
        -- always higher priority than the original animation
        new_animation[2].base_score = (new_animation[2].base_score or 0) + 1
        table.insert(animations_added, new_animation)
      end
    end
  end

  if unit_has_eohs_special(unit, "can_train_and_cast") then
    local attack1_image_info = generate_unit_image(unit, { wizard_frame = "attack1" })
    local attack1_image = attack1_image_info.image
    local attack2_image_info = generate_unit_image(unit, { wizard_frame = "attack2" })
    local attack2_image = attack2_image_info.image
    table.insert(animations_added, { "animation", { apply_to = "EoHS_start_casting",
      { "frame", { image = base_image, duration = 1, primary = false, auto_vflip = false, }},
      { "frame", { image = attack1_image, duration = 200, primary = false, auto_vflip = false, }},
      { "frame", { image = attack2_image, duration = 1, primary = false, auto_vflip = false, }},
    }})
    table.insert(animations_added, { "animation", { apply_to = "EoHS_stop_casting",
      { "frame", { image = attack2_image, duration = 1, primary = false, auto_vflip = false, }},
      { "frame", { image = attack1_image, duration = 200, primary = false, auto_vflip = false, }},
      { "frame", { image = base_image, duration = 1, primary = false, auto_vflip = false, }},
    }})
    table.insert(animations_added, { "standing_anim", {
      { "filter", { has_eohs_special("is_casting_a_spell") }},
      { "frame", { image = attack2_image, duration = 150, primary = false, auto_vflip = false, }},
    }})

    -- Don't bother fixing the bugs in these animations. Rewrite them and standardize them.
    local function fireball_missile_frame(number, duration, min, max)
      return { "missile_frame", {
        offset = ""..min.."~"..max, duration = duration,
        directional_x = ""..math.floor(base_image_info.wizard_offsx*(1-min)).."~"..math.floor(base_image_info.wizard_offsx*(1-max)),
        y = ""..math.floor(base_image_info.wizard_offsy*(1-min)).."~"..math.floor(base_image_info.wizard_offsy*(1-max)),
        image = "projectiles/fireball-n"..number..".png", image_diagonal = "projectiles/fireball-nw"..number..".png",
      }}
    end
    local function fireball_impact_frame(number)
      return { "missile_frame", {
        offset = "1.0", duration = 60,
        halo = "projectiles/fireball-impact-"..number..".png",
        auto_vflip = false,
      }}
    end
    local function fireball_fail_frame(number)
      return { "missile_frame", {
        duration = 100,
        halo = "projectiles/fireball-fail-"..number..".png",
        auto_vflip = false,
      }}
    end
    table.insert(animations_added, { "attack_anim", { start_time = -575, 
      { "filter_attack", { name = "EoHS_evocation_skill_ranged_attack", }},
      { "frame", { image = base_image, duration = 50, primary = false, auto_vflip = false, }},
      { "frame", { image = attack1_image, duration = 100, sound = "fire.wav", primary = false, auto_vflip = false, }},
      { "frame", { image = attack2_image, duration = 150, primary = false, auto_vflip = false, }},
      { "frame", { image = attack1_image, duration = 75, primary = false, auto_vflip = false, }},
      { "frame", { image = base_image, duration = 75, primary = false, auto_vflip = false, }},

      missile_start_time = -350,

      { "if", { hits = "yes",
        fireball_missile_frame("-1", 40, 0.0, 0.1),
        fireball_missile_frame("-2", 100, 0.1, 0.3),
        fireball_missile_frame("", 125, 0.3, 0.6),
        fireball_missile_frame("-2", 55, 0.7, 0.8),
        fireball_missile_frame("-1", 30, 0.8, 0.9),
        fireball_impact_frame(1),
        fireball_impact_frame(2),
        fireball_impact_frame(3),
        fireball_impact_frame(4),
        fireball_impact_frame(5),
        fireball_impact_frame(6),
        fireball_impact_frame(7),
        fireball_impact_frame(8),
        fireball_impact_frame(9),
        fireball_impact_frame(10),
        fireball_impact_frame(11),
        fireball_impact_frame(12),
        fireball_impact_frame(13),
        fireball_impact_frame(14),
        fireball_impact_frame(15),
        fireball_impact_frame(16),
      }},
      { "else", { hits = "no",
        missile_offset = "0.0~0.20,0.20~0.35,0.35~0.40,0.4~0.45",
        missile_directional_x = ""..(base_image_info.wizard_offsx*(1-0.0)).."~"..(base_image_info.wizard_offsx*(1-0.20))..","..(base_image_info.wizard_offsx*(1-0.20)).."~"..(base_image_info.wizard_offsx*(1-0.35))..","..(base_image_info.wizard_offsx*(1-0.35)).."~"..(base_image_info.wizard_offsx*(1-0.40))..","..(base_image_info.wizard_offsx*(1-0.4)).."~"..(base_image_info.wizard_offsx*(1-0.45)),
        missile_y = ""..(base_image_info.wizard_offsy*(1-0.0)).."~"..(base_image_info.wizard_offsy*(1-0.20))..","..(base_image_info.wizard_offsy*(1-0.20)).."~"..(base_image_info.wizard_offsy*(1-0.35))..","..(base_image_info.wizard_offsy*(1-0.35)).."~"..(base_image_info.wizard_offsy*(1-0.40))..","..(base_image_info.wizard_offsy*(1-0.4)).."~"..(base_image_info.wizard_offsy*(1-0.45)),
        fireball_fail_frame(1),
        fireball_fail_frame(2),
        fireball_fail_frame(3),
        fireball_fail_frame(4),
        fireball_fail_frame(5),
        fireball_fail_frame(6),
        fireball_fail_frame(7),
      }}
    }})
    local function faeriefire_frame(number, image)
      return { "frame", { image = image, duration = 75, halo = "halo/elven/faerie-fire-halo"..number..".png", primary = false, auto_vflip = false, halo_x = base_image_info.wizard_offsx + 14, halo_y = base_image_info.wizard_offsy - 24 }}
    end
    table.insert(animations_added, { "attack_anim", { start_time = -450,
      { "filter_attack", { name = "EoHS_nature_magic_skill_ranged_attack", }},
      faeriefire_frame(1, attack1_image),
      { "if", { hits = "yes", { "eohs_faeriefire_sound_frame", { duration = 0, sound = "magic-faeriefire.ogg" }} }},
      { "else", { hits = "no", { "eohs_faeriefire_sound_frame", { duration = 0, sound = "magic-faeriefire-miss.ogg" }} }},
      faeriefire_frame(2, attack2_image),
      faeriefire_frame(3, attack2_image),
      faeriefire_frame(4, attack2_image),
      faeriefire_frame(5, attack2_image),
      faeriefire_frame(6, attack2_image),
      faeriefire_frame(7, attack1_image),
      
      missile_start_time = -500,
      missile_directional_x = ""..base_image_info.wizard_offsx.."~0",
      missile_y = ""..base_image_info.wizard_offsy.."~0",
      missile_directional_x = ""..base_image_info.wizard_offsx.."~0",
      missile_y = ""..base_image_info.wizard_offsy.."~0",
      { "missile_frame", {
        duration = 150, image = "projectiles/icemissile-n-1.png", image_diagonal = "projectiles/icemissile-ne-1.png",
        halo = "halo/elven/ice-halo1.png:100,halo/elven/ice-halo2.png:100,halo/elven/ice-halo3.png:25",
        halo_x = 0, halo_y = 0,
      }},
      { "missile_frame", {
        duration = 150, image = "projectiles/icemissile-n-2.png", image_diagonal = "projectiles/icemissile-ne-2.png",
        halo = "halo/elven/ice-halo3.png:75,halo/elven/ice-halo4.png:75",
        halo_x = 0, halo_y = 0,
      }},
      { "missile_frame", {
        duration = 150, image = "projectiles/icemissile-n-3.png", image_diagonal = "projectiles/icemissile-ne-3.png",
        halo = "halo/elven/ice-halo5.png:100,halo/elven/ice-halo1.png:100,halo/elven/ice-halo2.png:50",
        halo_x = 0, halo_y = 0,
      }},
      { "missile_frame", {
        duration = 50, image = "projectiles/icemissile-n-4.png", image_diagonal = "projectiles/icemissile-ne-4.png",
        halo = "halo/elven/ice-halo6.png",
        halo_x = 0, halo_y = 0,
      }},
      { "missile_frame", {
        duration = 75, image = "projectiles/icemissile-n-5.png", image_diagonal = "projectiles/icemissile-ne-5.png",
        halo = "halo/elven/ice-halo7.png",
        halo_x = 0, halo_y = 0,
      }},
      { "missile_frame", {
        duration = 50, image = "projectiles/icemissile-n-6.png", image_diagonal = "projectiles/icemissile-ne-6.png",
        halo = "halo/elven/ice-halo8.png",
        halo_x = 0, halo_y = 0,
      }},
      { "missile_frame", {
        duration = 50, image = "projectiles/icemissile-n-7.png", image_diagonal = "projectiles/icemissile-ne-7.png",
        halo = "halo/elven/ice-halo9.png",
        halo_x = 0, halo_y = 0,
      }},
    }})

    table.insert(animations_added, { "attack_anim", { start_time = -300,
      { "filter_attack", { name = "EoHS_necromancy_skill_ranged_attack", }},
      { "frame", { image = attack1_image, duration = 75, primary = false, auto_vflip = false, }},
      { "frame", { image = attack2_image, duration = 75, primary = false, auto_vflip = false, }},
      { "frame", { image = attack2_image, duration = 75, primary = false, auto_vflip = false,
        halo = "halo/undead/black-magic-1.png",
        halo_x = base_image_info.wizard_offsx, halo_y = base_image_info.wizard_offsy,
      }},
      { "if", { hits = "yes", { "eohs_chillwave_sound_frame", { duration = 0, sound = "magic-dark.ogg" }} }},
      { "else", { hits = "no", { "eohs_chillwave_sound_frame", { duration = 0, sound = "magic-dark-miss.ogg" }} }},
      { "frame", { image = attack2_image, duration = 75, primary = false, auto_vflip = false,
        halo = "halo/undead/black-magic-2.png",
        halo_x = base_image_info.wizard_offsx, halo_y = base_image_info.wizard_offsy,
      }},
      { "frame", { image = attack2_image, duration = 75, primary = false, auto_vflip = false,
        halo = "halo/undead/black-magic-3.png",
        halo_x = base_image_info.wizard_offsx, halo_y = base_image_info.wizard_offsy,
      }},
      { "frame", { image = attack2_image, duration = 75, primary = false, auto_vflip = false,
        halo = "halo/undead/black-magic-4.png",
        halo_x = base_image_info.wizard_offsx, halo_y = base_image_info.wizard_offsy,
      }},
      { "frame", { image = attack2_image, duration = 50, primary = false, auto_vflip = false,
        halo = "halo/undead/black-magic-5.png",
        halo_x = base_image_info.wizard_offsx, halo_y = base_image_info.wizard_offsy,
      }},
      { "frame", { image = attack2_image, duration = 50, primary = false, auto_vflip = false, }},
      { "frame", { image = attack1_image, duration = 50, primary = false, auto_vflip = false, }},

      missile_start_time = -100,
      missile_directional_x = ""..base_image_info.wizard_offsx.."~0",
      missile_y = ""..base_image_info.wizard_offsy.."~0",

      { "missile_frame", {
        duration = 200,
        image = "projectiles/darkmissile-n.png",
        image_diagonal = "projectiles/darkmissile-ne.png",
      }},
    }})
  end

  if animations_added[1] then table.insert(unit_graphics_override_object_contents, { "effect", animations_added }) end
  table.insert(modifications, { "object", unit_graphics_override_object_contents })
end

  >>
[/lua]

