#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("misc_events.cfg")

function create_eohs_misc_events()
  wesnoth.fire("event", { name = "advance", first_time_only = "no",
    { "lua", { code = 'unit_is_about_to_advance(wesnoth.get_variable("unit"))'}}
  })
  wesnoth.fire("event", { name = "post_advance", first_time_only = "no",
    { "lua", { code = 'unit_just_advanced(wesnoth.get_variable("unit"))'}}
  })
  wesnoth.fire("event", { name = "die", first_time_only = "no",
    { "lua", { code = 'unit_just_died(wesnoth.get_variable("unit"), wesnoth.get_variable("second_unit"))'}}
  })
  wesnoth.fire("event", { name = "prerecruit", first_time_only = "no",
    { "lua", { code = 'unit_was_just_recruited_or_summoned(wesnoth.get_variable("unit"))'}}
  })
  wesnoth.fire("event", { name = "side_turn", first_time_only = "no",
    { "lua", { code = 'side_turn_just_began()'}}
  })
  wesnoth.fire("event", { name = "turn_refresh", first_time_only = "no",
    { "lua", { code = 'turn_refresh_just_happened()'}}
  })
end

function unit_is_about_to_advance(unit)
  local variables = helper.get_child(unit, "variables")
  if variables then
    for instructions in helper.child_range(variables, "on_advance_event") do
      _G[instructions.lua_function](unit)
    end
  end
  wesnoth.put_unit(unit)
end

function unit_just_advanced(unit)
  unit_type_was_just_replaced(unit)
  --clear_unit_eohs_special(unit, "default_advancement_is_set")
  --set_unit_variable(unit, "real_advances_to")
  --set_unit_variable(unit, "EoHS_default_advancement")
  regenerate_unit_attributes(unit, all_regenerable_unit_attributes)
  
  local variables = helper.get_child(unit, "variables")
  if variables then
    for instructions in helper.child_range(variables, "on_post_advance_event") do
      _G[instructions.lua_function](unit)
    end
  end
  mount_combination_hitpoint_update(unit)
  regenerate_unit_graphics(unit)
  wesnoth.put_unit(unit)
end

function unit_just_died(unit, killer)
  if unit then
    if killer and killer.underlying_id ~= unit.underlying_id then
      local unit_statistics = ensure_presence_of_and_get_unit_statistics(killer)
      unit_statistics.kills = (unit_statistics.kills or 0) + 1
      wesnoth.put_unit(killer)
      wesnoth.set_variable("EoHS_statistics_"..killer.side..".kills", (wesnoth.get_variable("EoHS_statistics_"..killer.side..".kills") or 0) + 1)
    end
    wesnoth.set_variable("EoHS_statistics_"..unit.side..".losses", (wesnoth.get_variable("EoHS_statistics_"..unit.side..".losses") or 0) + 1)

    if unit_has_eohs_special(unit, "is_wizard_leader") then
      local owner_id = get_unit_variable(killer, "EoHS_owning_unit")
      if owner_id then
        local pick_recipient = get_unit_table({ { "filter_wml", { underlying_id = owner_id }}, has_eohs_special("can_train_and_cast") })
        if pick_recipient and pick_recipient.hitpoints > 0 then
          grant_picks_to_wizard(pick_recipient, 2, true)
          put_unit_table(pick_recipient)
        end
      end
    end
  end
end

function unit_was_just_recruited_or_summoned(unit)
  recognize_unit(unit)

  -- if it was recruited, note its owner (summons' owners are noted elsewhere)
  if not unit_has_eohs_special(unit, "is_summoned_unit") then
    -- If there are multiple recruiters in the same castle, the first one should be the same one the game finds (for recruiting animations) 
    local recruiter = get_unit_table({ side = unit.side, canrecruit = true, { "and", { { "filter_location", {
      terrain = "K*,*^Kov",
      { "and", {
        radius = 100,
        x = unit.x,
        y = unit.y,
        { "filter_radius", {
          terrain = "C*,K*,*^Cov,*^Kov"
        }}
      }}
    }} }} })
    if recruiter then
      set_unit_variable(unit, "EoHS_owning_unit", recruiter.underlying_id)
      wesnoth.put_unit(unit)
    end
  end
end

function side_turn_just_began()
  eohs_update_all_terrain()
  local units = get_unit_array({ is_on_the_map })
  for i,unit in ipairs(units) do
    recognize_unit(unit)
    local need_to_put_unit = false
    local variables = helper.get_child(unit, "variables")
    if variables then
      for instructions in helper.child_range(variables, "on_side_turn_event") do
        _G[instructions.lua_function](unit)
        need_to_put_unit = true
      end
    end
    if mount_combination_hitpoint_update(unit) then need_to_put_unit = true end
    if need_to_put_unit then wesnoth.put_unit(unit) end
  end

  for i,spell_pair in ipairs(EoHS_spells) do
    if spell_pair[2].once_per_side_turn then spell_pair[2].once_per_side_turn() end
  end
  event_is_over_its_okay_to_advance_now()
end

function turn_refresh_just_happened()
  eohs_update_all_terrain()
  local units = get_unit_array({ is_on_the_map })
  for i,unit in ipairs(units) do
    recognize_unit(unit)
    local need_to_put_unit = false
    local variables = helper.get_child(unit, "variables")
    if variables then
      for instructions in helper.child_range(variables, "on_turn_refresh_event") do
        _G[instructions.lua_function](unit)
        need_to_put_unit = true
      end
    end
    if mount_combination_hitpoint_update(unit) then need_to_put_unit = true end
    if need_to_put_unit then wesnoth.put_unit(unit) end
  end

  for i,spell_pair in ipairs(EoHS_spells) do
    if spell_pair[2].once_per_turn_refresh then spell_pair[2].once_per_turn_refresh() end
  end
  event_is_over_its_okay_to_advance_now()
end

  >>
[/lua]

