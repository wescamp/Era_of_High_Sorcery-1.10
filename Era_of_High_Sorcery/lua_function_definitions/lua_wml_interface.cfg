#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("lua_wml_interface.cfg")

_ = wesnoth.textdomain "wesnoth-Era_of_High_Sorcery"

function boolean_equals_true(input)
  return ((input == true) or (input == "true") or (input == "yes") or (input == "on") or ((tonumber(input) ~= nil) and (tonumber(input) ~= 0)))
end

function unit_effects(unit)
  local modifications = helper.get_child(unit, modifications)
  if not modifications then return end
  if not modifications[1] then return end
  return unit_effects_iterator, { mods = modifications, mod_index = 1, effect_index = 0 }
end
function unit_effects_iterator(state)
  while not state.mods[state.mod_index][2][state.effect_index] do
    mod_index = mod_index + 1
    effect_index = 1
    if not state.mods[state.mod_index] then return end
  end
  local output = state.mods[state.mod_index][2][state.effect_index][2]
  state.effect_index = state.effect_index + 1
  return output
end


function comma_separated_values(string)
  return string.gmatch(string, "[^%s,][^,]*")
end
function remove_values_from_comma_separated_list(string, should_be_removed_func)
  local new_string = ""
  for value in comma_separated_values(string) do
    if not should_be_removed_func(value) then
      if new_string == "" then new_string = value else new_string = new_string..","..value end
    end
  end
  return new_string
end
function add_to_comma_separated_list(string, addition)
  if string and string.len(string) > 0 then return string..","..addition
  else return addition end
end
function string_array_to_comma_separated_list(string_array)
  local new_string = ""
  for i,value in ipairs(string) do
    if new_string == "" then new_string = value else new_string = new_string..","..value end
  end
  return new_string
end

function add_overlay(unit, overlay)
  unit.overlays = add_to_comma_separated_list(unit.overlays, overlay)
end
function remove_overlay(unit, overlay)
  unit.overlays = remove_values_from_comma_separated_list(unit.overlays, function(e) return e == overlay end)
end

function xp_for_kill(unit_table)
  return math.max(math.floor(wesnoth.game_config.kill_experience / 2), unit_table.level * wesnoth.game_config.kill_experience)
end

function wml_random(randstring)
  wesnoth.fire("set_variable", { name="EOHS_LUA_TEMP", rand=randstring})
  local result = wesnoth.get_variable("EOHS_LUA_TEMP")
  wesnoth.set_variable("EOHS_LUA_TEMP")
  return result
end

function eohs_error(string)
  wesnoth.fire("wml_message", { logger="err", message=(_"EoHS error: ")..string })
end

function tags_are_identical_aux(tag1, tag2)
  for k,v1 in pairs(tag1) do
    local v2 = tag2[k]
    if getmetatable(v1) == "translatable string" then
      -- ignore translatable strings.
    elseif type(v1) == "table" then
      -- the only tables are subtags, with the requisite format.
      if type(v2) ~= "table" then return false end
      if v2[1] ~= v1[1] then return false end
      if not tags_are_identical(v1[2], v2[2]) then return false end
    else
      -- these could be strings, numbers... tostring() them all because we might have set some of them to numbers and some to number-strings in Lua
      if tostring(v1) ~= tostring(v2) then return false end
    end
  end
  return true
end
function tags_are_identical(tag1, tag2)
  return tags_are_identical_aux(tag1, tag2) and tags_are_identical_aux(tag2, tag1)
end


function execute_tag_as_wml_actions(tag_contents)
  for i,subtag in ipairs(tag_contents) do
    wesnoth.fire(subtag[1], subtag[2])
  end
end

function team_color_image_mod(side, src_colors)
  wesnoth.fire("store_side", { side=side, variable="EOHS_LUA_TEMP_team_color_image_mod", } )
  local colour = wesnoth.get_variable("EOHS_LUA_TEMP_team_color_image_mod.colour")
  wesnoth.set_variable("EOHS_LUA_TEMP_team_color_image_mod")
  return "~TC("..colour..","..src_colors..")"
end

function unit_image_mods(unit, include_eohs_unit_graphics_override)
  local image_mods = ""
  local modifications = helper.get_child(unit, "modifications")
  if modifications then
    for i,tag in ipairs(modifications) do
      if (tag[2].id ~= "eohs_unit_graphics_override") or include_eohs_unit_graphics_override then
        for effect in helper.child_range(tag[2], "effect") do
          if effect.apply_to == "image_mod" then
            if effect.replace then image_mods = effect.replace end
            if effect.add then image_mods = image_mods..effect.add end
          end
        end
      end
    end
  end
--  if include_TC then
    local flag_rgb = wesnoth.get_unit_type(unit.type).__cfg.flag_rgb
    if flag_rgb then
      image_mods = image_mods..team_color_image_mod(unit.side, flag_rgb)
    end
--  end
--  if extra and extra.include_status and get_unit_subtag_value(unit, "status", "poisoned") then
--    image_mods = image_mods.."~CS(-255,0,-255)"
--  end
--  if extra and extra.include_status and get_unit_subtag_value(unit, "status", "petrified") then
 --   image_mods = image_mods.."~GS()"
--  end
  return image_mods
end
function unit_image(unit)
  return unit.image..unit_image_mods(unit, true)
end

function unit_can_move_on_hex(unit, x, y)
  local unit_in_lua_format = wesnoth.create_unit(unit)
  local movement_cost = wesnoth.unit_movement_cost(unit_in_lua_format, wesnoth.get_terrain(x, y))
  return movement_cost and movement_cost > 0 and movement_cost <= unit.max_moves
end

function unit_can_move_on_terrain(unit, terrain_movement_name)
  local movement_cost = get_unit_subtag_value(unit, "movement_costs", terrain_movement_name)
  return movement_cost and movement_cost > 0 and movement_cost <= unit.max_moves
end


function direction_to_hex(x1, y1, x2, y2)
  local function is_even(v) return v % 2 == 0 end
  if is_even(x1) then y1 = y1 + 0.5 end
  if is_even(x2) then y2 = y2 + 0.5 end
  if math.abs(x1 - x2) * 1.5 < math.abs(y1 - y2) then
    -- either north or south
    if y2 < y1 then return "n" else return "s" end
  elseif x2 < x1 then
    -- to the west
    if y2 < y1 then return "nw" else return "sw" end
  else
    -- to the east
    if y2 < y1 then return "ne" else return "se" end
  end
end

relative_direction = {
  n= {"ne","se","s", "sw","nw"},
  ne={"se","s", "sw","nw","n" },
  se={"s", "sw","nw","n", "ne"},
  s= {"sw","nw","n", "ne","se"},
  sw={"nw","n", "ne","se","s" },
  nw={"n", "ne","se","s", "sw"},
}

function direction_clockwise_from(direction) return relative_direction[direction][1] end
function direction_counterclockwise_from(direction) return relative_direction[direction][5] end

function get_loc_in_direction(x, y, direction)
      if direction == "n" then return x, y - 1
  elseif direction == "s" then return x, y + 1
  else
    local mod = 0
    if x % 2 == 0 then mod = 1 end
        if direction == "ne" then return x + 1, y + mod - 1
    elseif direction == "nw" then return x - 1, y + mod - 1
    elseif direction == "se" then return x + 1, y + mod
    elseif direction == "sw" then return x - 1, y + mod
    end
  end
end

function same_relative_location(x, y, src_x, src_y, dst_x, dst_y)
  local function is_even(v) return v % 2 == 0 end
  local result_x = x + (dst_x - src_x)
  local result_y = y + (dst_y - src_y)
  if is_even(dst_x) ~= is_even(src_x) and not (is_even(x - src_x)) then
    if is_even(dst_x) then result_y = result_y + 1
    else                   result_y = result_y - 1
    end
  end
  return result_x, result_y
end

function pixels_to_hex(x1, y1, x2, y2)
  local function is_even(v) return v % 2 == 0 end
  if is_even(x1) then y1 = y1 + 0.5 end
  if is_even(x2) then y2 = y2 + 0.5 end
  return 54 * (x2 - x1), 72 * (y2 - y1)
end

function hex_is_empty(x, y)
  return wesnoth.eval_conditional({ { "have_location", { x = x, y = y, { "not", { { "filter", {}} }}, { "and", is_reasonable_location }, }} })
end

function sides_are_hostile(side1, side2)
  for team1 in comma_separated_values(wesnoth.get_side(side1).team_name) do
    for team2 in comma_separated_values(wesnoth.get_side(side2).team_name) do
      if team1 == team2 then return false end
    end
  end
  return true
end

function turn_and_side_has_passed(turn, side)
  return wesnoth.current.turn > turn or (wesnoth.current.turn == turn and wesnoth.current.side >= side)
end

function get_unit_table(filter)
  wesnoth.set_variable("EOHS_LUA_TEMP")
  wesnoth.fire("store_unit", { variable="EOHS_LUA_TEMP", { "filter", filter } } )
  local result = wesnoth.get_variable("EOHS_LUA_TEMP")
  wesnoth.set_variable("EOHS_LUA_TEMP")
  return result
end

function put_unit_table(table)
  wesnoth.set_variable("EOHS_LUA_TEMP", table)
  wesnoth.fire("unstore_unit", { advance = "false", variable = "EOHS_LUA_TEMP" } )
  wesnoth.set_variable("EOHS_LUA_TEMP")
end

function naive_deep_copy(table)
  local output = {}
  for k,v in pairs(table) do
    if type(v) == "table" then output[k] = naive_deep_copy(v)
    else output[k] = v end
  end
  return output
end

function substitute_wml_variables(string)
  wesnoth.fire("set_variable", { name = "EOHS_LUA_TEMP", value = string })
  local result = wesnoth.get_variable("EOHS_LUA_TEMP")
  wesnoth.set_variable("EOHS_LUA_TEMP")
  return result
end

function updated_unit_table(unit_table)
  if unit_table then
    wesnoth.set_variable("EOHS_LUA_TEMP")
    wesnoth.fire("store_unit", {
      variable="EOHS_LUA_TEMP",
      { "filter", {
        is_same_unit_as(unit_table)
      }}
    })
    unit_table = wesnoth.get_variable("EOHS_LUA_TEMP")
    wesnoth.set_variable("EOHS_LUA_TEMP")
    return unit_table
  else
    return nil
  end
end

function get_unit_array(filter)
  wesnoth.set_variable("EOHS_LUA_TEMP")
  wesnoth.fire("store_unit", { variable="EOHS_LUA_TEMP", { "filter", filter } } )
  local length = wesnoth.get_variable("EOHS_LUA_TEMP.length")
  local array = helper.get_variable_array("EOHS_LUA_TEMP")
  wesnoth.set_variable("EOHS_LUA_TEMP")
  return array, length
end

function get_location_array(filter)
  wesnoth.set_variable("EOHS_LUA_TEMP")
  wesnoth.fire("store_locations", { variable="EOHS_LUA_TEMP", { "and", filter } } )
  local array, length = helper.get_variable_array("EOHS_LUA_TEMP"), wesnoth.get_variable("EOHS_LUA_TEMP.length")
  wesnoth.set_variable("EOHS_LUA_TEMP")
  return array, length
end

function cull_unit_array(array, filter)
  helper.set_variable_array("EOHS_LUA_TEMP", array)
  wesnoth.fire("store_unit", { variable="EOHS_LUA_TEMP",
    { "filter", {
      find_in="EOHS_LUA_TEMP",
      { "and", filter }
    }}
  })
  local array, length = helper.get_variable_array("EOHS_LUA_TEMP"), wesnoth.get_variable("EOHS_LUA_TEMP.length")
  wesnoth.set_variable("EOHS_LUA_TEMP")
  return array, length
end

function get_gendered_unit_type(unit)
  local result = wesnoth.get_unit_type(unit.type).__cfg
  for i,tag in ipairs(result) do
    if tag[1] == unit.gender then
      wesnoth.set_variable("EOHS_LUA_TEMP", result)
      wesnoth.fire("set_variables", { name = "EOHS_LUA_TEMP", mode = "merge", { "literal", tag[2] }})
      result = wesnoth.get_variable("EOHS_LUA_TEMP")
      wesnoth.set_variable("EOHS_LUA_TEMP")
      return result
    end
  end
  return result
end

function save_auto_stored_vars()
  return {
    x1 = wesnoth.get_variable("x1"),
    y1 = wesnoth.get_variable("y1"),
    x2 = wesnoth.get_variable("x2"),
    y2 = wesnoth.get_variable("y2"),
    unit = wesnoth.get_variable("unit"),
    second_unit = wesnoth.get_variable("second_unit"),
    weapon = wesnoth.get_variable("weapon"),
    second_weapon = wesnoth.get_variable("second_weapon")
  }
end

function load_auto_stored_vars(table)
  wesnoth.set_variable("x1", table.x1)
  wesnoth.set_variable("y1", table.y1)
  wesnoth.set_variable("x2", table.x2)
  wesnoth.set_variable("y2", table.y2)
  wesnoth.set_variable("unit", table.unit)
  wesnoth.set_variable("second_unit", table.second_unit)
  wesnoth.set_variable("weapon", table.weapon)
  wesnoth.set_variable("second_weapon", table.second_weapon)
end

  >>
[/lua]

