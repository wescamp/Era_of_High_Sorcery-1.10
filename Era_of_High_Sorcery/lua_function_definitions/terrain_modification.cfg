#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("terrain_modifications.cfg")

-- Some of the code in this file doesn't have great readability. I'm not enthusiastic about a cleanup though. - EP

number_of_sides = 0
while wesnoth.get_side(number_of_sides + 1) do number_of_sides = number_of_sides + 1 end

local function terrain_base (terrain)
  local base = string.match(terrain, "(.+)%^")
  if base then return base else return terrain end
end
local function terrain_overlay (terrain)
  local overlay = string.match(terrain, "%^(.+)")
  if overlay then return overlay else return "" end
end
local function make_terrain (base, overlay)
  if overlay and overlay ~= "" then return base.."^"..overlay else return base end
end
local function set_terrain_base (terrain, new_base)
  local overlay = string.match(terrain, "%^(.+)")
  if overlay then return new_base.."^"..overlay else return new_base end
end
local function set_terrain_overlay (terrain, new_overlay)
  local base = terrain_base(terrain)
  if new_overlay then return base.."^"..new_overlay else return base end
end


local function terrain_type_nutrients_and_vegetation(terrain)
  -- Forest is the only overlay that affects nutrients: it forces them to the max value because the presence of on-map forest implies that the terrain can sustain it.
  if string.match(terrain, "%^F") or string.match(terrain, "%^Uf") then return 100, 20 end
  -- Otherwise, only the base is important.
  local base = terrain_base(terrain)
  if base == "Ss" then
    -- Pure swamp is quite nice too.
    return 100, 15
  end
  if base == "Gg" or base == "Ggf" or base == "Gs" or base == "Rp" or base == "Hh" or
     base == "Chs" or base == "Khs" then
    -- The ground is eminently already sustaining vegetation. The soil nutrients must be fine.
    return 100, 10
  end
  if base == "Aa" or base == "Ha" or string.sub(base, 1, 1) == "C" or string.sub(base, 1, 1) == "K" or
     base == "Ai" or base == "Ww" or base == "Wo" or base == "Wwf" or base == "Wwr" then
    -- Snow? Castle? Water? We don't really know what's under it. Assume it's reasonably good.
    return 80, 8
  end
  if base == "Re" or base == "Rd" or base == "Ur" or base == "Uu" or base == "Uh" or base == "Rr" or
     base == "Mm" or base == "Ms" then
    -- I don't see anything growing here; assume it's not so great
    return 50, 5
  end
  if base == "Dd" or base == "Ds" or base == "Hd" or base == "Md" or base == "Uh" or base == "Rr" then
    -- Openly desert/sand: very poor
    if terrain_overlay(terrain) == "Do" then return 20,4 else return 20,0 end
  end
  -- Anything else (Chasm, lava...) can't have vegetation at all
  return 0,0
end

local function base_terrain_info(x, y)
  local info = {
    x = x,
    y = y,
    terrain = wesnoth.get_terrain(x, y),
    ruination = 0,
    surface_water = 0,
  }
  info.nutrients, info.vegetation = terrain_type_nutrients_and_vegetation(info.terrain)
  return info
end

local function add_image(info, image, require_ground)
  table.insert(info, { "image", { name = image, require_ground = require_ground }})
  wesnoth.fire("item", { x = info.x, y = info.y, image = image })
end
local function remove_image(info, image)
  wesnoth.fire("remove_item", { x = info.x, y = info.y, image = image })
  local i = 1
  while info[i] do
    if info[i][1] == "image" and info[i][2].name == image then table.remove(info, i) else i = i + 1 end
  end
end
local function remove_all_ground_required_images(info)
  local i = 1
  while info[i] do
    if info[i][1] == "image" and info[i][2].require_ground then
      table.remove(info, i)
      wesnoth.fire("remove_item", { x = info.x, y = info.y, image = info[i][2].image })
    else
      i = i + 1
    end
  end
end
local function base_terrain_has_ground(base)
  return not (string.match(base, "^Q") or string.match(base, "^W"))
end
local function base_terrain_is_chasm(base)
  return string.match(base, "^Q")
end
function eohs_add_poison(info)
  if not info.is_poisoned and not base_terrain_is_chasm(terrain_base(info.terrain)) then
    info.is_poisoned = true
    add_image(info, "items/potion-poison.png")
    add_image(info, "terrain/alphamask.png~G(255)~O(0.2)")
  end
end
function eohs_remove_poison(info)
  if info.is_poisoned then
    info.is_poisoned = nil
    remove_image(info, "items/potion-poison.png")
    remove_image(info, "terrain/alphamask.png~G(255)~O(0.2)")
  end
end

function update_one_terrain_info(info)
  local base = terrain_base(info.terrain)
  local overlay = terrain_overlay(info.terrain)
  local function overlay_is_independent() return (overlay == "li" or overlay == "Cov" or overlay == "Kov" or string.match(overlay, "^V")) end
  local function overlay_is_foresty() return string.match(overlay, "^Uf") or string.match(overlay, "^F") end
  local function set_base(new_base)
    base = new_base
    info.terrain = set_terrain_base(info.terrain, new_base)
  end
  local function set_overlay(new_overlay)
    overlay = new_overlay or ""
    info.terrain = set_terrain_overlay(info.terrain, new_overlay)
  end
  local function set_terrain(new_both)
    info.terrain = new_both
    base = terrain_base(info.terrain)
    overlay = terrain_overlay(info.terrain)
  end

  -- undo absurdities
  if base_terrain_is_chasm(base) then
    info.ruination = 0
    info.vegetation = 0
    info.nutrients = 0
    info.surface_water = 0
  end

  -- ANYTHING destroys these damn things
  if (info.ruination > 0 or info.vegetation > 0 or info.surface_water > 0) and (overlay == "Wm" or overlay == "Gvs") then set_overlay() end
  if info.ruination + info.vegetation > 20 and string.match(overlay, "^Bw") then set_overlay() end
  if info.ruination + info.vegetation > 30 and string.match(overlay, "^Bs") then set_overlay() end
  if info.ruination + info.vegetation > 20 and base == "Ch" then set_base("Chr") end
  if info.ruination + info.vegetation > 25 and base == "Kh" then set_base("Khr") end
  if info.ruination + info.vegetation > 25 and (base == "Rp" or base == "Rr") then set_base("Re") end
  local function ruin_base(old_base, new_base, cost)
    if info.ruination >= cost and base == old_base then
      info.ruination = info.ruination - cost
      set_base(new_base)
    end
  end
  if info.ruination >= 30 and string.match(overlay, "^V") then
    info.ruination = info.ruination - 30
    set_overlay()
    if base_terrain_has_ground(base) then add_image(info, "scenery/village-human-burned"..wml_random("1..4")..".png") end
  end
  ruin_base("Mm","Hh",60)
  ruin_base("Ms","Ha",60)
  ruin_base("Hh","Re",60)
  ruin_base("Ha","Re",60)
  ruin_base("Hd","Ds",60)
  ruin_base("Wwf","Ww",20)
  ruin_base("Wwr","Ww",20)
  ruin_base("Ai","Ww",20)
  --ruin_base("Ww","Wo",40)
  if info.ruination >= 40 and string.match(base, "^C") then
    info.ruination = info.ruination - 40
        if base == "Chw" then set_base("Ww")
    elseif base == "Chs" then set_base("Ss")
    else                      set_base("Re") end
--    if base_terrain_has_ground(base) then add_image(info, "scenery/rubble.png") end
  end
  if info.ruination >= 60 and string.match(base, "^K") then
    info.ruination = info.ruination - 60
        if base == "Khw" then set_base("Ww")
    elseif base == "Khs" then set_base("Ss")
    else                      set_base("Re") end
--    if base_terrain_has_ground(base) then add_image(info, "scenery/rubble.png") end
  end

  local forest_disappear_point = 16
  if base == "Ss" then forest_disappear_point = 36 end
  if info.vegetation < forest_disappear_point + 3 and string.match(overlay, "^F") then
    set_overlay("Fdw")
  end
  if info.vegetation < forest_disappear_point and (string.match(overlay, "^F") or string.match(overlay, "^Uf")) then
    if overlay == "Ufi" then set_overlay("^li") else set_overlay() end
  end
  if info.vegetation < 12 and (base == "Ss") then set_base("Ww") end
  if info.vegetation < 8 and (base == "Gg" or base == "Ggf" or base == "Gs") then set_base("Re") end
  if info.vegetation < 8 and (base == "Rp") then set_base("Rr") end
  if info.vegetation < 8 and (base == "Chs") then set_base("Chw") end
  if info.vegetation < 8 and (base == "Khs") then set_base("Khw") end
  if info.vegetation < 4 and (base == "Re" or base == "Rd") then set_base("Ds") end
  if info.vegetation < 6 and (base == "Hh") then
    if overlay_is_independent() or overlay_is_foresty() then set_base("Hd") else set_terrain("Re^Dr") end
  end
  if info.vegetation < 2 and overlay == "Do" then set_overlay() end
  
  if info.vegetation > 6 and (base == "Ds" or base == "Dd") then set_base("Re") end
  if info.vegetation > 12 and (base == "Re" or base == "Rd") then set_base("Gg") end
  if info.vegetation > 12 and (base == "Hd") then set_base("Hh") end
  if info.vegetation > 12 and (base == "Md") then set_base("Mm") end
  if info.vegetation > 12 and (base == "Chw") then set_base("Chs") end
  if info.vegetation > 12 and (base == "Khw") then set_base("Khs") end
  if info.vegetation > 12 and (base == "Rr") then set_base("Rp") end
  if info.vegetation > 16 and base == "Rp" then set_base("Gg") end
  if info.vegetation > 16 and (base == "Ww" or base == "Wwf") then set_base("Ss") end
  if info.vegetation > 20 then
    if base == "Uu" or base == "Ur" or base == "Uh" then
      if overlay == "li" then set_overlay("Ufi")
      elseif not overlay_is_independent() then set_overlay("Uf") end
    end
    if base == "Gg" or base == "Ggf" or base == "Rp" or base == "Gs" or base == "Hh" then
      if not overlay_is_independent() then set_overlay("Fds") end
    end
    if base == "Aa" or base == "Ha" then
      if not overlay_is_independent() then set_overlay("Fpa") end
    end
  end
  if info.vegetation > 40 and not overlay_is_independent() and base == "Ss" then set_overlay("Fds") end
  if info.vegetation > 40 and string.match(base, "^[CK]") and not overlay_is_independent() then
    set_overlay("Fds")
  end
  if info.vegetation > 60 and string.match(base, "^[CK]") then set_base("Gg") end


  local actual_terrain = info.terrain
  local terrain_height = 5
  if overlay_is_foresty() then
    if string.match(info.terrain, "Hh^F[pmd][sfw]") or string.match(info.terrain, "Ha^F[pmd]a") then
      terrain_height = 15
    end
  elseif string.match(overlay, "^Bw") then
    terrain_height = 0 -- a bit clunky: technically they should go to deep water as fast as shallows do...
  else
        if            base == "Wo"  then terrain_height = -25
    elseif            base == "Wwf" then terrain_height =   0
    elseif string.match(base, "^W") then terrain_height =  -5
    elseif string.match(base, "^H") or base == "Uh" then terrain_height =  15
    elseif string.match(base, "^M") then terrain_height =  25
    end
  end
  if info.surface_water > terrain_height then
    if string.match(overlay, "^V") then
      if info.surface_water > terrain_height + 10 then actual_terrain = "Ww^Vm" end
    else
      if overlay_is_foresty() or string.match(overlay, "^Bw") or overlay == "Dr" then actual_terrain = set_terrain_overlay(actual_terrain) end
      if info.surface_water > terrain_height + 20 then
        if actual_terrain == "Dd^Do" then actual_terrain = "Wo"
        else actual_terrain = set_terrain_base(actual_terrain, "Wo") end
      elseif info.surface_water <= terrain_height + 10 and string.match(base, "^[CK]") then
        if string.match(base, "^C") then
          actual_terrain = set_terrain_base(actual_terrain, "Chw")
          -- sunken ruins stay ruined
          if base == "Ch" then set_base("Chr") end
        else
          actual_terrain = set_terrain_base(actual_terrain, "Khw")
          -- sunken ruins stay ruined
          if base == "Kh" then set_base("Khr") end
        end
      else
        if actual_terrain == "Dd^Do" then actual_terrain = "Ww"
        else actual_terrain = set_terrain_base(actual_terrain, "Ww") end
      end
    end
  end
  
  if wesnoth.get_terrain(info.x, info.y) ~= actual_terrain then
    wesnoth.set_terrain(info.x, info.y, actual_terrain)
  end
  if not base_terrain_has_ground(base) then remove_all_ground_required_images(info) end
  if base_terrain_is_chasm(base) then eohs_remove_poison(info) end
end

function modify_terrain_from_info(info, mod_func)
  mod_func(info)
  update_one_terrain_info(info)
end

function modify_terrain_from_xy(x, y, mod_func)
  local terrain_info_array = helper.get_variable_array("EoHS_scenario_vars.terrain_info")
  local index = nil
  for i,info in ipairs(terrain_info_array) do
    if info.x == x and info.y == y then
      index = i
    end
  end
  if not index then
    table.insert(terrain_info_array, base_terrain_info(x, y))
    index = table.maxn(terrain_info_array)
  end
  modify_terrain_from_info(terrain_info_array[index], mod_func)
  helper.set_variable_array("EoHS_scenario_vars.terrain_info", terrain_info_array)
end

function eohs_update_all_terrain()
  local terrain_info_array = helper.get_variable_array("EoHS_scenario_vars.terrain_info")
  local i = 1
  local last_update_side = wesnoth.get_variable("EoHS_scenario_vars.terrain_last_updated_side") or 0
  local last_update_turn = wesnoth.get_variable("EoHS_scenario_vars.terrain_last_updated_turn") or 0
  local time_passed = (wesnoth.current.turn - last_update_turn) + ((wesnoth.current.side - last_update_side) / number_of_sides)
  wesnoth.set_variable("EoHS_scenario_vars.terrain_last_updated_side", wesnoth.current.side)
  wesnoth.set_variable("EoHS_scenario_vars.terrain_last_updated_turn", wesnoth.current.turn)
  while terrain_info_array[i] do
    local terrain_info = terrain_info_array[i]
    if location_is_obstructing_terrain(terrain_info.x, terrain_info.y) then
      table.remove(terrain_info_array, i)
    else
      i = i + 1
      if time_passed > 0 then
        if terrain_info.is_poisoned then
          local change_factor = ((wml_random("86..100") / 100) ^ time_passed)
          terrain_info.nutrients = terrain_info.nutrients * change_factor
          terrain_info.vegetation = terrain_info.vegetation * change_factor
          local unit = get_unit_table({ x = terrain_info.x, y = terrain_info.y})
          if unit and unit_has_explicit_enchantment(unit, "dispelling_touch") then
            eohs_remove_poison(terrain_info)
          elseif unit and unit_is_living(unit) then
            set_unit_subtag_value(unit, "status", "poisoned", true)
            wesnoth.put_unit(unit)
          end
        end
        -- Vegetation slowly dies if there aren't enough nutrients to support it
        if terrain_info.vegetation > (terrain_info.nutrients / 5) then
          terrain_info.vegetation = terrain_info.vegetation - time_passed
        end
        -- Floodwaters slowly recede
        if terrain_info.surface_water > 0 then
          terrain_info.surface_water = terrain_info.surface_water - time_passed
        end
      end
      update_one_terrain_info(terrain_info)
    end
  end
  helper.set_variable_array("EoHS_scenario_vars.terrain_info", terrain_info_array)
end

  >>
[/lua]

