#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("regeneration.cfg")

table.insert(EoHS_spells, { "regeneration", {
  image = "attacks/fangs-spider.png",
  name = _"Regeneration",
  description = _"Increases the max hitpoints of you or an adjacent unit by your Nature Magic skill, immediately heals it for 2 to 4 hitpoints plus your Nature Magic skill, and grants it the ability to regenerate by (Nature Magic skill * 2) hitpoints per turn for six turns.",
  base_casting_cost = 10,
  base_range = 1,

  is_enchantment = true,

  { "realm_allowance", {
    realm = "nature_magic",
    level = 4,
  }},

  effects = function (circumstances)
    local variables = ensure_presence_of_and_get_subtag(circumstances.target_unit, "variables")
    table.insert(variables, { "nature_magic_regeneration_instance", {
      heals_left = 6,
      skill = circumstances.casting_skill,
    }})
    update_regen_instances(circumstances.target_unit)
    local healing_amount = math.min(circumstances.casting_skill + wml_random("2..4"), circumstances.target_unit.max_hitpoints - circumstances.target_unit.hitpoints)
    if healing_amount > 0 then
      circumstances.target_unit.hitpoints = circumstances.target_unit.hitpoints + healing_amount
      wesnoth.float_label(circumstances.target_unit.x, circumstances.target_unit.y, "<span color='#00FF00'>"..healing_amount.."</span>")
      wesnoth.fire("sound", { name = "heal.wav" })
    end
    local regeneration_amount = circumstances.casting_skill * 2

    wesnoth.float_label(circumstances.target_unit.x, circumstances.target_unit.y, "<span color='#00FF00'>".._"regenerates +"..regeneration_amount.."</span>")
    wesnoth.fire("sound", { name = "heal.wav" })
    wesnoth.put_unit(circumstances.target_unit)
  end,

  once_per_turn_refresh = function ()
    local regenerators = get_unit_array({ side = wesnoth.current.side, has_explicit_enchantment("regeneration") })
    for i,unit in ipairs(regenerators) do
      local variables = helper.get_child(unit, "variables")
      for regeneration_instance in helper.child_range(variables, "nature_magic_regeneration_instance") do
        regeneration_instance.heals_left = regeneration_instance.heals_left - 1
      end
      update_regen_instances(unit)
      put_unit_table(unit)
    end
  end,
}})

function update_regen_instances(unit)
  local variables = helper.get_child(unit, "variables")
  local max_skill = 0
  local max_heals = 0
  local i = 1
  while variables[i] do
    local remove = false
    if variables[i][1] == "nature_magic_regeneration_instance" then
      if variables[i][2].heals_left <= 0 then
        remove = true
      else
        max_skill = math.max(max_skill, variables[i][2].skill)
        max_heals = math.max(max_heals, variables[i][2].heals_left)
      end
    end
    if remove then table.remove(variables, i) else i = i + 1 end
  end

  if max_skill > 0 then
    grant_explicit_enchantment(unit, "regeneration")
    local modifications = helper.get_child(unit, "modifications")
    local regeneration_object = helper.get_child(modifications, "object", "EoHS_explicit_enchantment_object_for_regeneration")
    local regeneration_end_turn = max_heals + wesnoth.current.turn
    if unit.side > wesnoth.current.side then regeneration_end_turn = regeneration_end_turn - 1 end
    regeneration_object[1][2][1][2][1][2].value = 2*max_skill
    regeneration_object[1][2][1][2][1][2].name        =   _"male^regenerates +"..(2*max_skill)
    regeneration_object[1][2][1][2][1][2].female_name = _"female^regenerates +"..(2*max_skill)
    regeneration_object[1][2][1][2][1][2].description = _"Regenerates +"..(2*max_skill).._":\n\nThe unit will heal itself "..(2*max_skill).." HP per turn. If it is poisoned, it will remove the poison instead of healing.\n\nThis ability was granted by a spell, and is temporary. It will disappear on turn "..(regeneration_end_turn).._"eohs_regenerates_desc^."
    regeneration_object[2][2].increase_total = max_skill
    regenerate_unit_attributes(unit, { max_hitpoints=true, abilities=true })
  else
    remove_explicit_enchantment(unit, "regeneration")
  end
end

table.insert(EoHS_explicit_enchantments, { "regeneration", {
  { "effect", {
    apply_to = "new_ability",
    { "abilities", {
      { "regenerate", {
        id = "nature_magic_regeneration",
        affect_self = true,
        poison = "cured",
      }},
    }},
  }},
  { "effect", {
    apply_to = "hitpoints",
  }},
  removal_effects = function (unit)
    local variables = helper.get_child(unit, "variables")
    local i = 1
    while variables[i] do
      if variables[i][1] == "nature_magic_regeneration_instance" then table.remove(variables, i) else i = i + 1 end
    end    
  end,
}})

  >>
[/lua]


