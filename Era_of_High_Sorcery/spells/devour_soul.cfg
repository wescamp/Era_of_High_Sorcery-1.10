#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("devour_soul.cfg")

table.insert(EoHS_spells, { "devour_soul", {
  image = "attacks/scythe.png",
  name = _"Devour Soul",
  description = _"You instantly kill an adjacent unit - either one of your units, or an enemy unit with hitpoints no higher than your Necromancy skill. You are permanently gain one-fourth its max hitpoints, all its unit abilities, and any attack that is innate (i.e. not just a weapon the unit holds - admittedly, which attacks are counted is subjective..)",
  base_casting_cost = 7,
  base_range = 1,

  { "realm_allowance", {
    realm = "necromancy",
    level = 9,
  }},
  
  restrictions = function (circumstances, cant_cast_messages)
    if not circumstances.target_unit then 
      table.insert(cant_cast_messages, _"Devour Soul can only be cast on a unit.")
    else
      if circumstances.target_unit.underlying_id == circumstances.caster.underlying_id then
        table.insert(cant_cast_messages, _"You can't devour your own soul.")
      end
      if not unit_is_living_or_undead(circumstances.target_unit) then
        table.insert(cant_cast_messages, _"You can't devour the soul of a non-living, non-undead unit.")
      end
      if circumstances.target_unit.side ~= circumstances.caster.side and circumstances.target_unit.hitpoints > get_unit_eohs_skills(circumstances.caster).necromancy_skill then
        table.insert(cant_cast_messages, _"You can't cast Devour Soul on an enemy unit with hitpoints greater than your Necromancy skill.")
      end
    end
  end,

  effects = function (circumstances)
    full_kill(circumstances.caster, { is_same_unit_as(circumstances.target_unit) }, false, true)
    -- don't forget the XP:
    circumstances.caster = updated_unit_table(circumstances.caster)

    local dx, dy = pixels_to_hex(circumstances.source_unit.x, circumstances.source_unit.y, circumstances.target_x, circumstances.target_y)
    local enemy_image = unit_image(circumstances.target_unit).."~CS(-255,-255,-255)"
    if circumstances.target_unit.facing == "sw" or circumstances.target_unit.facing == "nw" then enemy_image = enemy_image.."~FL(horiz)" end
    local animation = {
      { "devour_soul_arcessit_frame", {
        layer = 70,
        duration = 600,
        image = enemy_image,
        dont_flip = true,
        blend_color = "0,0,0",
        blend_ratio = "0.0~1.0",
        x = dx,
        y = dy,
      }},
      { "devour_soul_arcessit_frame", {
        layer = 70,
        duration = 600,
        image = enemy_image,
        dont_flip = true,
        blend_color = "0,0,0",
        blend_ratio = "1.0",
        x = dx.."~0",
        y = dy.."~0",
      }},
      { "devour_soul_arcessit_frame", {
        sound = "dwarf-laugh.wav",
        layer = 70,
        duration = 600,
        image = enemy_image,
        dont_flip = true,
        blend_color = "0,0,0",
        blend_ratio = "1.0",
        alpha = "1.0~0.0",
      }},
    }
    play_superimposed_animation(circumstances.caster, animation)
    --wesnoth.fire("sound", { name = "dwarf-laugh.wav" })
    -- First strip the target unit of enchantments, so we don't gain any temporary enhancements as permanent ones.
    remove_all_enchantments(circumstances.target_unit)
    -- Make sure we are on the same page.
    regenerate_unit_attributes(circumstances.caster,      { max_hitpoints=true, abilities=true, attack=true })
    regenerate_unit_attributes(circumstances.target_unit, { max_hitpoints=true, abilities=true, attack=true })

    local hitpoints_gained = math.floor(circumstances.target_unit.max_hitpoints / 4)
    local variables = ensure_presence_of_and_get_subtag(circumstances.caster, "variables")
    local modifications = ensure_presence_of_and_get_subtag(circumstances.caster, "modifications")
    table.insert(modifications, { "object", {
      { "effect", {
        apply_to = "hitpoints",
        increase_total = hitpoints_gained
      }}
    }})
    circumstances.caster.hitpoints = circumstances.caster.hitpoints + hitpoints_gained
    wesnoth.float_label(circumstances.caster.x, circumstances.caster.y, "<span color='#00FF00'>"..hitpoints_gained.."</span>")
    
    local caster_already_has_delumination = false
    local casters_old_abilities = helper.get_child(circumstances.caster, "abilities")
    if casters_old_abilities then
      for i,ability in ipairs(casters_old_abilities) do
        if ability[1] == "illuminates" and ability[2].id == "delumination" then
          caster_already_has_delumination = true
          break
        end
      end
    end

    local victim_abilities = helper.get_child(circumstances.target_unit, "abilities")
    if victim_abilities then
      for i,ability in ipairs(victim_abilities) do
        if ability[1] == "heals" or ability[1] == "regenerate" or ability[1] == "resistance" or ability[1] == "leadership" or ability[1] == "skirmisher" or ability[1] == "teleport" or ability[1] == "hides" then
          table.insert(modifications, { "object", {
            { "effect", {
              unit_type = normal_wizard_types,
              apply_to = "new_ability",
              { "abilities", { ability }}
            }}
          }})
        end
        -- Feeding, which is not a real ability, has to be handled separately
        if ability[1] == "dummy" and ability[2].id == "feeding" then
          table.insert(modifications, { "object", {
            { "effect", {
              unit_type = normal_wizard_types,
              apply_to = "new_ability",
              { "abilities", {
                { "dummy", {
                  id = "eohs_feeding",
                  name = _"feeding",
                  female_name = _"female^feeding",
                  description = _"Feeding:\nThis unit gains 1 hitpoint added to its maximum whenever it kills a living unit.",
                }},
              }},
            }},
          }})
        end
        -- In mainline units, Illuminates always comes with a halo that is SEPARATE from the ability.
        -- Also, necromancers virtually never want to gain Illuminates, so give them Deluminates instead.
        -- We don't know how to handle non-mainline [illuminates] abilities, so ignore them.
        if ability[1] == "illuminates" and (ability[2].id == "illumination" or ability[2].id == "delumination") and not caster_already_has_delumination then
          caster_already_has_delumination = true
          table.insert(modifications, { "object", {
            { "effect", {
              unit_type = normal_wizard_types,
              apply_to = "new_ability",
              { "abilities", wesnoth.get_variable("deluminates_abilities") },
            }},
          }})
        end
      end
    end

    for attack in helper.child_range(circumstances.target_unit, "attack") do
      if attack.name and type(attack.name) == "string" then
        if attack.name == "ink" or attack.name == "web"  or attack.name == "mud glob" or attack.name == "baneblade" or
           attack.name == "jaw" or attack.name == "jaws" or attack.name == "slam"     or attack.name == "crush"     or
           attack.name == "berserker frenzy" or
           string.match(attack.name, "fangs") or string.match(attack.name, "claws")   or string.match(attack.name, "bite") or
           string.match(attack.name, "sting") or string.match(attack.name, "pincers") or string.match(attack.name, "tail") or
           string.match(attack.name, "touch") or string.match(attack.name, "breath")  or string.match(attack.name, "wail") or
           string.match(attack.name, "fist") or string.match(attack.name, "tentacle")
           then
           -- We can eat this attack, but do we already have one of these?
          local already_has_same_attack = false
          for caster_attack in helper.child_range(circumstances.caster, "attack") do
            if tags_are_identical(attack, caster_attack) then
              already_has_same_attack = true
              break
            end
          end
          if not already_has_same_attack then
            local attack_effect_contents = naive_deep_copy(attack)
            attack_effect_contents.apply_to = "new_attack"
            attack_effect_contents.unit_type = normal_wizard_types
            -- the defaultly-added specials shouldn't be part of the effect:
            strip_static_specials(attack_effect_contents)
            table.insert(modifications, { "object", {
              { "effect", attack_effect_contents }
            }})
          end
        end
      end
    end

    regenerate_unit_attributes(circumstances.caster, { max_hitpoints=true, abilities=true, attack=true })
    regenerate_unit_animations(circumstances.caster)
    wesnoth.put_unit(circumstances.caster)
    wesnoth.fire("redraw", { side = circumstances.target_unit.side })
  end,

  once_per_scenario = function ()
    -- the Feeding hack (copied from abilities.cfg, only changed the ability id)
    wesnoth.fire("event", { name = "die", first_time_only = "no",
      { "filter", {
        { "not", {
          { "filter_wml", {
            { "status", {
              not_living = true,
            }},
          }},
        }},
      }},
      { "filter_second", {
        ability = "eohs_feeding",
      }},
      { "unstore_unit", {
        variable = "second_unit",
        red = 0, green = 255, blue = 0,
        text = _"+1 max HP",
        find_vacant = "no",
      }},
      { "object", {
        silent = true,
        duration = "forever",
        { "filter", {
          x = "$x2",
          y = "$y2",
        }},
        { "effect", {
          apply_to = "hitpoints",
          increase_total = 1,
          increase = 1,
        }}
      }},
    })
  end
}})

  >>
[/lua]


