#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("mount_dismount.cfg")

table.insert(EoHS_spells, { "mount_dismount", {
  image = "units/goblins/direwolver-moving.png",
  name = _"Mount/dismount",
  description = _"You mount an adjacent creature under your control, or dismount onto an adjacent empty hex. You can mount Wolves, Water Serpents, Gryphons, and Fire Dragons. You gain all the unit's attacks; your max moves, terrain movement costs, and defenses are replaced with theirs; their hitpoints are added to yours. Otherwise, you retain all your normal unit attributes. You can only mount a unit if you have one more skill (in the summon realm) than it normally takes to summon it. You lose all your moves when you mount/dismount, but you can attack/cast after dismounting.",
  base_casting_cost = "free",
  base_range = "adjacent",

  remove_when_unit_creation_forbidden = true,

  { "realm_allowance", {
    realm = "nature_magic",
    level = 3,
  }},

  restrictions = function (circumstances, cant_cast_messages)
    if unit_has_eohs_special(circumstances.caster, "is_mounted") then
      if circumstances.target_unit then
        if circumstances.target_unit.underlying_id == circumstances.caster.underlying_id then
          table.insert(cant_cast_messages, _"You must cast Mount/dismount at the location you wish to dismount onto.")
        else
          table.insert(cant_cast_messages, _"You can only dismount onto an empty hex.")
        end
      end
    else
      if not circumstances.target_unit then
        table.insert(cant_cast_messages, _"There is nothing there to mount.")
      else
        if circumstances.target_unit.side ~= circumstances.caster.side then
          table.insert(cant_cast_messages, _"You cannot mount a unit that you do not control.")
        end
        if not (unit_is_type(circumstances.target_unit, "Wolf") or unit_is_type(circumstances.target_unit, "Great Wolf") or unit_is_type(circumstances.target_unit, "Direwolf") or unit_is_type(circumstances.target_unit, "Water Serpent") or unit_is_type(circumstances.target_unit, "Gryphon") or unit_is_type(circumstances.target_unit, "Fire Dragon")) then
          if unit_is_type(circumstances.target_unit, "Giant Mudcrawler") then
            table.insert(cant_cast_messages, _"You refuse to climb on top of something so disgusting.")
          elseif circumstances.target_unit.underlying_id == circumstances.caster.underlying_id then
            table.insert(cant_cast_messages, _"You must cast Mount/dismount at the unit you wish to mount.")
          else
            table.insert(cant_cast_messages, _"You can only mount Wolves, Water Serpents, Gryphons, and Fire Dragons.")
          end
        else
          -- Hack: Find the first spell that has a realm allowance and allows summoning this type...
          -- this is really hacky code, but I'm not sure what else to do with it.
          for i,spell_pair in ipairs(EoHS_spells) do
            local spell_info = spell_pair[2]
            if spell_info.is_summon then
              local summon = helper.get_child(spell_info, "summon")
              local realm_allowance = helper.get_child(spell_info, "realm_allowance")
              if summon and realm_allowance and unit_is_type(circumstances.target_unit, summon.type) then
                -- this is what we want
                local relevant_skill = realm_allowance.realm.."_skill"
                if unit_has_eohs_special(circumstances.target_unit, "is_reanimated_undead") then relevant_skill = "necromancy_skill" end
                local skills = get_unit_eohs_skills(circumstances.caster)
                if not (skills and skills[relevant_skill] and skills[relevant_skill] >= realm_allowance.level + 1) then
                  table.insert(cant_cast_messages, _"You don't have enough "..helper.get_child(EoHS_picks, relevant_skill).name.._" to ride that creature.")
                end
                break
              end
            end
          end
        end
      end
    end
  end,

  effects = function (circumstances)
    if unit_has_eohs_special(circumstances.caster, "is_mounted") then
      -- We are mounted: dismount.
      -- give attack back (must do this before calling the splitting function, so the mount will have its attack left)
      circumstances.caster.attacks_left = circumstances.caster.attacks_left + 1
      local rider, mount = rider_and_mount_when_combination_splits(circumstances.caster)
      mount.x = circumstances.caster.x
      mount.y = circumstances.caster.y
      rider.x = circumstances.target_x
      rider.y = circumstances.target_y
      wesnoth.put_unit(mount)
      wesnoth.put_unit(rider)
      wesnoth.fire("capture_village", { x = rider.x, y = rider.y, side = rider.side, })
      wesnoth.fire("redraw", { side = rider.side })
    else
      -- We are not mounted: mount the target.
      local combination = combination_when_rider_mounts_mount(circumstances.caster, circumstances.target_unit)
      wesnoth.put_unit(circumstances.caster.x, circumstances.caster.y)
      wesnoth.put_unit(circumstances.target_unit.x, circumstances.target_unit.y)
      combination.x = circumstances.target_x
      combination.y = circumstances.target_y
      wesnoth.put_unit(combination)
    end
  end,
}})

  >>
[/lua]


