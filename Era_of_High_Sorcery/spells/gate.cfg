#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("gate.cfg")

table.insert(EoHS_spells, { "gate", {
  image = "halo/teleport-7.png",
  name = _"Gate",
  description = _"Teleports you and all adjacent units, friendly or enemy, to a target location within $spell_base_range| hexes. If you teleport your own units with you, they can move immediately, but units that have just teleported can neither attack or be attacked. All teleported units land next to you on the same side of you as they were originally, and in order to cast the spell at a target at all, all teleported units must land at reasonable locations - you can't teleport any unit to the location of another unit or onto a terrain it cannot normally cross. Gate also cannot take you to locations that are completely inaccessible by non-magical means.",
  base_casting_cost = 22,
  base_range = 6,

  { "realm_allowance", {
    realm = "evocation",
    level = 7,
  }},

  restrictions = function (circumstances, cant_cast_messages)
    if circumstances.target_unit then
      if circumstances.target_unit.underlying_id == circumstances.caster.underlying_id then
        table.insert(cant_cast_messages, _"You can't teleport to the same location.")
      else
        table.insert(cant_cast_messages, _"You can't teleport onto a unit.")
      end
    else
      -- note: acquiring of "teleported_units" is duplicated between restrictions and effects
      local teleported_units = get_unit_array({ { "not", { is_in_a_circle_of_protection }}, { "filter_adjacent", { is_same_unit_as(circumstances.caster) }} })
      table.insert(teleported_units, circumstances.caster)
      for i,unit in ipairs(teleported_units) do
        local x, y = same_relative_location(unit.x, unit.y, circumstances.caster.x, circumstances.caster.y, circumstances.target_x, circumstances.target_y) -- yes, really the caster's location, not the source location of the spell
        if not location_is_on_the_map(x, y) then
          table.insert(cant_cast_messages, _"Can't Gate: The "..unit.language_name.._" would be teleported off the map.")
        else
          if location_is_obstructing_terrain(x, y) then
            table.insert(cant_cast_messages, _"Can't Gate: The "..unit.language_name.._" would be teleported into a wall.")
          else
            if not unit_can_move_on_hex(unit, x, y) then
              table.insert(cant_cast_messages, _"Can't Gate: The "..unit.language_name.._" would be teleported into a terrain it can't normally enter.")
            end
          end
          
          local teleporting_onto_a_unit = get_unit_table({ x = x, y = y }) ~= nil
          if teleporting_onto_a_unit then
            for i,unit2 in ipairs(teleported_units) do
              if unit2.x == x and unit2.y == y then
                -- the target hex is one of the ones to be teleported from anyway -> we're fine
                teleporting_onto_a_unit = false
                break
              end
            end
          end
          if teleporting_onto_a_unit then
            table.insert(cant_cast_messages, _"Can't Gate: The "..unit.language_name.._" would be teleported onto another unit.")
          end
        end
      end
    end
  end,

  effects = function (circumstances)
    -- note: acquiring of "teleported_units" is duplicated between restrictions and effects
    local teleported_units = get_unit_array({ { "not", { is_in_a_circle_of_protection }}, { "filter_adjacent", { is_same_unit_as(circumstances.caster) }} })
    table.insert(teleported_units, circumstances.caster)
    for i,unit in ipairs(teleported_units) do
      -- erase it from the map
      wesnoth.put_unit(unit.x, unit.y)
      -- modify its values
      local x, y = same_relative_location(unit.x, unit.y, circumstances.caster.x, circumstances.caster.y, circumstances.target_x, circumstances.target_y) -- yes, really the caster's location, not the source location of the spell
      unit.x = x
      unit.y = y
      grant_explicit_enchantment(unit, "just_teleported")
      wesnoth.put_unit(unit)
      wesnoth.fire("capture_village", { x = unit.x, y = unit.y, side = unit.side})
      wesnoth.float_label(unit.x, unit.y, "<span color='#ffffff'>".._"teleport".."</span>")
    end
    for i,unit in ipairs(teleported_units) do
      wesnoth.fire("redraw", { side = unit.side })
    end
    for i,unit in ipairs(teleported_units) do
      wesnoth.fire_event("moveto", unit.x, unit.y)
    end
    wesnoth.fire("sound", { name = "fanfare-short.wav" })
  end,

  once_per_side_turn = function ()
    local just_teleported_units = get_unit_array({ has_explicit_enchantment("just_teleported") })
    for i,unit in ipairs(just_teleported_units) do
      remove_explicit_enchantment(unit, "just_teleported")
      put_unit_table(unit)
    end
  end,
}})

table.insert(EoHS_explicit_enchantments, { "just_teleported", {
  { "effect", {
    apply_to = "new_ability",
    { "abilities", {
      { "dummy", {
        id = "just_teleported_dummy_ability",
        name = _"male^just teleported",
        female_name = _"female^just teleported",
        description = _"Just teleported:\nThis unit cannot attack or be attacked until the end of this turn.",
      }},
    }},
  }},
  application_effects = function (unit) regenerate_unit_attributes(unit, { attack=true }) end,
  removal_effects = function (unit) regenerate_unit_attributes(unit, { attack=true }) end,
}})

  >>
[/lua]


