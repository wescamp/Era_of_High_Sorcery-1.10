#textdomain wesnoth-Era_of_High_Sorcery

[lua]
  code=<< beginning_file("lightning_bolt.cfg")

table.insert(EoHS_spells, { "lightning_bolt", {
  image = "attacks/lightning.png",
  name = _"Lightning Bolt",
  description = _"Inflicts 12 to 18 damage plus your Nature Magic level upon one target within $spell_base_range| hexes, and, if it's still alive, paralyzes it so that it can't move on or attack its next turn - although paralyzed leaders can still cast spells. You can't strike a unit with lightning on two turns in a row; undead can be paralyzed, but mechanical units cannot.",
  base_casting_cost = 20,
  base_range = 8,
  warn_about_self_casting = true,

  { "realm_allowance", {
    realm = "nature_magic",
    level = 7,
  }},

  restrictions = function (circumstances, cant_cast_messages)
    if circumstances.target_unit and boolean_equals_true(get_unit_variable(circumstances.target_unit, "lingering_lightning_protection")) then
      table.insert(cant_cast_messages, _"A unit can't be struck by lightning on two turns in a row.")
    end
  end,

  effects = function (circumstances)

    local which = wml_random("1..3")
    local dx, dy = pixels_to_hex(circumstances.source_unit.x, circumstances.source_unit.y, circumstances.target_x, circumstances.target_y)
    
    local animation = {
      { "lightning_noise_frame", {
        sound = "lightning.ogg",
      }},
    }
    for frame=1,4 do
      local image = "halo/lightning-bolt-"..which.."-"..frame..".png"
      table.insert(animation, { "lightning_frame", {
        layer = 70,
        duration = 100,
        image = image,
        auto_hflip = false,
        auto_vflip = false,
        x = dx,
        y = dy - 125,
      }})
    end

    play_superimposed_animation(circumstances.source_unit, animation)
    
    -- warning: if target unit and caster are the same, the rest of this function effectively invalidates circumstances.caster
    damage_hex_no_killing(circumstances.target_x, circumstances.target_y, wml_random("12..18") + circumstances.casting_skill, "generic", false, circumstances.caster)
    apply_delayed_kills(circumstances.caster)

    circumstances.target_unit = updated_unit_table(circumstances.target_unit)
    if circumstances.target_unit and unit_is_living_or_undead(circumstances.target_unit) then
      grant_explicit_enchantment(circumstances.target_unit, "lightning_paralysis")
      wesnoth.put_unit(circumstances.target_unit)
      wesnoth.float_label(circumstances.target_x, circumstances.target_y, "<span color='#FF0000'>".._"paralyzed".."</span>")
    end
  end,

  once_per_side_turn = function ()
    local paralysis_losers = get_unit_array({ { "filter_wml", { { "variables", { remove_lightning_paralysis_soon=true }} }} })
    for i,loser in ipairs(paralysis_losers) do
      remove_explicit_enchantment(loser, "lightning_paralysis")
      set_unit_variable(loser, "remove_lightning_paralysis_soon")
      put_unit_table(loser)
      wesnoth.fire("redraw", { side = loser.side })
    end
  end,

  once_per_turn_refresh = function ()
    local paralysis_protection_losers = get_unit_array({
      side = wesnoth.current.side,
      { "not", { has_explicit_enchantment("lightning_paralysis") }},
      { "filter_wml", { { "variables", { lingering_lightning_protection=true }} }}
    })
    for i,loser in ipairs(paralysis_protection_losers) do
      set_unit_variable(loser, "lingering_lightning_protection")
      put_unit_table(loser)
    end

    local imminent_paralysis_losers = get_unit_array({
      side = wesnoth.current.side,
      has_explicit_enchantment("lightning_paralysis"),
    })
    for i,loser in ipairs(imminent_paralysis_losers) do
      set_unit_variable(loser, "remove_lightning_paralysis_soon", true)
      loser.resting = false
      put_unit_table(loser)
    end
  end,
}})

table.insert(EoHS_explicit_enchantments, { "lightning_paralysis", {
  { "effect", {
    apply_to = "new_ability",
    { "abilities", {
      { "dummy", {
        id = "lightning_paralysis_dummy_ability",
        name = _"male^paralyzed",
        female_name = _"female^paralyzed",
        description = _"Paralyzed:\nThis unit cannot move, attack, or retaliate against attacks until its own turn ends, as with the Slow effect.",
      }},
    }},
  }},
  { "effect", {
    apply_to = "movement",
    set = 0,
  }},
--  { "effect", {
--    apply_to = "image_mod",
--    add = "~CS(30,30,60)"
--  }},
  { "weapon_modifications", {
    { "special", {
      type = "swarm",
      swarm_attacks_min = 0,
      swarm_attacks_max = 0,
      id = "lightning_paralysis_attacks_are_useless_special",
      name = _"paralyzed",
      description = _"Paralyzed:\nThis attack cannot be used either on offense or defense until this unit's own turn ends, as with the Slow effect.",
    }},
    { "special", {
      type = "swarm",
      active_on = "offense",
      apply_to = "both",
      swarm_attacks_min = 0,
      swarm_attacks_max = 0,
      id = "lightning_paralysis_cant_attack_special",
    }},
  }},
  application_effects = function (unit)
    set_unit_variable(unit, "lingering_lightning_protection", true)
    -- in case it is applied on the unit's own turn:
    if unit.side == wesnoth.current.side then
      unit.moves = 0
      unit.resting = false
      set_unit_variable(unit, "remove_lightning_paralysis_soon", true)
    end
  end
}})

  >>
[/lua]


